
AtmelStart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000280c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  0000280c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000284  20000068  00002874  00020068  2**2
                  ALLOC
  3 .stack        00000404  200002ec  00002af8  00020068  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  5 .comment      0000002b  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  6 .debug_info   00020d74  00000000  00000000  000200bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e3b  00000000  00000000  00040e2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000bd5d  00000000  00000000  00043c6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000c28  00000000  00000000  0004f9c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001a58  00000000  00000000  000505f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00007379  00000000  00000000  00052048  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000bf6c  00000000  00000000  000593c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006ad5c  00000000  00000000  0006532d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001fc4  00000000  00000000  000d008c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200006f0 	.word	0x200006f0
       4:	000024dd 	.word	0x000024dd
       8:	000024d9 	.word	0x000024d9
       c:	000024d9 	.word	0x000024d9
	...
      2c:	000024d9 	.word	0x000024d9
	...
      38:	000024d9 	.word	0x000024d9
      3c:	000024d9 	.word	0x000024d9
      40:	000024d9 	.word	0x000024d9
      44:	000024d9 	.word	0x000024d9
      48:	000024d9 	.word	0x000024d9
      4c:	000024d9 	.word	0x000024d9
      50:	000024d9 	.word	0x000024d9
      54:	000024d9 	.word	0x000024d9
      58:	000024d9 	.word	0x000024d9
      5c:	0000111d 	.word	0x0000111d
      60:	000024d9 	.word	0x000024d9
      64:	000024d9 	.word	0x000024d9
      68:	000024d9 	.word	0x000024d9
      6c:	00000000 	.word	0x00000000
      70:	000024d9 	.word	0x000024d9
      74:	000024d9 	.word	0x000024d9
      78:	000024d9 	.word	0x000024d9
      7c:	000024d9 	.word	0x000024d9
      80:	000024d9 	.word	0x000024d9
      84:	000024d9 	.word	0x000024d9
      88:	000024d9 	.word	0x000024d9

0000008c <deregister_tm_clones>:
      8c:	4b05      	ldr	r3, [pc, #20]	; (a4 <deregister_tm_clones+0x18>)
      8e:	4806      	ldr	r0, [pc, #24]	; (a8 <deregister_tm_clones+0x1c>)
      90:	3303      	adds	r3, #3
      92:	b510      	push	{r4, lr}
      94:	1a1b      	subs	r3, r3, r0
      96:	2b06      	cmp	r3, #6
      98:	d903      	bls.n	a2 <deregister_tm_clones+0x16>
      9a:	4b04      	ldr	r3, [pc, #16]	; (ac <deregister_tm_clones+0x20>)
      9c:	2b00      	cmp	r3, #0
      9e:	d000      	beq.n	a2 <deregister_tm_clones+0x16>
      a0:	4798      	blx	r3
      a2:	bd10      	pop	{r4, pc}
      a4:	0000280c 	.word	0x0000280c
      a8:	0000280c 	.word	0x0000280c
      ac:	00000000 	.word	0x00000000

000000b0 <register_tm_clones>:
      b0:	4806      	ldr	r0, [pc, #24]	; (cc <register_tm_clones+0x1c>)
      b2:	4907      	ldr	r1, [pc, #28]	; (d0 <register_tm_clones+0x20>)
      b4:	b510      	push	{r4, lr}
      b6:	1a09      	subs	r1, r1, r0
      b8:	1089      	asrs	r1, r1, #2
      ba:	0fcb      	lsrs	r3, r1, #31
      bc:	1859      	adds	r1, r3, r1
      be:	1049      	asrs	r1, r1, #1
      c0:	d003      	beq.n	ca <register_tm_clones+0x1a>
      c2:	4b04      	ldr	r3, [pc, #16]	; (d4 <register_tm_clones+0x24>)
      c4:	2b00      	cmp	r3, #0
      c6:	d000      	beq.n	ca <register_tm_clones+0x1a>
      c8:	4798      	blx	r3
      ca:	bd10      	pop	{r4, pc}
      cc:	0000280c 	.word	0x0000280c
      d0:	0000280c 	.word	0x0000280c
      d4:	00000000 	.word	0x00000000

000000d8 <__do_global_dtors_aux>:
      d8:	b510      	push	{r4, lr}
      da:	4c07      	ldr	r4, [pc, #28]	; (f8 <__do_global_dtors_aux+0x20>)
      dc:	7823      	ldrb	r3, [r4, #0]
      de:	2b00      	cmp	r3, #0
      e0:	d109      	bne.n	f6 <__do_global_dtors_aux+0x1e>
      e2:	f7ff ffd3 	bl	8c <deregister_tm_clones>
      e6:	4b05      	ldr	r3, [pc, #20]	; (fc <__do_global_dtors_aux+0x24>)
      e8:	2b00      	cmp	r3, #0
      ea:	d002      	beq.n	f2 <__do_global_dtors_aux+0x1a>
      ec:	4804      	ldr	r0, [pc, #16]	; (100 <__do_global_dtors_aux+0x28>)
      ee:	e000      	b.n	f2 <__do_global_dtors_aux+0x1a>
      f0:	bf00      	nop
      f2:	2301      	movs	r3, #1
      f4:	7023      	strb	r3, [r4, #0]
      f6:	bd10      	pop	{r4, pc}
      f8:	20000068 	.word	0x20000068
      fc:	00000000 	.word	0x00000000
     100:	0000280c 	.word	0x0000280c

00000104 <frame_dummy>:
     104:	4b09      	ldr	r3, [pc, #36]	; (12c <frame_dummy+0x28>)
     106:	b510      	push	{r4, lr}
     108:	2b00      	cmp	r3, #0
     10a:	d003      	beq.n	114 <frame_dummy+0x10>
     10c:	4908      	ldr	r1, [pc, #32]	; (130 <frame_dummy+0x2c>)
     10e:	4809      	ldr	r0, [pc, #36]	; (134 <frame_dummy+0x30>)
     110:	e000      	b.n	114 <frame_dummy+0x10>
     112:	bf00      	nop
     114:	4808      	ldr	r0, [pc, #32]	; (138 <frame_dummy+0x34>)
     116:	6803      	ldr	r3, [r0, #0]
     118:	2b00      	cmp	r3, #0
     11a:	d102      	bne.n	122 <frame_dummy+0x1e>
     11c:	f7ff ffc8 	bl	b0 <register_tm_clones>
     120:	bd10      	pop	{r4, pc}
     122:	4b06      	ldr	r3, [pc, #24]	; (13c <frame_dummy+0x38>)
     124:	2b00      	cmp	r3, #0
     126:	d0f9      	beq.n	11c <frame_dummy+0x18>
     128:	4798      	blx	r3
     12a:	e7f7      	b.n	11c <frame_dummy+0x18>
     12c:	00000000 	.word	0x00000000
     130:	2000006c 	.word	0x2000006c
     134:	0000280c 	.word	0x0000280c
     138:	0000280c 	.word	0x0000280c
     13c:	00000000 	.word	0x00000000

00000140 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
     140:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
     142:	780b      	ldrb	r3, [r1, #0]
{
     144:	b085      	sub	sp, #20
     146:	0016      	movs	r6, r2
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
     148:	065a      	lsls	r2, r3, #25
{
     14a:	9001      	str	r0, [sp, #4]
     14c:	000c      	movs	r4, r1
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
     14e:	0f92      	lsrs	r2, r2, #30
     150:	2a01      	cmp	r2, #1
     152:	d156      	bne.n	202 <cdcdf_acm_req+0xc2>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
     154:	7962      	ldrb	r2, [r4, #5]
     156:	7909      	ldrb	r1, [r1, #4]
     158:	0212      	lsls	r2, r2, #8
     15a:	430a      	orrs	r2, r1
     15c:	492d      	ldr	r1, [pc, #180]	; (214 <cdcdf_acm_req+0xd4>)
     15e:	7808      	ldrb	r0, [r1, #0]
     160:	000d      	movs	r5, r1
     162:	4290      	cmp	r0, r2
     164:	d002      	beq.n	16c <cdcdf_acm_req+0x2c>
     166:	7849      	ldrb	r1, [r1, #1]
     168:	4291      	cmp	r1, r2
     16a:	d14a      	bne.n	202 <cdcdf_acm_req+0xc2>
		if (req->bmRequestType & USB_EP_DIR_IN) {
     16c:	b25b      	sxtb	r3, r3
     16e:	2b00      	cmp	r3, #0
     170:	da0e      	bge.n	190 <cdcdf_acm_req+0x50>
		return ERR_NONE;
     172:	2000      	movs	r0, #0
	if (USB_DATA_STAGE == stage) {
     174:	2e01      	cmp	r6, #1
     176:	d04a      	beq.n	20e <cdcdf_acm_req+0xce>
	switch (req->bRequest) {
     178:	7863      	ldrb	r3, [r4, #1]
     17a:	2b21      	cmp	r3, #33	; 0x21
     17c:	d143      	bne.n	206 <cdcdf_acm_req+0xc6>
	uint16_t len = req->wLength;
     17e:	79e2      	ldrb	r2, [r4, #7]
     180:	79a3      	ldrb	r3, [r4, #6]
     182:	0212      	lsls	r2, r2, #8
		if (sizeof(struct usb_cdc_line_coding) != len) {
     184:	431a      	orrs	r2, r3
     186:	2a07      	cmp	r2, #7
     188:	d13f      	bne.n	20a <cdcdf_acm_req+0xca>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
     18a:	1da9      	adds	r1, r5, #6
     18c:	0003      	movs	r3, r0
     18e:	e013      	b.n	1b8 <cdcdf_acm_req+0x78>
	uint16_t                   len      = req->wLength;
     190:	79e3      	ldrb	r3, [r4, #7]
     192:	79a2      	ldrb	r2, [r4, #6]
     194:	021b      	lsls	r3, r3, #8
     196:	4313      	orrs	r3, r2
     198:	001f      	movs	r7, r3
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
     19a:	4b1f      	ldr	r3, [pc, #124]	; (218 <cdcdf_acm_req+0xd8>)
     19c:	4798      	blx	r3
	switch (req->bRequest) {
     19e:	7863      	ldrb	r3, [r4, #1]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
     1a0:	0001      	movs	r1, r0
	switch (req->bRequest) {
     1a2:	2b20      	cmp	r3, #32
     1a4:	d002      	beq.n	1ac <cdcdf_acm_req+0x6c>
     1a6:	2b22      	cmp	r3, #34	; 0x22
     1a8:	d01b      	beq.n	1e2 <cdcdf_acm_req+0xa2>
     1aa:	e02c      	b.n	206 <cdcdf_acm_req+0xc6>
		if (sizeof(struct usb_cdc_line_coding) != len) {
     1ac:	2f07      	cmp	r7, #7
     1ae:	d12c      	bne.n	20a <cdcdf_acm_req+0xca>
		if (USB_SETUP_STAGE == stage) {
     1b0:	2e00      	cmp	r6, #0
     1b2:	d105      	bne.n	1c0 <cdcdf_acm_req+0x80>
			return usbdc_xfer(ep, ctrl_buf, len, false);
     1b4:	0033      	movs	r3, r6
     1b6:	003a      	movs	r2, r7
     1b8:	9801      	ldr	r0, [sp, #4]
     1ba:	4c18      	ldr	r4, [pc, #96]	; (21c <cdcdf_acm_req+0xdc>)
     1bc:	47a0      	blx	r4
     1be:	e026      	b.n	20e <cdcdf_acm_req+0xce>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
     1c0:	003a      	movs	r2, r7
     1c2:	a802      	add	r0, sp, #8
     1c4:	4c16      	ldr	r4, [pc, #88]	; (220 <cdcdf_acm_req+0xe0>)
     1c6:	47a0      	blx	r4
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
     1c8:	692b      	ldr	r3, [r5, #16]
     1ca:	2b00      	cmp	r3, #0
     1cc:	d104      	bne.n	1d8 <cdcdf_acm_req+0x98>
				usbd_cdc_line_coding = line_coding_tmp;
     1ce:	1da8      	adds	r0, r5, #6
     1d0:	2207      	movs	r2, #7
     1d2:	a902      	add	r1, sp, #8
     1d4:	47a0      	blx	r4
     1d6:	e012      	b.n	1fe <cdcdf_acm_req+0xbe>
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
     1d8:	a802      	add	r0, sp, #8
     1da:	4798      	blx	r3
     1dc:	2800      	cmp	r0, #0
     1de:	d1f6      	bne.n	1ce <cdcdf_acm_req+0x8e>
     1e0:	e00d      	b.n	1fe <cdcdf_acm_req+0xbe>
		usbdc_xfer(0, NULL, 0, 0);
     1e2:	2300      	movs	r3, #0
     1e4:	4e0d      	ldr	r6, [pc, #52]	; (21c <cdcdf_acm_req+0xdc>)
     1e6:	001a      	movs	r2, r3
     1e8:	0019      	movs	r1, r3
     1ea:	0018      	movs	r0, r3
     1ec:	47b0      	blx	r6
		if (NULL != cdcdf_acm_notify_state) {
     1ee:	696a      	ldr	r2, [r5, #20]
     1f0:	2a00      	cmp	r2, #0
     1f2:	d004      	beq.n	1fe <cdcdf_acm_req+0xbe>
			cdcdf_acm_notify_state(req->wValue);
     1f4:	78e0      	ldrb	r0, [r4, #3]
     1f6:	78a3      	ldrb	r3, [r4, #2]
     1f8:	0200      	lsls	r0, r0, #8
     1fa:	4318      	orrs	r0, r3
     1fc:	4790      	blx	r2
		return ERR_NONE;
     1fe:	2000      	movs	r0, #0
     200:	e005      	b.n	20e <cdcdf_acm_req+0xce>
		return ERR_NOT_FOUND;
     202:	200a      	movs	r0, #10
     204:	e002      	b.n	20c <cdcdf_acm_req+0xcc>
		return ERR_INVALID_ARG;
     206:	200d      	movs	r0, #13
     208:	e000      	b.n	20c <cdcdf_acm_req+0xcc>
			return ERR_INVALID_DATA;
     20a:	2001      	movs	r0, #1
     20c:	4240      	negs	r0, r0
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
     20e:	b005      	add	sp, #20
     210:	bdf0      	pop	{r4, r5, r6, r7, pc}
     212:	46c0      	nop			; (mov r8, r8)
     214:	20000084 	.word	0x20000084
     218:	000024b9 	.word	0x000024b9
     21c:	0000207d 	.word	0x0000207d
     220:	00002625 	.word	0x00002625

00000224 <cdcdf_acm_ctrl>:
{
     224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     226:	0015      	movs	r5, r2
	switch (ctrl) {
     228:	2901      	cmp	r1, #1
     22a:	d04f      	beq.n	2cc <cdcdf_acm_ctrl+0xa8>
     22c:	2900      	cmp	r1, #0
     22e:	d004      	beq.n	23a <cdcdf_acm_ctrl+0x16>
		return ERR_UNSUPPORTED_OP;
     230:	201b      	movs	r0, #27
	switch (ctrl) {
     232:	2902      	cmp	r1, #2
     234:	d079      	beq.n	32a <cdcdf_acm_ctrl+0x106>
		return ERR_INVALID_ARG;
     236:	200d      	movs	r0, #13
     238:	e077      	b.n	32a <cdcdf_acm_ctrl+0x106>
     23a:	6883      	ldr	r3, [r0, #8]
	ifc = desc->sod;
     23c:	6810      	ldr	r0, [r2, #0]
     23e:	9300      	str	r3, [sp, #0]
     240:	001e      	movs	r6, r3
     242:	3302      	adds	r3, #2
     244:	9301      	str	r3, [sp, #4]
		if (NULL == ifc) {
     246:	2800      	cmp	r0, #0
     248:	d101      	bne.n	24e <cdcdf_acm_ctrl+0x2a>
			return ERR_NOT_FOUND;
     24a:	200a      	movs	r0, #10
     24c:	e06d      	b.n	32a <cdcdf_acm_ctrl+0x106>
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
     24e:	2108      	movs	r1, #8
     250:	7943      	ldrb	r3, [r0, #5]
		ifc_desc.bInterfaceNumber = ifc[2];
     252:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
     254:	438b      	bics	r3, r1
     256:	2b02      	cmp	r3, #2
     258:	d1f7      	bne.n	24a <cdcdf_acm_ctrl+0x26>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
     25a:	7833      	ldrb	r3, [r6, #0]
     25c:	429a      	cmp	r2, r3
     25e:	d05f      	beq.n	320 <cdcdf_acm_ctrl+0xfc>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
     260:	2bff      	cmp	r3, #255	; 0xff
     262:	d15f      	bne.n	324 <cdcdf_acm_ctrl+0x100>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
     264:	7032      	strb	r2, [r6, #0]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
     266:	6869      	ldr	r1, [r5, #4]
     268:	2205      	movs	r2, #5
     26a:	4b31      	ldr	r3, [pc, #196]	; (330 <cdcdf_acm_ctrl+0x10c>)
     26c:	4798      	blx	r3
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
     26e:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
     270:	d01c      	beq.n	2ac <cdcdf_acm_ctrl+0x88>
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
     272:	7962      	ldrb	r2, [r4, #5]
     274:	7923      	ldrb	r3, [r4, #4]
			ep_desc.bEndpointAddress = ep[2];
     276:	78a7      	ldrb	r7, [r4, #2]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
     278:	0212      	lsls	r2, r2, #8
     27a:	189a      	adds	r2, r3, r2
     27c:	b292      	uxth	r2, r2
     27e:	78e1      	ldrb	r1, [r4, #3]
     280:	0038      	movs	r0, r7
     282:	4b2c      	ldr	r3, [pc, #176]	; (334 <cdcdf_acm_ctrl+0x110>)
     284:	4798      	blx	r3
     286:	2800      	cmp	r0, #0
     288:	d14e      	bne.n	328 <cdcdf_acm_ctrl+0x104>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
     28a:	b27b      	sxtb	r3, r7
     28c:	4a2a      	ldr	r2, [pc, #168]	; (338 <cdcdf_acm_ctrl+0x114>)
     28e:	2b00      	cmp	r3, #0
     290:	da01      	bge.n	296 <cdcdf_acm_ctrl+0x72>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
     292:	70b7      	strb	r7, [r6, #2]
     294:	e001      	b.n	29a <cdcdf_acm_ctrl+0x76>
				func_data->func_ep_out = ep_desc.bEndpointAddress;
     296:	9b00      	ldr	r3, [sp, #0]
     298:	711f      	strb	r7, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
     29a:	0038      	movs	r0, r7
     29c:	4790      	blx	r2
			desc->sod = ep;
     29e:	602c      	str	r4, [r5, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
     2a0:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
     2a2:	6869      	ldr	r1, [r5, #4]
     2a4:	1820      	adds	r0, r4, r0
     2a6:	4b25      	ldr	r3, [pc, #148]	; (33c <cdcdf_acm_ctrl+0x118>)
     2a8:	4798      	blx	r3
     2aa:	e7e0      	b.n	26e <cdcdf_acm_ctrl+0x4a>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
     2ac:	682b      	ldr	r3, [r5, #0]
     2ae:	2204      	movs	r2, #4
     2b0:	7818      	ldrb	r0, [r3, #0]
     2b2:	6869      	ldr	r1, [r5, #4]
     2b4:	1818      	adds	r0, r3, r0
     2b6:	4b1e      	ldr	r3, [pc, #120]	; (330 <cdcdf_acm_ctrl+0x10c>)
     2b8:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
     2ba:	9b01      	ldr	r3, [sp, #4]
     2bc:	3601      	adds	r6, #1
     2be:	429e      	cmp	r6, r3
     2c0:	d1c1      	bne.n	246 <cdcdf_acm_ctrl+0x22>
	_cdcdf_acm_funcd.enabled = true;
     2c2:	2201      	movs	r2, #1
     2c4:	4b1e      	ldr	r3, [pc, #120]	; (340 <cdcdf_acm_ctrl+0x11c>)
	return ERR_NONE;
     2c6:	0020      	movs	r0, r4
	_cdcdf_acm_funcd.enabled = true;
     2c8:	715a      	strb	r2, [r3, #5]
     2ca:	e02f      	b.n	32c <cdcdf_acm_ctrl+0x108>
     2cc:	6884      	ldr	r4, [r0, #8]
	if (desc) {
     2ce:	2a00      	cmp	r2, #0
     2d0:	d005      	beq.n	2de <cdcdf_acm_ctrl+0xba>
		ifc_desc.bInterfaceClass = desc->sod[5];
     2d2:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
     2d4:	2208      	movs	r2, #8
     2d6:	795b      	ldrb	r3, [r3, #5]
     2d8:	4393      	bics	r3, r2
     2da:	2b02      	cmp	r3, #2
     2dc:	d1b5      	bne.n	24a <cdcdf_acm_ctrl+0x26>
		if (func_data->func_iface[i] == 0xFF) {
     2de:	7823      	ldrb	r3, [r4, #0]
     2e0:	2bff      	cmp	r3, #255	; 0xff
     2e2:	d007      	beq.n	2f4 <cdcdf_acm_ctrl+0xd0>
			func_data->func_iface[i] = 0xFF;
     2e4:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
     2e6:	78a0      	ldrb	r0, [r4, #2]
			func_data->func_iface[i] = 0xFF;
     2e8:	7025      	strb	r5, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
     2ea:	42a8      	cmp	r0, r5
     2ec:	d002      	beq.n	2f4 <cdcdf_acm_ctrl+0xd0>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
     2ee:	4b15      	ldr	r3, [pc, #84]	; (344 <cdcdf_acm_ctrl+0x120>)
     2f0:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
     2f2:	70a5      	strb	r5, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
     2f4:	7863      	ldrb	r3, [r4, #1]
     2f6:	2bff      	cmp	r3, #255	; 0xff
     2f8:	d007      	beq.n	30a <cdcdf_acm_ctrl+0xe6>
			func_data->func_iface[i] = 0xFF;
     2fa:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
     2fc:	78e0      	ldrb	r0, [r4, #3]
			func_data->func_iface[i] = 0xFF;
     2fe:	7065      	strb	r5, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
     300:	42a8      	cmp	r0, r5
     302:	d002      	beq.n	30a <cdcdf_acm_ctrl+0xe6>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
     304:	4b0f      	ldr	r3, [pc, #60]	; (344 <cdcdf_acm_ctrl+0x120>)
     306:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
     308:	70e5      	strb	r5, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
     30a:	7920      	ldrb	r0, [r4, #4]
     30c:	28ff      	cmp	r0, #255	; 0xff
     30e:	d003      	beq.n	318 <cdcdf_acm_ctrl+0xf4>
		usb_d_ep_deinit(func_data->func_ep_out);
     310:	4b0c      	ldr	r3, [pc, #48]	; (344 <cdcdf_acm_ctrl+0x120>)
     312:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
     314:	23ff      	movs	r3, #255	; 0xff
     316:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
     318:	2000      	movs	r0, #0
     31a:	4b09      	ldr	r3, [pc, #36]	; (340 <cdcdf_acm_ctrl+0x11c>)
     31c:	7158      	strb	r0, [r3, #5]
     31e:	e005      	b.n	32c <cdcdf_acm_ctrl+0x108>
				return ERR_ALREADY_INITIALIZED;
     320:	2012      	movs	r0, #18
     322:	e002      	b.n	32a <cdcdf_acm_ctrl+0x106>
				return ERR_NO_RESOURCE;
     324:	201c      	movs	r0, #28
     326:	e000      	b.n	32a <cdcdf_acm_ctrl+0x106>
				return ERR_NOT_INITIALIZED;
     328:	2014      	movs	r0, #20
     32a:	4240      	negs	r0, r0
}
     32c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     32e:	46c0      	nop			; (mov r8, r8)
     330:	000014f9 	.word	0x000014f9
     334:	00001805 	.word	0x00001805
     338:	00001895 	.word	0x00001895
     33c:	00001513 	.word	0x00001513
     340:	20000084 	.word	0x20000084
     344:	00001869 	.word	0x00001869

00000348 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
     348:	b510      	push	{r4, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
     34a:	4b0a      	ldr	r3, [pc, #40]	; (374 <cdcdf_acm_init+0x2c>)
     34c:	4798      	blx	r3
     34e:	2801      	cmp	r0, #1
     350:	d80c      	bhi.n	36c <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
     352:	4809      	ldr	r0, [pc, #36]	; (378 <cdcdf_acm_init+0x30>)
     354:	4b09      	ldr	r3, [pc, #36]	; (37c <cdcdf_acm_init+0x34>)
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
     356:	6200      	str	r0, [r0, #32]
	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
     358:	61c3      	str	r3, [r0, #28]

	usbdc_register_function(&_cdcdf_acm);
     35a:	3018      	adds	r0, #24
     35c:	4b08      	ldr	r3, [pc, #32]	; (380 <cdcdf_acm_init+0x38>)
     35e:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
     360:	2001      	movs	r0, #1
     362:	4908      	ldr	r1, [pc, #32]	; (384 <cdcdf_acm_init+0x3c>)
     364:	4b08      	ldr	r3, [pc, #32]	; (388 <cdcdf_acm_init+0x40>)
     366:	4798      	blx	r3
	return ERR_NONE;
     368:	2000      	movs	r0, #0
     36a:	e001      	b.n	370 <cdcdf_acm_init+0x28>
		return ERR_DENIED;
     36c:	2011      	movs	r0, #17
     36e:	4240      	negs	r0, r0
}
     370:	bd10      	pop	{r4, pc}
     372:	46c0      	nop			; (mov r8, r8)
     374:	000024c5 	.word	0x000024c5
     378:	20000084 	.word	0x20000084
     37c:	00000225 	.word	0x00000225
     380:	00002461 	.word	0x00002461
     384:	20000000 	.word	0x20000000
     388:	000023d5 	.word	0x000023d5

0000038c <spi_m_sync_init>:

static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length);
static int32_t _spi_m_sync_io_read(struct io_descriptor *const io, uint8_t *const buf, const uint16_t length);

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     38c:	b570      	push	{r4, r5, r6, lr}
     38e:	0004      	movs	r4, r0
     390:	000d      	movs	r5, r1
	int32_t rc = 0;

	ASSERT(spi && hw);
     392:	2800      	cmp	r0, #0
     394:	d002      	beq.n	39c <spi_m_sync_init+0x10>
     396:	0008      	movs	r0, r1
     398:	1e43      	subs	r3, r0, #1
     39a:	4198      	sbcs	r0, r3
     39c:	2301      	movs	r3, #1
     39e:	2242      	movs	r2, #66	; 0x42
     3a0:	4018      	ands	r0, r3
     3a2:	4909      	ldr	r1, [pc, #36]	; (3c8 <spi_m_sync_init+0x3c>)
     3a4:	4b09      	ldr	r3, [pc, #36]	; (3cc <spi_m_sync_init+0x40>)
     3a6:	4798      	blx	r3

	spi->dev.prvt = (void *)hw;

	rc = _spi_m_sync_init(&spi->dev, hw);
     3a8:	4b09      	ldr	r3, [pc, #36]	; (3d0 <spi_m_sync_init+0x44>)
	spi->dev.prvt = (void *)hw;
     3aa:	6025      	str	r5, [r4, #0]
	rc = _spi_m_sync_init(&spi->dev, hw);
     3ac:	0029      	movs	r1, r5
     3ae:	0020      	movs	r0, r4
     3b0:	4798      	blx	r3
     3b2:	1e03      	subs	r3, r0, #0
	if (rc < 0) {
     3b4:	db06      	blt.n	3c4 <spi_m_sync_init+0x38>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     3b6:	4b07      	ldr	r3, [pc, #28]	; (3d4 <spi_m_sync_init+0x48>)
     3b8:	8223      	strh	r3, [r4, #16]
	spi->io.read  = _spi_m_sync_io_read;
     3ba:	4b07      	ldr	r3, [pc, #28]	; (3d8 <spi_m_sync_init+0x4c>)
     3bc:	60e3      	str	r3, [r4, #12]
	spi->io.write = _spi_m_sync_io_write;
     3be:	4b07      	ldr	r3, [pc, #28]	; (3dc <spi_m_sync_init+0x50>)
     3c0:	60a3      	str	r3, [r4, #8]

	return ERR_NONE;
     3c2:	2300      	movs	r3, #0
}
     3c4:	0018      	movs	r0, r3
     3c6:	bd70      	pop	{r4, r5, r6, pc}
     3c8:	0000272c 	.word	0x0000272c
     3cc:	0000139d 	.word	0x0000139d
     3d0:	00001c71 	.word	0x00001c71
     3d4:	ffff8000 	.word	0xffff8000
     3d8:	0000045d 	.word	0x0000045d
     3dc:	00000425 	.word	0x00000425

000003e0 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     3e0:	b530      	push	{r4, r5, lr}
     3e2:	0005      	movs	r5, r0
     3e4:	b087      	sub	sp, #28
     3e6:	000c      	movs	r4, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     3e8:	2800      	cmp	r0, #0
     3ea:	d002      	beq.n	3f2 <spi_m_sync_transfer+0x12>
     3ec:	0008      	movs	r0, r1
     3ee:	1e43      	subs	r3, r0, #1
     3f0:	4198      	sbcs	r0, r3
     3f2:	2301      	movs	r3, #1
     3f4:	22bd      	movs	r2, #189	; 0xbd
     3f6:	4018      	ands	r0, r3
     3f8:	4907      	ldr	r1, [pc, #28]	; (418 <STACK_SIZE+0x18>)
     3fa:	4b08      	ldr	r3, [pc, #32]	; (41c <STACK_SIZE+0x1c>)
     3fc:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     3fe:	6823      	ldr	r3, [r4, #0]
	msg.rxbuf = p_xfer->rxbuf;
	msg.size  = p_xfer->size;

	return _spi_m_sync_trans(&spi->dev, &msg);
     400:	a903      	add	r1, sp, #12
	msg.txbuf = p_xfer->txbuf;
     402:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
     404:	6863      	ldr	r3, [r4, #4]
	return _spi_m_sync_trans(&spi->dev, &msg);
     406:	0028      	movs	r0, r5
	msg.rxbuf = p_xfer->rxbuf;
     408:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
     40a:	68a3      	ldr	r3, [r4, #8]
     40c:	9301      	str	r3, [sp, #4]
     40e:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
     410:	4b03      	ldr	r3, [pc, #12]	; (420 <STACK_SIZE+0x20>)
     412:	4798      	blx	r3
}
     414:	b007      	add	sp, #28
     416:	bd30      	pop	{r4, r5, pc}
     418:	0000272c 	.word	0x0000272c
     41c:	0000139d 	.word	0x0000139d
     420:	00001e05 	.word	0x00001e05

00000424 <_spi_m_sync_io_write>:
{
     424:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
     426:	0004      	movs	r4, r0
	ASSERT(io);
     428:	1e43      	subs	r3, r0, #1
     42a:	4198      	sbcs	r0, r3
{
     42c:	000e      	movs	r6, r1
     42e:	0015      	movs	r5, r2
	ASSERT(io);
     430:	b2c0      	uxtb	r0, r0
     432:	22ad      	movs	r2, #173	; 0xad
     434:	4906      	ldr	r1, [pc, #24]	; (450 <_spi_m_sync_io_write+0x2c>)
     436:	4b07      	ldr	r3, [pc, #28]	; (454 <_spi_m_sync_io_write+0x30>)
     438:	4798      	blx	r3
	xfer.rxbuf = 0;
     43a:	2300      	movs	r3, #0
	return spi_m_sync_transfer(spi, &xfer);
     43c:	0020      	movs	r0, r4
	xfer.rxbuf = 0;
     43e:	9302      	str	r3, [sp, #8]
	return spi_m_sync_transfer(spi, &xfer);
     440:	a901      	add	r1, sp, #4
     442:	4b05      	ldr	r3, [pc, #20]	; (458 <_spi_m_sync_io_write+0x34>)
     444:	3808      	subs	r0, #8
	xfer.txbuf = (uint8_t *)buf;
     446:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     448:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     44a:	4798      	blx	r3
}
     44c:	b004      	add	sp, #16
     44e:	bd70      	pop	{r4, r5, r6, pc}
     450:	0000272c 	.word	0x0000272c
     454:	0000139d 	.word	0x0000139d
     458:	000003e1 	.word	0x000003e1

0000045c <_spi_m_sync_io_read>:
{
     45c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
     45e:	0004      	movs	r4, r0
	ASSERT(io);
     460:	1e43      	subs	r3, r0, #1
     462:	4198      	sbcs	r0, r3
{
     464:	000e      	movs	r6, r1
     466:	0015      	movs	r5, r2
	ASSERT(io);
     468:	b2c0      	uxtb	r0, r0
     46a:	2291      	movs	r2, #145	; 0x91
     46c:	4906      	ldr	r1, [pc, #24]	; (488 <_spi_m_sync_io_read+0x2c>)
     46e:	4b07      	ldr	r3, [pc, #28]	; (48c <_spi_m_sync_io_read+0x30>)
     470:	4798      	blx	r3
	xfer.txbuf = 0;
     472:	2300      	movs	r3, #0
	return spi_m_sync_transfer(spi, &xfer);
     474:	0020      	movs	r0, r4
	xfer.txbuf = 0;
     476:	9301      	str	r3, [sp, #4]
	return spi_m_sync_transfer(spi, &xfer);
     478:	a901      	add	r1, sp, #4
     47a:	4b05      	ldr	r3, [pc, #20]	; (490 <_spi_m_sync_io_read+0x34>)
     47c:	3808      	subs	r0, #8
	xfer.rxbuf = buf;
     47e:	9602      	str	r6, [sp, #8]
	xfer.size  = length;
     480:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     482:	4798      	blx	r3
}
     484:	b004      	add	sp, #16
     486:	bd70      	pop	{r4, r5, r6, pc}
     488:	0000272c 	.word	0x0000272c
     48c:	0000139d 	.word	0x0000139d
     490:	000003e1 	.word	0x000003e1

00000494 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
     494:	2000      	movs	r0, #0
     496:	4770      	bx	lr

00000498 <_usb_d_dev_wait_dfll_rdy>:
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
#define DFLL_READY_FLAG (SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC)
	/* In USB recovery mode the status is not checked */
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
     498:	4b07      	ldr	r3, [pc, #28]	; (4b8 <_usb_d_dev_wait_dfll_rdy+0x20>)
     49a:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
     49c:	0692      	lsls	r2, r2, #26
     49e:	d405      	bmi.n	4ac <_usb_d_dev_wait_dfll_rdy+0x14>
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
     4a0:	21d0      	movs	r1, #208	; 0xd0
}

static inline hri_sysctrl_pclksr_reg_t hri_sysctrl_get_PCLKSR_reg(const void *const hw, hri_sysctrl_pclksr_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
     4a2:	68da      	ldr	r2, [r3, #12]
     4a4:	400a      	ands	r2, r1
     4a6:	2ad0      	cmp	r2, #208	; 0xd0
     4a8:	d1fb      	bne.n	4a2 <_usb_d_dev_wait_dfll_rdy+0xa>
     4aa:	e003      	b.n	4b4 <_usb_d_dev_wait_dfll_rdy+0x1c>
			;
	} else {
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
     4ac:	2210      	movs	r2, #16
     4ae:	68d9      	ldr	r1, [r3, #12]
     4b0:	4211      	tst	r1, r2
     4b2:	d0fc      	beq.n	4ae <_usb_d_dev_wait_dfll_rdy+0x16>
			;
	}
}
     4b4:	4770      	bx	lr
     4b6:	46c0      	nop			; (mov r8, r8)
     4b8:	40000800 	.word	0x40000800

000004bc <_usb_d_dev_ept>:
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
     4bc:	2800      	cmp	r0, #0
     4be:	d003      	beq.n	4c8 <_usb_d_dev_ept+0xc>
     4c0:	2900      	cmp	r1, #0
     4c2:	d001      	beq.n	4c8 <_usb_d_dev_ept+0xc>
     4c4:	3002      	adds	r0, #2
     4c6:	b2c0      	uxtb	r0, r0
	return &dev_inst.ep[ep_index];
     4c8:	2314      	movs	r3, #20
     4ca:	4358      	muls	r0, r3
     4cc:	4b01      	ldr	r3, [pc, #4]	; (4d4 <_usb_d_dev_ept+0x18>)
     4ce:	1818      	adds	r0, r3, r0
     4d0:	3014      	adds	r0, #20
}
     4d2:	4770      	bx	lr
     4d4:	200000a8 	.word	0x200000a8

000004d8 <_usb_d_dev_handle_setup>:
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
	uint8_t epn     = USB_EP_GET_N(ept->ep);
     4d8:	230f      	movs	r3, #15
{
     4da:	b570      	push	{r4, r5, r6, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
     4dc:	7c82      	ldrb	r2, [r0, #18]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);

	if (!is_ctrl) {
     4de:	2407      	movs	r4, #7
	uint8_t epn     = USB_EP_GET_N(ept->ep);
     4e0:	4013      	ands	r3, r2
     4e2:	001a      	movs	r2, r3
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
     4e4:	7cc1      	ldrb	r1, [r0, #19]
     4e6:	3208      	adds	r2, #8
	if (!is_ctrl) {
     4e8:	400c      	ands	r4, r1
     4ea:	015b      	lsls	r3, r3, #5
     4ec:	2c01      	cmp	r4, #1
     4ee:	d008      	beq.n	502 <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     4f0:	4914      	ldr	r1, [pc, #80]	; (544 <_usb_d_dev_handle_setup+0x6c>)
     4f2:	0152      	lsls	r2, r2, #5
     4f4:	1852      	adds	r2, r2, r1
     4f6:	2110      	movs	r1, #16
     4f8:	71d1      	strb	r1, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
     4fa:	4a13      	ldr	r2, [pc, #76]	; (548 <_usb_d_dev_handle_setup+0x70>)
     4fc:	189b      	adds	r3, r3, r2
     4fe:	7259      	strb	r1, [r3, #9]
     500:	e01f      	b.n	542 <_usb_d_dev_handle_setup+0x6a>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
     502:	2440      	movs	r4, #64	; 0x40
     504:	4221      	tst	r1, r4
     506:	d006      	beq.n	516 <_usb_d_dev_handle_setup+0x3e>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
     508:	2580      	movs	r5, #128	; 0x80
		ept->flags.bits.is_busy = 0;
     50a:	43a1      	bics	r1, r4
     50c:	74c1      	strb	r1, [r0, #19]
     50e:	490e      	ldr	r1, [pc, #56]	; (548 <_usb_d_dev_handle_setup+0x70>)
     510:	1859      	adds	r1, r3, r1
     512:	714d      	strb	r5, [r1, #5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
     514:	718c      	strb	r4, [r1, #6]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
     516:	2408      	movs	r4, #8
     518:	7cc1      	ldrb	r1, [r0, #19]
	bank->STATUS_BK.reg     = 0;
     51a:	2500      	movs	r5, #0
	ept->flags.bits.is_stalled = 0;
     51c:	43a1      	bics	r1, r4
	bank->STATUS_BK.reg     = 0;
     51e:	4c0b      	ldr	r4, [pc, #44]	; (54c <_usb_d_dev_handle_setup+0x74>)
	ept->flags.bits.is_stalled = 0;
     520:	74c1      	strb	r1, [r0, #19]
	bank->STATUS_BK.reg     = 0;
     522:	0021      	movs	r1, r4
     524:	3150      	adds	r1, #80	; 0x50
     526:	18c9      	adds	r1, r1, r3
     528:	728d      	strb	r5, [r1, #10]
     52a:	768d      	strb	r5, [r1, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     52c:	4905      	ldr	r1, [pc, #20]	; (544 <_usb_d_dev_handle_setup+0x6c>)
     52e:	0152      	lsls	r2, r2, #5
     530:	1852      	adds	r2, r2, r1
     532:	216f      	movs	r1, #111	; 0x6f
     534:	71d1      	strb	r1, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     536:	4a04      	ldr	r2, [pc, #16]	; (548 <_usb_d_dev_handle_setup+0x70>)
     538:	189b      	adds	r3, r3, r2
     53a:	7259      	strb	r1, [r3, #9]
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
     53c:	7c80      	ldrb	r0, [r0, #18]
     53e:	68a3      	ldr	r3, [r4, #8]
     540:	4798      	blx	r3
}
     542:	bd70      	pop	{r4, r5, r6, pc}
     544:	41005000 	.word	0x41005000
     548:	410050ff 	.word	0x410050ff
     54c:	200000a8 	.word	0x200000a8

00000550 <_usb_d_dev_handle_stall>:
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
     550:	2220      	movs	r2, #32
     552:	230f      	movs	r3, #15
     554:	408a      	lsls	r2, r1
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
     556:	b510      	push	{r4, lr}
     558:	7c81      	ldrb	r1, [r0, #18]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
     55a:	b2d2      	uxtb	r2, r2
     55c:	400b      	ands	r3, r1
     55e:	4906      	ldr	r1, [pc, #24]	; (578 <_usb_d_dev_handle_stall+0x28>)
     560:	015b      	lsls	r3, r3, #5
     562:	185b      	adds	r3, r3, r1
     564:	725a      	strb	r2, [r3, #9]
	uint8_t epn = USB_EP_GET_N(ept->ep);
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
     566:	7c84      	ldrb	r4, [r0, #18]
     568:	4b04      	ldr	r3, [pc, #16]	; (57c <_usb_d_dev_handle_stall+0x2c>)
     56a:	6882      	ldr	r2, [r0, #8]
     56c:	691b      	ldr	r3, [r3, #16]
     56e:	2101      	movs	r1, #1
     570:	0020      	movs	r0, r4
     572:	4798      	blx	r3
}
     574:	bd10      	pop	{r4, pc}
     576:	46c0      	nop			; (mov r8, r8)
     578:	410050ff 	.word	0x410050ff
     57c:	200000a8 	.word	0x200000a8

00000580 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
     580:	b510      	push	{r4, lr}
     582:	0003      	movs	r3, r0
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
     584:	7c80      	ldrb	r0, [r0, #18]
     586:	28ff      	cmp	r0, #255	; 0xff
     588:	d009      	beq.n	59e <_usb_d_dev_trans_done+0x1e>
     58a:	2440      	movs	r4, #64	; 0x40
     58c:	7cda      	ldrb	r2, [r3, #19]
     58e:	4222      	tst	r2, r4
     590:	d005      	beq.n	59e <_usb_d_dev_trans_done+0x1e>
		return;
	}
	ept->flags.bits.is_busy = 0;
     592:	43a2      	bics	r2, r4
     594:	74da      	strb	r2, [r3, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
     596:	4a02      	ldr	r2, [pc, #8]	; (5a0 <_usb_d_dev_trans_done+0x20>)
     598:	6914      	ldr	r4, [r2, #16]
     59a:	689a      	ldr	r2, [r3, #8]
     59c:	47a0      	blx	r4
}
     59e:	bd10      	pop	{r4, pc}
     5a0:	200000a8 	.word	0x200000a8

000005a4 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
     5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
     5a6:	b085      	sub	sp, #20
     5a8:	9201      	str	r2, [sp, #4]
	uint8_t epn = USB_EP_GET_N(ept->ep);
     5aa:	7c87      	ldrb	r7, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
     5ac:	ae03      	add	r6, sp, #12
{
     5ae:	0004      	movs	r4, r0
     5b0:	000d      	movs	r5, r1
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
     5b2:	2202      	movs	r2, #2
     5b4:	4913      	ldr	r1, [pc, #76]	; (604 <_usb_d_dev_trans_stop+0x60>)
     5b6:	0030      	movs	r0, r6
     5b8:	4b13      	ldr	r3, [pc, #76]	; (608 <_usb_d_dev_trans_stop+0x64>)
     5ba:	4798      	blx	r3
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
     5bc:	2fff      	cmp	r7, #255	; 0xff
     5be:	d01f      	beq.n	600 <_usb_d_dev_trans_stop+0x5c>
     5c0:	2140      	movs	r1, #64	; 0x40
     5c2:	7ce3      	ldrb	r3, [r4, #19]
     5c4:	420b      	tst	r3, r1
     5c6:	d01b      	beq.n	600 <_usb_d_dev_trans_stop+0x5c>
	uint8_t epn = USB_EP_GET_N(ept->ep);
     5c8:	230f      	movs	r3, #15
     5ca:	401f      	ands	r7, r3
     5cc:	003b      	movs	r3, r7
     5ce:	3308      	adds	r3, #8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
     5d0:	015a      	lsls	r2, r3, #5
		return;
	}
	/* Stop transfer */
	if (dir) {
     5d2:	2d00      	cmp	r5, #0
     5d4:	d004      	beq.n	5e0 <_usb_d_dev_trans_stop+0x3c>
     5d6:	490d      	ldr	r1, [pc, #52]	; (60c <_usb_d_dev_trans_stop+0x68>)
     5d8:	1852      	adds	r2, r2, r1
     5da:	2180      	movs	r1, #128	; 0x80
     5dc:	7111      	strb	r1, [r2, #4]
     5de:	e002      	b.n	5e6 <_usb_d_dev_trans_stop+0x42>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
     5e0:	480a      	ldr	r0, [pc, #40]	; (60c <_usb_d_dev_trans_stop+0x68>)
     5e2:	1812      	adds	r2, r2, r0
     5e4:	7151      	strb	r1, [r2, #5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     5e6:	4909      	ldr	r1, [pc, #36]	; (60c <_usb_d_dev_trans_stop+0x68>)
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
     5e8:	5d72      	ldrb	r2, [r6, r5]
     5ea:	015b      	lsls	r3, r3, #5
     5ec:	185b      	adds	r3, r3, r1
     5ee:	71da      	strb	r2, [r3, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     5f0:	4b07      	ldr	r3, [pc, #28]	; (610 <_usb_d_dev_trans_stop+0x6c>)
     5f2:	017f      	lsls	r7, r7, #5
     5f4:	18ff      	adds	r7, r7, r3
     5f6:	727a      	strb	r2, [r7, #9]
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
     5f8:	9901      	ldr	r1, [sp, #4]
     5fa:	0020      	movs	r0, r4
     5fc:	4b05      	ldr	r3, [pc, #20]	; (614 <_usb_d_dev_trans_stop+0x70>)
     5fe:	4798      	blx	r3
}
     600:	b005      	add	sp, #20
     602:	bdf0      	pop	{r4, r5, r6, r7, pc}
     604:	00002748 	.word	0x00002748
     608:	00002625 	.word	0x00002625
     60c:	41005000 	.word	0x41005000
     610:	410050ff 	.word	0x410050ff
     614:	00000581 	.word	0x00000581

00000618 <_usb_d_dev_handle_trfail>:
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
     618:	2202      	movs	r2, #2
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
     61a:	230f      	movs	r3, #15
{
     61c:	b5f0      	push	{r4, r5, r6, r7, lr}
     61e:	000c      	movs	r4, r1
     620:	b085      	sub	sp, #20
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
     622:	7c85      	ldrb	r5, [r0, #18]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
     624:	4937      	ldr	r1, [pc, #220]	; (704 <_usb_d_dev_handle_trfail+0xec>)
     626:	af03      	add	r7, sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
     628:	401d      	ands	r5, r3
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
     62a:	1889      	adds	r1, r1, r2
     62c:	4b36      	ldr	r3, [pc, #216]	; (708 <_usb_d_dev_handle_trfail+0xf0>)
{
     62e:	0006      	movs	r6, r0
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
     630:	0038      	movs	r0, r7
     632:	4798      	blx	r3
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
     634:	4a35      	ldr	r2, [pc, #212]	; (70c <_usb_d_dev_handle_trfail+0xf4>)
     636:	0168      	lsls	r0, r5, #5
     638:	0013      	movs	r3, r2
     63a:	9201      	str	r2, [sp, #4]
     63c:	002a      	movs	r2, r5
     63e:	3350      	adds	r3, #80	; 0x50
     640:	3208      	adds	r2, #8
     642:	181b      	adds	r3, r3, r0
     644:	4932      	ldr	r1, [pc, #200]	; (710 <_usb_d_dev_handle_trfail+0xf8>)

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
     646:	0152      	lsls	r2, r2, #5
	uint8_t            eptype
     648:	2c00      	cmp	r4, #0
     64a:	d003      	beq.n	654 <_usb_d_dev_handle_trfail+0x3c>
     64c:	5c8a      	ldrb	r2, [r1, r2]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
     64e:	0652      	lsls	r2, r2, #25
     650:	0f52      	lsrs	r2, r2, #29
     652:	e002      	b.n	65a <_usb_d_dev_handle_trfail+0x42>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
     654:	5c89      	ldrb	r1, [r1, r2]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
     656:	2207      	movs	r2, #7
     658:	400a      	ands	r2, r1
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
     65a:	7cf1      	ldrb	r1, [r6, #19]
     65c:	9100      	str	r1, [sp, #0]
	st.reg = bank[bank_n].STATUS_BK.reg;
     65e:	0121      	lsls	r1, r4, #4
     660:	185b      	adds	r3, r3, r1
     662:	7a99      	ldrb	r1, [r3, #10]
     664:	469c      	mov	ip, r3
     666:	002b      	movs	r3, r5
     668:	b2c9      	uxtb	r1, r1
     66a:	3308      	adds	r3, #8
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
     66c:	2a02      	cmp	r2, #2
     66e:	d115      	bne.n	69c <_usb_d_dev_handle_trfail+0x84>
     670:	3a01      	subs	r2, #1
     672:	4211      	tst	r1, r2
     674:	d012      	beq.n	69c <_usb_d_dev_handle_trfail+0x84>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
     676:	4661      	mov	r1, ip
     678:	7a89      	ldrb	r1, [r1, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     67a:	015b      	lsls	r3, r3, #5
     67c:	4391      	bics	r1, r2
     67e:	000a      	movs	r2, r1
     680:	4661      	mov	r1, ip
     682:	728a      	strb	r2, [r1, #10]
     684:	4922      	ldr	r1, [pc, #136]	; (710 <_usb_d_dev_handle_trfail+0xf8>)
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
     686:	5d3a      	ldrb	r2, [r7, r4]
     688:	185b      	adds	r3, r3, r1
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
     68a:	1e61      	subs	r1, r4, #1
     68c:	418c      	sbcs	r4, r1
     68e:	71da      	strb	r2, [r3, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     690:	4b20      	ldr	r3, [pc, #128]	; (714 <_usb_d_dev_handle_trfail+0xfc>)
     692:	b2e1      	uxtb	r1, r4
     694:	18c0      	adds	r0, r0, r3
     696:	7242      	strb	r2, [r0, #9]
     698:	2204      	movs	r2, #4
     69a:	e01c      	b.n	6d6 <_usb_d_dev_handle_trfail+0xbe>
	} else if (st.bit.ERRORFLOW) {
     69c:	2202      	movs	r2, #2
     69e:	4011      	ands	r1, r2
     6a0:	d01d      	beq.n	6de <_usb_d_dev_handle_trfail+0xc6>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
     6a2:	4661      	mov	r1, ip
     6a4:	7a89      	ldrb	r1, [r1, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     6a6:	015b      	lsls	r3, r3, #5
     6a8:	4391      	bics	r1, r2
     6aa:	000a      	movs	r2, r1
     6ac:	4661      	mov	r1, ip
     6ae:	728a      	strb	r2, [r1, #10]
     6b0:	4917      	ldr	r1, [pc, #92]	; (710 <_usb_d_dev_handle_trfail+0xf8>)
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
     6b2:	5d3a      	ldrb	r2, [r7, r4]
     6b4:	185b      	adds	r3, r3, r1
     6b6:	71da      	strb	r2, [r3, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     6b8:	4b16      	ldr	r3, [pc, #88]	; (714 <_usb_d_dev_handle_trfail+0xfc>)
     6ba:	18c0      	adds	r0, r0, r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
     6bc:	2307      	movs	r3, #7
     6be:	7242      	strb	r2, [r0, #9]
     6c0:	9a00      	ldr	r2, [sp, #0]
     6c2:	401a      	ands	r2, r3
     6c4:	2a01      	cmp	r2, #1
     6c6:	d11a      	bne.n	6fe <_usb_d_dev_handle_trfail+0xe6>
     6c8:	7cf1      	ldrb	r1, [r6, #19]
     6ca:	064b      	lsls	r3, r1, #25
     6cc:	d517      	bpl.n	6fe <_usb_d_dev_handle_trfail+0xe6>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
     6ce:	09c9      	lsrs	r1, r1, #7
     6d0:	428c      	cmp	r4, r1
     6d2:	d014      	beq.n	6fe <_usb_d_dev_handle_trfail+0xe6>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
     6d4:	2200      	movs	r2, #0
     6d6:	0030      	movs	r0, r6
     6d8:	4b0f      	ldr	r3, [pc, #60]	; (718 <_usb_d_dev_handle_trfail+0x100>)
     6da:	4798      	blx	r3
     6dc:	e00f      	b.n	6fe <_usb_d_dev_handle_trfail+0xe6>
	bank->STATUS_BK.reg     = 0;
     6de:	9801      	ldr	r0, [sp, #4]
     6e0:	006a      	lsls	r2, r5, #1
     6e2:	1912      	adds	r2, r2, r4
     6e4:	3050      	adds	r0, #80	; 0x50
     6e6:	0112      	lsls	r2, r2, #4
     6e8:	1882      	adds	r2, r0, r2
     6ea:	7291      	strb	r1, [r2, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     6ec:	4908      	ldr	r1, [pc, #32]	; (710 <_usb_d_dev_handle_trfail+0xf8>)
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
     6ee:	5d3a      	ldrb	r2, [r7, r4]
     6f0:	015b      	lsls	r3, r3, #5
     6f2:	185b      	adds	r3, r3, r1
     6f4:	71da      	strb	r2, [r3, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     6f6:	4b07      	ldr	r3, [pc, #28]	; (714 <_usb_d_dev_handle_trfail+0xfc>)
     6f8:	016d      	lsls	r5, r5, #5
     6fa:	18ed      	adds	r5, r5, r3
     6fc:	726a      	strb	r2, [r5, #9]
}
     6fe:	b005      	add	sp, #20
     700:	bdf0      	pop	{r4, r5, r6, r7, pc}
     702:	46c0      	nop			; (mov r8, r8)
     704:	00002748 	.word	0x00002748
     708:	00002625 	.word	0x00002625
     70c:	200000a8 	.word	0x200000a8
     710:	41005000 	.word	0x41005000
     714:	410050ff 	.word	0x410050ff
     718:	000005a5 	.word	0x000005a5

0000071c <_usb_d_dev_reset_epts>:
{
     71c:	480b      	ldr	r0, [pc, #44]	; (74c <_usb_d_dev_reset_epts+0x30>)
     71e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     720:	0005      	movs	r5, r0
     722:	0006      	movs	r6, r0
     724:	0004      	movs	r4, r0
		dev_inst.ep[i].ep       = 0xFF;
     726:	27ff      	movs	r7, #255	; 0xff
     728:	3514      	adds	r5, #20
     72a:	3650      	adds	r6, #80	; 0x50
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
     72c:	2103      	movs	r1, #3
     72e:	0028      	movs	r0, r5
     730:	4b07      	ldr	r3, [pc, #28]	; (750 <_usb_d_dev_reset_epts+0x34>)
     732:	4798      	blx	r3
		dev_inst.ep[i].flags.u8 = 0;
     734:	2100      	movs	r1, #0
		dev_inst.ep[i].ep       = 0xFF;
     736:	74af      	strb	r7, [r5, #18]
		dev_inst.ep[i].flags.u8 = 0;
     738:	74e9      	strb	r1, [r5, #19]
     73a:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
     73c:	42b5      	cmp	r5, r6
     73e:	d1f5      	bne.n	72c <_usb_d_dev_reset_epts+0x10>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
     740:	0020      	movs	r0, r4
     742:	2260      	movs	r2, #96	; 0x60
     744:	4b03      	ldr	r3, [pc, #12]	; (754 <_usb_d_dev_reset_epts+0x38>)
     746:	3050      	adds	r0, #80	; 0x50
     748:	4798      	blx	r3
}
     74a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     74c:	200000a8 	.word	0x200000a8
     750:	00000581 	.word	0x00000581
     754:	000026a1 	.word	0x000026a1

00000758 <_usb_d_dev_in_next>:
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
     758:	230f      	movs	r3, #15
{
     75a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
     75c:	2200      	movs	r2, #0
{
     75e:	9100      	str	r1, [sp, #0]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
     760:	7c86      	ldrb	r6, [r0, #18]
{
     762:	0004      	movs	r4, r0
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
     764:	401e      	ands	r6, r3
     766:	0177      	lsls	r7, r6, #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
     768:	4291      	cmp	r1, r2
     76a:	d005      	beq.n	778 <_usb_d_dev_in_next+0x20>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
     76c:	4b47      	ldr	r3, [pc, #284]	; (88c <_usb_d_dev_in_next+0x134>)
     76e:	3350      	adds	r3, #80	; 0x50
     770:	19db      	adds	r3, r3, r7
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
     772:	695a      	ldr	r2, [r3, #20]
     774:	0492      	lsls	r2, r2, #18
     776:	0c92      	lsrs	r2, r2, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
     778:	8a23      	ldrh	r3, [r4, #16]
     77a:	4945      	ldr	r1, [pc, #276]	; (890 <_usb_d_dev_in_next+0x138>)
     77c:	001d      	movs	r5, r3
     77e:	428b      	cmp	r3, r1
     780:	d001      	beq.n	786 <_usb_d_dev_in_next+0x2e>
     782:	3b01      	subs	r3, #1
     784:	b21d      	sxth	r5, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
     786:	2307      	movs	r3, #7
     788:	7ce1      	ldrb	r1, [r4, #19]
     78a:	4019      	ands	r1, r3
	if (isr) {
     78c:	9b00      	ldr	r3, [sp, #0]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
     78e:	9101      	str	r1, [sp, #4]
	if (isr) {
     790:	2b00      	cmp	r3, #0
     792:	d004      	beq.n	79e <_usb_d_dev_in_next+0x46>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     794:	493f      	ldr	r1, [pc, #252]	; (894 <_usb_d_dev_in_next+0x13c>)
     796:	0173      	lsls	r3, r6, #5
     798:	185b      	adds	r3, r3, r1
     79a:	2102      	movs	r1, #2
     79c:	71d9      	strb	r1, [r3, #7]
	ept->trans_count += trans_count;
     79e:	68a3      	ldr	r3, [r4, #8]
     7a0:	7ce0      	ldrb	r0, [r4, #19]
     7a2:	18d1      	adds	r1, r2, r3
	if (ept->trans_count < ept->trans_size) {
     7a4:	6863      	ldr	r3, [r4, #4]
	ept->trans_count += trans_count;
     7a6:	60a1      	str	r1, [r4, #8]
	if (ept->trans_count < ept->trans_size) {
     7a8:	4299      	cmp	r1, r3
     7aa:	d22b      	bcs.n	804 <_usb_d_dev_in_next+0xac>
		trans_next = ept->trans_size - ept->trans_count;
     7ac:	1a5b      	subs	r3, r3, r1
     7ae:	b29b      	uxth	r3, r3
		if (ept->flags.bits.use_cache) {
     7b0:	0682      	lsls	r2, r0, #26
     7b2:	d511      	bpl.n	7d8 <_usb_d_dev_in_next+0x80>
			if (trans_next > ept->size) {
     7b4:	8a22      	ldrh	r2, [r4, #16]
     7b6:	1c1d      	adds	r5, r3, #0
     7b8:	4293      	cmp	r3, r2
     7ba:	d900      	bls.n	7be <_usb_d_dev_in_next+0x66>
     7bc:	1c15      	adds	r5, r2, #0
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
     7be:	6823      	ldr	r3, [r4, #0]
     7c0:	b2ad      	uxth	r5, r5
     7c2:	1859      	adds	r1, r3, r1
     7c4:	002a      	movs	r2, r5
     7c6:	4b34      	ldr	r3, [pc, #208]	; (898 <_usb_d_dev_in_next+0x140>)
     7c8:	68e0      	ldr	r0, [r4, #12]
     7ca:	4798      	blx	r3
	bank->ADDR.reg          = addr;
     7cc:	492f      	ldr	r1, [pc, #188]	; (88c <_usb_d_dev_in_next+0x134>)
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
     7ce:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
     7d0:	0173      	lsls	r3, r6, #5
     7d2:	18cb      	adds	r3, r1, r3
     7d4:	661a      	str	r2, [r3, #96]	; 0x60
     7d6:	e00b      	b.n	7f0 <_usb_d_dev_in_next+0x98>
     7d8:	2280      	movs	r2, #128	; 0x80
     7da:	1c1d      	adds	r5, r3, #0
     7dc:	0192      	lsls	r2, r2, #6
     7de:	4293      	cmp	r3, r2
     7e0:	d900      	bls.n	7e4 <_usb_d_dev_in_next+0x8c>
     7e2:	1c15      	adds	r5, r2, #0
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
     7e4:	6823      	ldr	r3, [r4, #0]
     7e6:	b2ad      	uxth	r5, r5
     7e8:	1859      	adds	r1, r3, r1
	bank->ADDR.reg          = addr;
     7ea:	4b28      	ldr	r3, [pc, #160]	; (88c <_usb_d_dev_in_next+0x134>)
     7ec:	19db      	adds	r3, r3, r7
     7ee:	6619      	str	r1, [r3, #96]	; 0x60
	bank->PCKSIZE.bit.BYTE_COUNT = size;
     7f0:	4b26      	ldr	r3, [pc, #152]	; (88c <_usb_d_dev_in_next+0x134>)
     7f2:	04ad      	lsls	r5, r5, #18
     7f4:	19df      	adds	r7, r3, r7
     7f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
     7f8:	0cab      	lsrs	r3, r5, #18
     7fa:	0b95      	lsrs	r5, r2, #14
     7fc:	03ad      	lsls	r5, r5, #14
     7fe:	431d      	orrs	r5, r3
     800:	667d      	str	r5, [r7, #100]	; 0x64
     802:	e00a      	b.n	81a <_usb_d_dev_in_next+0xc2>
	} else if (ept->flags.bits.need_zlp) {
     804:	2310      	movs	r3, #16
     806:	4218      	tst	r0, r3
     808:	d00f      	beq.n	82a <_usb_d_dev_in_next+0xd2>
		ept->flags.bits.need_zlp = 0;
     80a:	4398      	bics	r0, r3
	bank->PCKSIZE.bit.BYTE_COUNT = size;
     80c:	4b1f      	ldr	r3, [pc, #124]	; (88c <_usb_d_dev_in_next+0x134>)
		ept->flags.bits.need_zlp = 0;
     80e:	74e0      	strb	r0, [r4, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
     810:	19df      	adds	r7, r3, r7
     812:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     814:	0b9b      	lsrs	r3, r3, #14
     816:	039b      	lsls	r3, r3, #14
     818:	667b      	str	r3, [r7, #100]	; 0x64
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
     81a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
     81c:	4b1f      	ldr	r3, [pc, #124]	; (89c <_usb_d_dev_in_next+0x144>)
     81e:	4013      	ands	r3, r2
     820:	667b      	str	r3, [r7, #100]	; 0x64
	if (!isr) {
     822:	9b00      	ldr	r3, [sp, #0]
     824:	2b00      	cmp	r3, #0
     826:	d12b      	bne.n	880 <_usb_d_dev_in_next+0x128>
     828:	e021      	b.n	86e <_usb_d_dev_in_next+0x116>
	if (is_ctrl) {
     82a:	9b01      	ldr	r3, [sp, #4]
     82c:	2b01      	cmp	r3, #1
     82e:	d103      	bne.n	838 <_usb_d_dev_in_next+0xe0>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     830:	4b1b      	ldr	r3, [pc, #108]	; (8a0 <_usb_d_dev_in_next+0x148>)
     832:	18ff      	adds	r7, r7, r3
     834:	234b      	movs	r3, #75	; 0x4b
     836:	e002      	b.n	83e <_usb_d_dev_in_next+0xe6>
     838:	4b19      	ldr	r3, [pc, #100]	; (8a0 <_usb_d_dev_in_next+0x148>)
     83a:	18ff      	adds	r7, r7, r3
     83c:	234a      	movs	r3, #74	; 0x4a
     83e:	727b      	strb	r3, [r7, #9]
	if (last_pkt == ept->size) {
     840:	8a23      	ldrh	r3, [r4, #16]
     842:	402a      	ands	r2, r5
     844:	4293      	cmp	r3, r2
     846:	d10d      	bne.n	864 <_usb_d_dev_in_next+0x10c>
		ept->flags.bits.is_busy = 0;
     848:	2540      	movs	r5, #64	; 0x40
     84a:	7ce3      	ldrb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
     84c:	7ca0      	ldrb	r0, [r4, #18]
		ept->flags.bits.is_busy = 0;
     84e:	43ab      	bics	r3, r5
     850:	74e3      	strb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
     852:	4b0e      	ldr	r3, [pc, #56]	; (88c <_usb_d_dev_in_next+0x134>)
     854:	68a1      	ldr	r1, [r4, #8]
     856:	68db      	ldr	r3, [r3, #12]
     858:	4798      	blx	r3
     85a:	2800      	cmp	r0, #0
     85c:	d115      	bne.n	88a <_usb_d_dev_in_next+0x132>
		ept->flags.bits.is_busy = 1;
     85e:	7ce3      	ldrb	r3, [r4, #19]
     860:	432b      	orrs	r3, r5
     862:	74e3      	strb	r3, [r4, #19]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
     864:	2100      	movs	r1, #0
     866:	0020      	movs	r0, r4
     868:	4b0e      	ldr	r3, [pc, #56]	; (8a4 <_usb_d_dev_in_next+0x14c>)
     86a:	4798      	blx	r3
	return;
     86c:	e00d      	b.n	88a <_usb_d_dev_in_next+0x132>
		if (is_ctrl) {
     86e:	9b01      	ldr	r3, [sp, #4]
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
     870:	224e      	movs	r2, #78	; 0x4e
		if (is_ctrl) {
     872:	2b01      	cmp	r3, #1
     874:	d000      	beq.n	878 <_usb_d_dev_in_next+0x120>
			inten = USB_D_BANK1_INT_FLAGS;
     876:	3a04      	subs	r2, #4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
     878:	4909      	ldr	r1, [pc, #36]	; (8a0 <_usb_d_dev_in_next+0x148>)
     87a:	0173      	lsls	r3, r6, #5
     87c:	185b      	adds	r3, r3, r1
     87e:	729a      	strb	r2, [r3, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
     880:	4b04      	ldr	r3, [pc, #16]	; (894 <_usb_d_dev_in_next+0x13c>)
     882:	0176      	lsls	r6, r6, #5
     884:	18f6      	adds	r6, r6, r3
     886:	2380      	movs	r3, #128	; 0x80
     888:	7173      	strb	r3, [r6, #5]
}
     88a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     88c:	200000a8 	.word	0x200000a8
     890:	000003ff 	.word	0x000003ff
     894:	41005100 	.word	0x41005100
     898:	00002625 	.word	0x00002625
     89c:	f0003fff 	.word	0xf0003fff
     8a0:	410050ff 	.word	0x410050ff
     8a4:	00000581 	.word	0x00000581

000008a8 <_usb_d_dev_out_next>:
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
     8a8:	230f      	movs	r3, #15
{
     8aa:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
     8ac:	7c85      	ldrb	r5, [r0, #18]
{
     8ae:	b087      	sub	sp, #28
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
     8b0:	401d      	ands	r5, r3
     8b2:	016b      	lsls	r3, r5, #5
{
     8b4:	0004      	movs	r4, r0
     8b6:	1e0e      	subs	r6, r1, #0
     8b8:	9301      	str	r3, [sp, #4]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
     8ba:	d00c      	beq.n	8d6 <_usb_d_dev_out_next+0x2e>
     8bc:	4b6b      	ldr	r3, [pc, #428]	; (a6c <_usb_d_dev_out_next+0x1c4>)
     8be:	016a      	lsls	r2, r5, #5
     8c0:	189b      	adds	r3, r3, r2
     8c2:	6d59      	ldr	r1, [r3, #84]	; 0x54
     8c4:	3350      	adds	r3, #80	; 0x50
     8c6:	0109      	lsls	r1, r1, #4
     8c8:	0c8a      	lsrs	r2, r1, #18
     8ca:	9203      	str	r2, [sp, #12]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
     8cc:	685b      	ldr	r3, [r3, #4]
     8ce:	049b      	lsls	r3, r3, #18
     8d0:	0c9b      	lsrs	r3, r3, #18
     8d2:	9301      	str	r3, [sp, #4]
     8d4:	e001      	b.n	8da <_usb_d_dev_out_next+0x32>
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
     8d6:	9103      	str	r1, [sp, #12]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
     8d8:	9101      	str	r1, [sp, #4]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
     8da:	8a23      	ldrh	r3, [r4, #16]
     8dc:	4a64      	ldr	r2, [pc, #400]	; (a70 <_usb_d_dev_out_next+0x1c8>)
     8de:	9302      	str	r3, [sp, #8]
     8e0:	4293      	cmp	r3, r2
     8e2:	d002      	beq.n	8ea <_usb_d_dev_out_next+0x42>
     8e4:	3b01      	subs	r3, #1
     8e6:	b29b      	uxth	r3, r3
     8e8:	9302      	str	r3, [sp, #8]
	uint16_t           last_pkt   = last_trans & size_mask;
     8ea:	9b01      	ldr	r3, [sp, #4]
     8ec:	9f02      	ldr	r7, [sp, #8]
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
     8ee:	7ce2      	ldrb	r2, [r4, #19]
	uint16_t           last_pkt   = last_trans & size_mask;
     8f0:	401f      	ands	r7, r3
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
     8f2:	2307      	movs	r3, #7
     8f4:	401a      	ands	r2, r3
     8f6:	9204      	str	r2, [sp, #16]
	if (isr) {
     8f8:	2e00      	cmp	r6, #0
     8fa:	d004      	beq.n	906 <_usb_d_dev_out_next+0x5e>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     8fc:	4a5d      	ldr	r2, [pc, #372]	; (a74 <_usb_d_dev_out_next+0x1cc>)
     8fe:	016b      	lsls	r3, r5, #5
     900:	189b      	adds	r3, r3, r2
     902:	2201      	movs	r2, #1
     904:	71da      	strb	r2, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
     906:	7ce3      	ldrb	r3, [r4, #19]
     908:	069b      	lsls	r3, r3, #26
     90a:	d50f      	bpl.n	92c <_usb_d_dev_out_next+0x84>
     90c:	6863      	ldr	r3, [r4, #4]
     90e:	2b00      	cmp	r3, #0
     910:	d00c      	beq.n	92c <_usb_d_dev_out_next+0x84>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
     912:	68a2      	ldr	r2, [r4, #8]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
     914:	6821      	ldr	r1, [r4, #0]
     916:	1a9b      	subs	r3, r3, r2
     918:	1888      	adds	r0, r1, r2
     91a:	1c1a      	adds	r2, r3, #0
     91c:	b29b      	uxth	r3, r3
     91e:	42bb      	cmp	r3, r7
     920:	d900      	bls.n	924 <_usb_d_dev_out_next+0x7c>
     922:	1c3a      	adds	r2, r7, #0
     924:	b292      	uxth	r2, r2
     926:	68e1      	ldr	r1, [r4, #12]
     928:	4b53      	ldr	r3, [pc, #332]	; (a78 <_usb_d_dev_out_next+0x1d0>)
     92a:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
     92c:	6863      	ldr	r3, [r4, #4]
     92e:	016a      	lsls	r2, r5, #5
     930:	9205      	str	r2, [sp, #20]
     932:	2b00      	cmp	r3, #0
     934:	d11a      	bne.n	96c <_usb_d_dev_out_next+0xc4>
     936:	2110      	movs	r1, #16
     938:	7ce2      	ldrb	r2, [r4, #19]
     93a:	420a      	tst	r2, r1
     93c:	d063      	beq.n	a06 <_usb_d_dev_out_next+0x15e>
		ept->flags.bits.use_cache = 1;
     93e:	438a      	bics	r2, r1
     940:	3320      	adds	r3, #32
     942:	431a      	orrs	r2, r3
	bank->ADDR.reg          = addr;
     944:	4b49      	ldr	r3, [pc, #292]	; (a6c <_usb_d_dev_out_next+0x1c4>)
		ept->flags.bits.use_cache = 1;
     946:	74e2      	strb	r2, [r4, #19]
	bank->ADDR.reg          = addr;
     948:	016a      	lsls	r2, r5, #5
     94a:	189b      	adds	r3, r3, r2
     94c:	0019      	movs	r1, r3
     94e:	68e2      	ldr	r2, [r4, #12]
     950:	651a      	str	r2, [r3, #80]	; 0x50
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
     952:	8a22      	ldrh	r2, [r4, #16]
     954:	6d58      	ldr	r0, [r3, #84]	; 0x54
     956:	4b49      	ldr	r3, [pc, #292]	; (a7c <_usb_d_dev_out_next+0x1d4>)
     958:	0492      	lsls	r2, r2, #18
     95a:	0912      	lsrs	r2, r2, #4
     95c:	4003      	ands	r3, r0
     95e:	4313      	orrs	r3, r2
     960:	654b      	str	r3, [r1, #84]	; 0x54
	bank->PCKSIZE.bit.BYTE_COUNT = count;
     962:	6d4b      	ldr	r3, [r1, #84]	; 0x54
     964:	0b9b      	lsrs	r3, r3, #14
     966:	039b      	lsls	r3, r3, #14
     968:	654b      	str	r3, [r1, #84]	; 0x54
     96a:	e069      	b.n	a40 <_usb_d_dev_out_next+0x198>
	} else if (isr && last_pkt < ept->size) {
     96c:	2e00      	cmp	r6, #0
     96e:	d00c      	beq.n	98a <_usb_d_dev_out_next+0xe2>
     970:	8a22      	ldrh	r2, [r4, #16]
     972:	42ba      	cmp	r2, r7
     974:	d909      	bls.n	98a <_usb_d_dev_out_next+0xe2>
		ept->flags.bits.need_zlp = 0;
     976:	2210      	movs	r2, #16
     978:	7ce3      	ldrb	r3, [r4, #19]
     97a:	4393      	bics	r3, r2
		ept->trans_count += last_trans;
     97c:	68a2      	ldr	r2, [r4, #8]
		ept->flags.bits.need_zlp = 0;
     97e:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
     980:	4694      	mov	ip, r2
     982:	9b01      	ldr	r3, [sp, #4]
     984:	4463      	add	r3, ip
     986:	60a3      	str	r3, [r4, #8]
     988:	e044      	b.n	a14 <_usb_d_dev_out_next+0x16c>
		ept->trans_count += trans_size;
     98a:	68a0      	ldr	r0, [r4, #8]
     98c:	9a03      	ldr	r2, [sp, #12]
     98e:	4684      	mov	ip, r0
     990:	4462      	add	r2, ip
     992:	0011      	movs	r1, r2
     994:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
     996:	4293      	cmp	r3, r2
     998:	d93c      	bls.n	a14 <_usb_d_dev_out_next+0x16c>
			trans_next = ept->trans_size - ept->trans_count;
     99a:	1a9b      	subs	r3, r3, r2
     99c:	4a33      	ldr	r2, [pc, #204]	; (a6c <_usb_d_dev_out_next+0x1c4>)
			if (ept->flags.bits.use_cache) {
     99e:	7ce0      	ldrb	r0, [r4, #19]
     9a0:	4694      	mov	ip, r2
     9a2:	2220      	movs	r2, #32
			trans_next = ept->trans_size - ept->trans_count;
     9a4:	b29b      	uxth	r3, r3
     9a6:	8a27      	ldrh	r7, [r4, #16]
			if (ept->flags.bits.use_cache) {
     9a8:	4210      	tst	r0, r2
     9aa:	d009      	beq.n	9c0 <_usb_d_dev_out_next+0x118>
     9ac:	1c19      	adds	r1, r3, #0
     9ae:	42bb      	cmp	r3, r7
     9b0:	d900      	bls.n	9b4 <_usb_d_dev_out_next+0x10c>
     9b2:	1c39      	adds	r1, r7, #0
     9b4:	b28b      	uxth	r3, r1
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
     9b6:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
     9b8:	0169      	lsls	r1, r5, #5
     9ba:	4461      	add	r1, ip
     9bc:	6508      	str	r0, [r1, #80]	; 0x50
     9be:	e014      	b.n	9ea <_usb_d_dev_out_next+0x142>
				if (trans_next > ept->size) {
     9c0:	42bb      	cmp	r3, r7
     9c2:	d906      	bls.n	9d2 <_usb_d_dev_out_next+0x12a>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
     9c4:	2080      	movs	r0, #128	; 0x80
     9c6:	0180      	lsls	r0, r0, #6
     9c8:	4283      	cmp	r3, r0
     9ca:	d808      	bhi.n	9de <_usb_d_dev_out_next+0x136>
						trans_next -= trans_next & size_mask;
     9cc:	9a02      	ldr	r2, [sp, #8]
     9ce:	4393      	bics	r3, r2
     9d0:	e006      	b.n	9e0 <_usb_d_dev_out_next+0x138>
				} else if (trans_next < ept->size) {
     9d2:	42bb      	cmp	r3, r7
     9d4:	d204      	bcs.n	9e0 <_usb_d_dev_out_next+0x138>
					ept->flags.bits.use_cache = 1;
     9d6:	2220      	movs	r2, #32
     9d8:	4310      	orrs	r0, r2
     9da:	74e0      	strb	r0, [r4, #19]
     9dc:	e000      	b.n	9e0 <_usb_d_dev_out_next+0x138>
						trans_next = USB_D_DEV_TRANS_MAX;
     9de:	0003      	movs	r3, r0
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
     9e0:	6820      	ldr	r0, [r4, #0]
     9e2:	1841      	adds	r1, r0, r1
	bank->ADDR.reg          = addr;
     9e4:	0168      	lsls	r0, r5, #5
     9e6:	4460      	add	r0, ip
     9e8:	6501      	str	r1, [r0, #80]	; 0x50
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
     9ea:	016a      	lsls	r2, r5, #5
     9ec:	4462      	add	r2, ip
     9ee:	049b      	lsls	r3, r3, #18
     9f0:	6d50      	ldr	r0, [r2, #84]	; 0x54
     9f2:	0919      	lsrs	r1, r3, #4
     9f4:	4b21      	ldr	r3, [pc, #132]	; (a7c <_usb_d_dev_out_next+0x1d4>)
     9f6:	4003      	ands	r3, r0
     9f8:	430b      	orrs	r3, r1
     9fa:	6553      	str	r3, [r2, #84]	; 0x54
	bank->PCKSIZE.bit.BYTE_COUNT = count;
     9fc:	6d53      	ldr	r3, [r2, #84]	; 0x54
     9fe:	0b9b      	lsrs	r3, r3, #14
     a00:	039b      	lsls	r3, r3, #14
     a02:	6553      	str	r3, [r2, #84]	; 0x54
     a04:	e01c      	b.n	a40 <_usb_d_dev_out_next+0x198>
	} else if (isr && last_pkt < ept->size) {
     a06:	2e00      	cmp	r6, #0
     a08:	d1b2      	bne.n	970 <_usb_d_dev_out_next+0xc8>
		ept->trans_count += trans_size;
     a0a:	68a2      	ldr	r2, [r4, #8]
     a0c:	9b03      	ldr	r3, [sp, #12]
     a0e:	4694      	mov	ip, r2
     a10:	4463      	add	r3, ip
     a12:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
     a14:	9b04      	ldr	r3, [sp, #16]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     a16:	4a1a      	ldr	r2, [pc, #104]	; (a80 <_usb_d_dev_out_next+0x1d8>)
     a18:	2b01      	cmp	r3, #1
     a1a:	d103      	bne.n	a24 <_usb_d_dev_out_next+0x17c>
     a1c:	016b      	lsls	r3, r5, #5
     a1e:	18d2      	adds	r2, r2, r3
     a20:	232d      	movs	r3, #45	; 0x2d
     a22:	e002      	b.n	a2a <_usb_d_dev_out_next+0x182>
     a24:	016b      	lsls	r3, r5, #5
     a26:	18d2      	adds	r2, r2, r3
     a28:	2325      	movs	r3, #37	; 0x25
     a2a:	7253      	strb	r3, [r2, #9]
	if (0 == epn) {
     a2c:	2d00      	cmp	r5, #0
     a2e:	d102      	bne.n	a36 <_usb_d_dev_out_next+0x18e>
	bank->ADDR.reg          = addr;
     a30:	4b0e      	ldr	r3, [pc, #56]	; (a6c <_usb_d_dev_out_next+0x1c4>)
     a32:	68e2      	ldr	r2, [r4, #12]
     a34:	651a      	str	r2, [r3, #80]	; 0x50
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
     a36:	2100      	movs	r1, #0
     a38:	0020      	movs	r0, r4
     a3a:	4b12      	ldr	r3, [pc, #72]	; (a84 <_usb_d_dev_out_next+0x1dc>)
     a3c:	4798      	blx	r3
	return;
     a3e:	e013      	b.n	a68 <_usb_d_dev_out_next+0x1c0>
	if (!isr) {
     a40:	2e00      	cmp	r6, #0
     a42:	d10c      	bne.n	a5e <_usb_d_dev_out_next+0x1b6>
		if (is_ctrl) {
     a44:	9904      	ldr	r1, [sp, #16]
     a46:	016a      	lsls	r2, r5, #5
			inten = USB_D_BANK0_INT_FLAGS;
     a48:	2325      	movs	r3, #37	; 0x25
		if (is_ctrl) {
     a4a:	2901      	cmp	r1, #1
     a4c:	d104      	bne.n	a58 <_usb_d_dev_out_next+0x1b0>
	bank->STATUS_BK.reg     = 0;
     a4e:	4b07      	ldr	r3, [pc, #28]	; (a6c <_usb_d_dev_out_next+0x1c4>)
     a50:	3350      	adds	r3, #80	; 0x50
     a52:	189b      	adds	r3, r3, r2
     a54:	769e      	strb	r6, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
     a56:	232d      	movs	r3, #45	; 0x2d
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
     a58:	4909      	ldr	r1, [pc, #36]	; (a80 <_usb_d_dev_out_next+0x1d8>)
     a5a:	1852      	adds	r2, r2, r1
     a5c:	7293      	strb	r3, [r2, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
     a5e:	4b05      	ldr	r3, [pc, #20]	; (a74 <_usb_d_dev_out_next+0x1cc>)
     a60:	016d      	lsls	r5, r5, #5
     a62:	18ed      	adds	r5, r5, r3
     a64:	2340      	movs	r3, #64	; 0x40
     a66:	712b      	strb	r3, [r5, #4]
}
     a68:	b007      	add	sp, #28
     a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a6c:	200000a8 	.word	0x200000a8
     a70:	000003ff 	.word	0x000003ff
     a74:	41005100 	.word	0x41005100
     a78:	00002625 	.word	0x00002625
     a7c:	f0003fff 	.word	0xf0003fff
     a80:	410050ff 	.word	0x410050ff
     a84:	00000581 	.word	0x00000581

00000a88 <_usbd_ep_pcksize_size>:
	return (
     a88:	2280      	movs	r2, #128	; 0x80
     a8a:	2307      	movs	r3, #7
     a8c:	0092      	lsls	r2, r2, #2
     a8e:	4290      	cmp	r0, r2
     a90:	d814      	bhi.n	abc <_usbd_ep_pcksize_size+0x34>
     a92:	3a01      	subs	r2, #1
     a94:	3aff      	subs	r2, #255	; 0xff
     a96:	3b01      	subs	r3, #1
     a98:	4290      	cmp	r0, r2
     a9a:	d80f      	bhi.n	abc <_usbd_ep_pcksize_size+0x34>
     a9c:	3b01      	subs	r3, #1
     a9e:	2880      	cmp	r0, #128	; 0x80
     aa0:	d80c      	bhi.n	abc <_usbd_ep_pcksize_size+0x34>
     aa2:	3b01      	subs	r3, #1
     aa4:	2840      	cmp	r0, #64	; 0x40
     aa6:	d809      	bhi.n	abc <_usbd_ep_pcksize_size+0x34>
     aa8:	3b01      	subs	r3, #1
     aaa:	2820      	cmp	r0, #32
     aac:	d806      	bhi.n	abc <_usbd_ep_pcksize_size+0x34>
     aae:	3b01      	subs	r3, #1
     ab0:	2810      	cmp	r0, #16
     ab2:	d803      	bhi.n	abc <_usbd_ep_pcksize_size+0x34>
     ab4:	3306      	adds	r3, #6
     ab6:	4283      	cmp	r3, r0
     ab8:	419b      	sbcs	r3, r3
     aba:	425b      	negs	r3, r3
}
     abc:	0018      	movs	r0, r3
     abe:	4770      	bx	lr

00000ac0 <_usb_d_dev_init>:
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
     ac0:	2301      	movs	r3, #1
{
     ac2:	b570      	push	{r4, r5, r6, lr}
     ac4:	4925      	ldr	r1, [pc, #148]	; (b5c <_usb_d_dev_init+0x9c>)
     ac6:	788a      	ldrb	r2, [r1, #2]
     ac8:	4c24      	ldr	r4, [pc, #144]	; (b5c <_usb_d_dev_init+0x9c>)
     aca:	421a      	tst	r2, r3
     acc:	d1fb      	bne.n	ac6 <_usb_d_dev_init+0x6>
     ace:	2303      	movs	r3, #3
     ad0:	78a2      	ldrb	r2, [r4, #2]
     ad2:	421a      	tst	r2, r3
     ad4:	d1fc      	bne.n	ad0 <_usb_d_dev_init+0x10>

static inline bool hri_usbdevice_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	tmp = ((Usb *)hw)->DEVICE.CTRLA.reg;
     ad6:	4b21      	ldr	r3, [pc, #132]	; (b5c <_usb_d_dev_init+0x9c>)
     ad8:	781b      	ldrb	r3, [r3, #0]
	if (hri_usbdevice_get_CTRLA_ENABLE_bit(hw)) {
     ada:	079b      	lsls	r3, r3, #30
     adc:	d43b      	bmi.n	b56 <_usb_d_dev_init+0x96>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
     ade:	2201      	movs	r2, #1
     ae0:	78a0      	ldrb	r0, [r4, #2]
     ae2:	491e      	ldr	r1, [pc, #120]	; (b5c <_usb_d_dev_init+0x9c>)
     ae4:	2301      	movs	r3, #1
     ae6:	4210      	tst	r0, r2
     ae8:	d1fa      	bne.n	ae0 <_usb_d_dev_init+0x20>
	((Usb *)hw)->DEVICE.CTRLA.reg |= USB_CTRLA_SWRST;
     aea:	780a      	ldrb	r2, [r1, #0]
     aec:	431a      	orrs	r2, r3
     aee:	700a      	strb	r2, [r1, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
     af0:	78a2      	ldrb	r2, [r4, #2]
     af2:	421a      	tst	r2, r3
     af4:	d1fc      	bne.n	af0 <_usb_d_dev_init+0x30>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
     af6:	4b1a      	ldr	r3, [pc, #104]	; (b60 <_usb_d_dev_init+0xa0>)
     af8:	4d1a      	ldr	r5, [pc, #104]	; (b64 <_usb_d_dev_init+0xa4>)
     afa:	602b      	str	r3, [r5, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
     afc:	606b      	str	r3, [r5, #4]
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
     afe:	60ab      	str	r3, [r5, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
     b00:	60eb      	str	r3, [r5, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
     b02:	612b      	str	r3, [r5, #16]
	_usb_d_dev_reset_epts();
     b04:	4b18      	ldr	r3, [pc, #96]	; (b68 <_usb_d_dev_init+0xa8>)
     b06:	4798      	blx	r3
	uint32_t pad_transn
     b08:	211f      	movs	r1, #31
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
     b0a:	4b18      	ldr	r3, [pc, #96]	; (b6c <_usb_d_dev_init+0xac>)
     b0c:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
     b0e:	0b58      	lsrs	r0, r3, #13
	uint32_t pad_transp
     b10:	0c9a      	lsrs	r2, r3, #18
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
     b12:	019b      	lsls	r3, r3, #6
	uint32_t pad_transn
     b14:	4008      	ands	r0, r1
	uint32_t pad_transp
     b16:	400a      	ands	r2, r1
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
     b18:	0f5b      	lsrs	r3, r3, #29
	if (pad_transn == 0x1F) {
     b1a:	4288      	cmp	r0, r1
     b1c:	d100      	bne.n	b20 <_usb_d_dev_init+0x60>
		pad_transn = 5;
     b1e:	2005      	movs	r0, #5
	if (pad_transp == 0x1F) {
     b20:	2a1f      	cmp	r2, #31
     b22:	d100      	bne.n	b26 <_usb_d_dev_init+0x66>
		pad_transp = 29;
     b24:	3a02      	subs	r2, #2
	if (pad_trim == 0x7) {
     b26:	2b07      	cmp	r3, #7
     b28:	d100      	bne.n	b2c <_usb_d_dev_init+0x6c>
		pad_trim = 5;
     b2a:	3b02      	subs	r3, #2
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
     b2c:	0180      	lsls	r0, r0, #6
     b2e:	4302      	orrs	r2, r0
     b30:	031b      	lsls	r3, r3, #12
     b32:	4313      	orrs	r3, r2
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
     b34:	2203      	movs	r2, #3
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
     b36:	8523      	strh	r3, [r4, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
     b38:	78e3      	ldrb	r3, [r4, #3]
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
     b3a:	3550      	adds	r5, #80	; 0x50
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
     b3c:	4313      	orrs	r3, r2
     b3e:	70e3      	strb	r3, [r4, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
     b40:	78e3      	ldrb	r3, [r4, #3]
     b42:	3209      	adds	r2, #9
     b44:	4313      	orrs	r3, r2
     b46:	70e3      	strb	r3, [r4, #3]
}

static inline void hri_usbdevice_write_CTRLA_reg(const void *const hw, hri_usbdevice_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLA.reg = data;
     b48:	2304      	movs	r3, #4
     b4a:	7023      	strb	r3, [r4, #0]
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
     b4c:	3b03      	subs	r3, #3
}

static inline void hri_usbdevice_write_DESCADD_reg(const void *const hw, hri_usbdevice_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DESCADD.reg = data;
     b4e:	6265      	str	r5, [r4, #36]	; 0x24
	return ERR_NONE;
     b50:	2000      	movs	r0, #0
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
     b52:	8123      	strh	r3, [r4, #8]
     b54:	e001      	b.n	b5a <_usb_d_dev_init+0x9a>
		return ERR_DENIED;
     b56:	2011      	movs	r0, #17
     b58:	4240      	negs	r0, r0
}
     b5a:	bd70      	pop	{r4, r5, r6, pc}
     b5c:	41005000 	.word	0x41005000
     b60:	00000495 	.word	0x00000495
     b64:	200000a8 	.word	0x200000a8
     b68:	0000071d 	.word	0x0000071d
     b6c:	00806024 	.word	0x00806024

00000b70 <_usb_d_dev_enable>:

static inline hri_usbdevice_syncbusy_reg_t hri_usbdevice_get_SYNCBUSY_reg(const void *const            hw,
                                                                          hri_usbdevice_syncbusy_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Usb *)hw)->DEVICE.SYNCBUSY.reg;
     b70:	4b0a      	ldr	r3, [pc, #40]	; (b9c <_usb_d_dev_enable+0x2c>)
     b72:	789a      	ldrb	r2, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
     b74:	0792      	lsls	r2, r2, #30
     b76:	d10d      	bne.n	b94 <_usb_d_dev_enable+0x24>
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
     b78:	2102      	movs	r1, #2
	return ((Usb *)hw)->DEVICE.CTRLA.reg;
     b7a:	781a      	ldrb	r2, [r3, #0]
     b7c:	b2d2      	uxtb	r2, r2
     b7e:	420a      	tst	r2, r1
     b80:	d101      	bne.n	b86 <_usb_d_dev_enable+0x16>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
     b82:	430a      	orrs	r2, r1
	((Usb *)hw)->DEVICE.CTRLA.reg = data;
     b84:	701a      	strb	r2, [r3, #0]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     b86:	2180      	movs	r1, #128	; 0x80
     b88:	4a05      	ldr	r2, [pc, #20]	; (ba0 <_usb_d_dev_enable+0x30>)
	return ERR_NONE;
     b8a:	2000      	movs	r0, #0
     b8c:	6011      	str	r1, [r2, #0]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
     b8e:	4a05      	ldr	r2, [pc, #20]	; (ba4 <_usb_d_dev_enable+0x34>)
     b90:	831a      	strh	r2, [r3, #24]
     b92:	e001      	b.n	b98 <_usb_d_dev_enable+0x28>
		return -USB_ERR_DENIED;
     b94:	2011      	movs	r0, #17
     b96:	4240      	negs	r0, r0
}
     b98:	4770      	bx	lr
     b9a:	46c0      	nop			; (mov r8, r8)
     b9c:	41005000 	.word	0x41005000
     ba0:	e000e100 	.word	0xe000e100
     ba4:	0000028d 	.word	0x0000028d

00000ba8 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
     ba8:	2101      	movs	r1, #1
     baa:	4a02      	ldr	r2, [pc, #8]	; (bb4 <_usb_d_dev_attach+0xc>)
     bac:	8913      	ldrh	r3, [r2, #8]
     bae:	438b      	bics	r3, r1
     bb0:	8113      	strh	r3, [r2, #8]
}
     bb2:	4770      	bx	lr
     bb4:	41005000 	.word	0x41005000

00000bb8 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
     bb8:	2380      	movs	r3, #128	; 0x80
     bba:	4318      	orrs	r0, r3
	((Usb *)hw)->DEVICE.DADD.reg = data;
     bbc:	4b01      	ldr	r3, [pc, #4]	; (bc4 <_usb_d_dev_set_address+0xc>)
     bbe:	7298      	strb	r0, [r3, #10]
}
     bc0:	4770      	bx	lr
     bc2:	46c0      	nop			; (mov r8, r8)
     bc4:	41005000 	.word	0x41005000

00000bc8 <_usb_d_dev_ep_init>:
{
     bc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     bca:	237f      	movs	r3, #127	; 0x7f
     bcc:	0006      	movs	r6, r0
     bce:	439e      	bics	r6, r3
     bd0:	000f      	movs	r7, r1
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
     bd2:	0031      	movs	r1, r6
	uint8_t               epn = USB_EP_GET_N(ep);
     bd4:	240f      	movs	r4, #15
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
     bd6:	1e4b      	subs	r3, r1, #1
     bd8:	4199      	sbcs	r1, r3
	uint8_t               epn = USB_EP_GET_N(ep);
     bda:	4004      	ands	r4, r0
{
     bdc:	9000      	str	r0, [sp, #0]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
     bde:	4b2e      	ldr	r3, [pc, #184]	; (c98 <_usb_d_dev_ep_init+0xd0>)
     be0:	b2c9      	uxtb	r1, r1
     be2:	0020      	movs	r0, r4
{
     be4:	9201      	str	r2, [sp, #4]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
     be6:	4798      	blx	r3
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
     be8:	2303      	movs	r3, #3
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
     bea:	0005      	movs	r5, r0
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
     bec:	401f      	ands	r7, r3
	if (epn > CONF_USB_D_MAX_EP_N) {
     bee:	2c02      	cmp	r4, #2
     bf0:	d84a      	bhi.n	c88 <_usb_d_dev_ep_init+0xc0>
	if (ept->ep != 0xFF) {
     bf2:	7c83      	ldrb	r3, [r0, #18]
     bf4:	2bff      	cmp	r3, #255	; 0xff
     bf6:	d149      	bne.n	c8c <_usb_d_dev_ep_init+0xc4>
	if (ep_type == USB_EP_XTYPE_CTRL) {
     bf8:	2f00      	cmp	r7, #0
     bfa:	d110      	bne.n	c1e <_usb_d_dev_ep_init+0x56>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
     bfc:	4271      	negs	r1, r6
     bfe:	4171      	adcs	r1, r6
     c00:	0020      	movs	r0, r4
     c02:	4b25      	ldr	r3, [pc, #148]	; (c98 <_usb_d_dev_ep_init+0xd0>)
     c04:	b2c9      	uxtb	r1, r1
     c06:	4798      	blx	r3
		if (ept_in->ep != 0xFF) {
     c08:	7c83      	ldrb	r3, [r0, #18]
     c0a:	2bff      	cmp	r3, #255	; 0xff
     c0c:	d13e      	bne.n	c8c <_usb_d_dev_ep_init+0xc4>
		if (pcfg->cache == NULL) {
     c0e:	3bf3      	subs	r3, #243	; 0xf3
     c10:	4363      	muls	r3, r4
     c12:	4a22      	ldr	r2, [pc, #136]	; (c9c <_usb_d_dev_ep_init+0xd4>)
     c14:	18d3      	adds	r3, r2, r3
     c16:	685b      	ldr	r3, [r3, #4]
     c18:	2b00      	cmp	r3, #0
     c1a:	d113      	bne.n	c44 <_usb_d_dev_ep_init+0x7c>
     c1c:	e038      	b.n	c90 <_usb_d_dev_ep_init+0xc8>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
     c1e:	2e00      	cmp	r6, #0
     c20:	d008      	beq.n	c34 <_usb_d_dev_ep_init+0x6c>
     c22:	230c      	movs	r3, #12
     c24:	4363      	muls	r3, r4
     c26:	4a1d      	ldr	r2, [pc, #116]	; (c9c <_usb_d_dev_ep_init+0xd4>)
     c28:	18d3      	adds	r3, r2, r3
     c2a:	689a      	ldr	r2, [r3, #8]
     c2c:	2a00      	cmp	r2, #0
     c2e:	d015      	beq.n	c5c <_usb_d_dev_ep_init+0x94>
     c30:	89db      	ldrh	r3, [r3, #14]
     c32:	e00e      	b.n	c52 <_usb_d_dev_ep_init+0x8a>
     c34:	230c      	movs	r3, #12
     c36:	4363      	muls	r3, r4
     c38:	4a18      	ldr	r2, [pc, #96]	; (c9c <_usb_d_dev_ep_init+0xd4>)
     c3a:	18d3      	adds	r3, r2, r3
     c3c:	685b      	ldr	r3, [r3, #4]
     c3e:	2b00      	cmp	r3, #0
     c40:	d012      	beq.n	c68 <_usb_d_dev_ep_init+0xa0>
     c42:	e001      	b.n	c48 <_usb_d_dev_ep_init+0x80>
     c44:	2e00      	cmp	r6, #0
     c46:	d1ec      	bne.n	c22 <_usb_d_dev_ep_init+0x5a>
     c48:	230c      	movs	r3, #12
     c4a:	4363      	muls	r3, r4
     c4c:	4a13      	ldr	r2, [pc, #76]	; (c9c <_usb_d_dev_ep_init+0xd4>)
     c4e:	18d3      	adds	r3, r2, r3
     c50:	899b      	ldrh	r3, [r3, #12]
     c52:	9a01      	ldr	r2, [sp, #4]
     c54:	4293      	cmp	r3, r2
     c56:	db1b      	blt.n	c90 <_usb_d_dev_ep_init+0xc8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
     c58:	2e00      	cmp	r6, #0
     c5a:	d005      	beq.n	c68 <_usb_d_dev_ep_init+0xa0>
     c5c:	230c      	movs	r3, #12
     c5e:	435c      	muls	r4, r3
     c60:	4b0e      	ldr	r3, [pc, #56]	; (c9c <_usb_d_dev_ep_init+0xd4>)
     c62:	191c      	adds	r4, r3, r4
     c64:	68a3      	ldr	r3, [r4, #8]
     c66:	e004      	b.n	c72 <_usb_d_dev_ep_init+0xaa>
     c68:	230c      	movs	r3, #12
     c6a:	435c      	muls	r4, r3
     c6c:	4b0b      	ldr	r3, [pc, #44]	; (c9c <_usb_d_dev_ep_init+0xd4>)
     c6e:	191c      	adds	r4, r3, r4
     c70:	6863      	ldr	r3, [r4, #4]
     c72:	60eb      	str	r3, [r5, #12]
	ept->size     = max_pkt_siz;
     c74:	466b      	mov	r3, sp
     c76:	889b      	ldrh	r3, [r3, #4]
	ept->flags.u8 = (ep_type + 1);
     c78:	3701      	adds	r7, #1
	ept->size     = max_pkt_siz;
     c7a:	822b      	strh	r3, [r5, #16]
	ept->ep       = ep;
     c7c:	466b      	mov	r3, sp
     c7e:	781b      	ldrb	r3, [r3, #0]
	ept->flags.u8 = (ep_type + 1);
     c80:	74ef      	strb	r7, [r5, #19]
	ept->ep       = ep;
     c82:	74ab      	strb	r3, [r5, #18]
	return USB_OK;
     c84:	2000      	movs	r0, #0
     c86:	e005      	b.n	c94 <_usb_d_dev_ep_init+0xcc>
		return -USB_ERR_PARAM;
     c88:	2012      	movs	r0, #18
     c8a:	e002      	b.n	c92 <_usb_d_dev_ep_init+0xca>
		return -USB_ERR_REDO;
     c8c:	2014      	movs	r0, #20
     c8e:	e000      	b.n	c92 <_usb_d_dev_ep_init+0xca>
			return -USB_ERR_FUNC;
     c90:	2013      	movs	r0, #19
     c92:	4240      	negs	r0, r0
}
     c94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     c96:	46c0      	nop			; (mov r8, r8)
     c98:	000004bd 	.word	0x000004bd
     c9c:	00002748 	.word	0x00002748

00000ca0 <_usb_d_dev_ep_deinit>:
{
     ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     ca2:	0004      	movs	r4, r0
	uint8_t               epn = USB_EP_GET_N(ep);
     ca4:	200f      	movs	r0, #15
	bool                  dir = USB_EP_GET_DIR(ep);
     ca6:	09e7      	lsrs	r7, r4, #7
	uint8_t               epn = USB_EP_GET_N(ep);
     ca8:	4020      	ands	r0, r4
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
     caa:	0039      	movs	r1, r7
     cac:	4b16      	ldr	r3, [pc, #88]	; (d08 <_usb_d_dev_ep_deinit+0x68>)
	uint8_t               epn = USB_EP_GET_N(ep);
     cae:	0006      	movs	r6, r0
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
     cb0:	4798      	blx	r3
     cb2:	0005      	movs	r5, r0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
     cb4:	2e02      	cmp	r6, #2
     cb6:	d826      	bhi.n	d06 <_usb_d_dev_ep_deinit+0x66>
     cb8:	7c83      	ldrb	r3, [r0, #18]
     cba:	2bff      	cmp	r3, #255	; 0xff
     cbc:	d023      	beq.n	d06 <_usb_d_dev_ep_deinit+0x66>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
     cbe:	2203      	movs	r2, #3
     cc0:	4b12      	ldr	r3, [pc, #72]	; (d0c <_usb_d_dev_ep_deinit+0x6c>)
     cc2:	0039      	movs	r1, r7
     cc4:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
     cc6:	2207      	movs	r2, #7
     cc8:	7ceb      	ldrb	r3, [r5, #19]
     cca:	4013      	ands	r3, r2
     ccc:	2b01      	cmp	r3, #1
     cce:	d105      	bne.n	cdc <_usb_d_dev_ep_deinit+0x3c>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
     cd0:	2200      	movs	r2, #0
     cd2:	3408      	adds	r4, #8
     cd4:	4b0e      	ldr	r3, [pc, #56]	; (d10 <_usb_d_dev_ep_deinit+0x70>)
     cd6:	0164      	lsls	r4, r4, #5
     cd8:	54e2      	strb	r2, [r4, r3]
     cda:	e010      	b.n	cfe <_usb_d_dev_ep_deinit+0x5e>
	} else if (USB_EP_GET_DIR(ep)) {
     cdc:	b263      	sxtb	r3, r4
     cde:	2b00      	cmp	r3, #0
     ce0:	da07      	bge.n	cf2 <_usb_d_dev_ep_deinit+0x52>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
     ce2:	2270      	movs	r2, #112	; 0x70
     ce4:	4b0b      	ldr	r3, [pc, #44]	; (d14 <_usb_d_dev_ep_deinit+0x74>)
     ce6:	0170      	lsls	r0, r6, #5
     ce8:	18c0      	adds	r0, r0, r3
     cea:	7843      	ldrb	r3, [r0, #1]
     cec:	4393      	bics	r3, r2
     cee:	7043      	strb	r3, [r0, #1]
     cf0:	e005      	b.n	cfe <_usb_d_dev_ep_deinit+0x5e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
     cf2:	4b08      	ldr	r3, [pc, #32]	; (d14 <_usb_d_dev_ep_deinit+0x74>)
     cf4:	0164      	lsls	r4, r4, #5
     cf6:	18e4      	adds	r4, r4, r3
     cf8:	7863      	ldrb	r3, [r4, #1]
     cfa:	4393      	bics	r3, r2
     cfc:	7063      	strb	r3, [r4, #1]
	ept->flags.u8 = 0;
     cfe:	2300      	movs	r3, #0
     d00:	74eb      	strb	r3, [r5, #19]
	ept->ep       = 0xFF;
     d02:	33ff      	adds	r3, #255	; 0xff
     d04:	74ab      	strb	r3, [r5, #18]
}
     d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d08:	000004bd 	.word	0x000004bd
     d0c:	000005a5 	.word	0x000005a5
     d10:	41005000 	.word	0x41005000
     d14:	410050ff 	.word	0x410050ff

00000d18 <_usb_d_dev_ep_enable>:
{
     d18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     d1a:	237f      	movs	r3, #127	; 0x7f
	uint8_t               epn   = USB_EP_GET_N(ep);
     d1c:	240f      	movs	r4, #15
     d1e:	4004      	ands	r4, r0
     d20:	4398      	bics	r0, r3
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
     d22:	0001      	movs	r1, r0
     d24:	1e4b      	subs	r3, r1, #1
     d26:	4199      	sbcs	r1, r3
     d28:	0007      	movs	r7, r0
     d2a:	4b4c      	ldr	r3, [pc, #304]	; (e5c <_usb_d_dev_ep_enable+0x144>)
     d2c:	b2c9      	uxtb	r1, r1
     d2e:	0020      	movs	r0, r4
     d30:	4798      	blx	r3
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
     d32:	4b4b      	ldr	r3, [pc, #300]	; (e60 <_usb_d_dev_ep_enable+0x148>)
     d34:	0162      	lsls	r2, r4, #5
     d36:	18d6      	adds	r6, r2, r3
     d38:	7873      	ldrb	r3, [r6, #1]
     d3a:	0005      	movs	r5, r0
     d3c:	b2db      	uxtb	r3, r3
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
     d3e:	2c02      	cmp	r4, #2
     d40:	d900      	bls.n	d44 <_usb_d_dev_ep_enable+0x2c>
     d42:	e086      	b.n	e52 <_usb_d_dev_ep_enable+0x13a>
     d44:	7c81      	ldrb	r1, [r0, #18]
     d46:	29ff      	cmp	r1, #255	; 0xff
     d48:	d100      	bne.n	d4c <_usb_d_dev_ep_enable+0x34>
     d4a:	e082      	b.n	e52 <_usb_d_dev_ep_enable+0x13a>
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
     d4c:	4c45      	ldr	r4, [pc, #276]	; (e64 <_usb_d_dev_ep_enable+0x14c>)
     d4e:	3450      	adds	r4, #80	; 0x50
     d50:	18a4      	adds	r4, r4, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
     d52:	7cc2      	ldrb	r2, [r0, #19]
     d54:	2007      	movs	r0, #7
     d56:	0011      	movs	r1, r2
     d58:	4001      	ands	r1, r0
     d5a:	2901      	cmp	r1, #1
     d5c:	d146      	bne.n	dec <_usb_d_dev_ep_enable+0xd4>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
     d5e:	3070      	adds	r0, #112	; 0x70
     d60:	4003      	ands	r3, r0
     d62:	9301      	str	r3, [sp, #4]
     d64:	d177      	bne.n	e56 <_usb_d_dev_ep_enable+0x13e>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
     d66:	3311      	adds	r3, #17
     d68:	7073      	strb	r3, [r6, #1]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
     d6a:	8a2f      	ldrh	r7, [r5, #16]
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
     d6c:	4b3e      	ldr	r3, [pc, #248]	; (e68 <_usb_d_dev_ep_enable+0x150>)
     d6e:	0038      	movs	r0, r7
     d70:	4798      	blx	r3
     d72:	4b3e      	ldr	r3, [pc, #248]	; (e6c <_usb_d_dev_ep_enable+0x154>)
     d74:	03bf      	lsls	r7, r7, #14
     d76:	401f      	ands	r7, r3
     d78:	23e0      	movs	r3, #224	; 0xe0
     d7a:	0700      	lsls	r0, r0, #28
     d7c:	05db      	lsls	r3, r3, #23
     d7e:	4018      	ands	r0, r3
     d80:	4307      	orrs	r7, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
     d82:	6067      	str	r7, [r4, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
     d84:	8a2f      	ldrh	r7, [r5, #16]
     d86:	4b38      	ldr	r3, [pc, #224]	; (e68 <_usb_d_dev_ep_enable+0x150>)
     d88:	0038      	movs	r0, r7
     d8a:	4798      	blx	r3
     d8c:	23e0      	movs	r3, #224	; 0xe0
     d8e:	0700      	lsls	r0, r0, #28
     d90:	05db      	lsls	r3, r3, #23
     d92:	4018      	ands	r0, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
     d94:	2140      	movs	r1, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
     d96:	2380      	movs	r3, #128	; 0x80
     d98:	04bf      	lsls	r7, r7, #18
     d9a:	0cbf      	lsrs	r7, r7, #18
     d9c:	4307      	orrs	r7, r0
     d9e:	6167      	str	r7, [r4, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
     da0:	71b1      	strb	r1, [r6, #6]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
     da2:	7173      	strb	r3, [r6, #5]
	bank->STATUS_BK.reg     = 0;
     da4:	466b      	mov	r3, sp
     da6:	791b      	ldrb	r3, [r3, #4]
	uint8_t epn = USB_EP_GET_N(ept->ep);
     da8:	220f      	movs	r2, #15
	bank->STATUS_BK.reg     = 0;
     daa:	72a3      	strb	r3, [r4, #10]
     dac:	466b      	mov	r3, sp
     dae:	791b      	ldrb	r3, [r3, #4]
     db0:	76a3      	strb	r3, [r4, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
     db2:	7cab      	ldrb	r3, [r5, #18]
     db4:	4013      	ands	r3, r2
	bank->ADDR.reg          = addr;
     db6:	0158      	lsls	r0, r3, #5
     db8:	4b2a      	ldr	r3, [pc, #168]	; (e64 <_usb_d_dev_ep_enable+0x14c>)
     dba:	68ea      	ldr	r2, [r5, #12]
     dbc:	181b      	adds	r3, r3, r0
     dbe:	001c      	movs	r4, r3
     dc0:	651a      	str	r2, [r3, #80]	; 0x50
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
     dc2:	8a2a      	ldrh	r2, [r5, #16]
     dc4:	6d5d      	ldr	r5, [r3, #84]	; 0x54
     dc6:	4b2a      	ldr	r3, [pc, #168]	; (e70 <_usb_d_dev_ep_enable+0x158>)
     dc8:	0492      	lsls	r2, r2, #18
     dca:	0912      	lsrs	r2, r2, #4
     dcc:	402b      	ands	r3, r5
     dce:	4313      	orrs	r3, r2
     dd0:	22b0      	movs	r2, #176	; 0xb0
     dd2:	6563      	str	r3, [r4, #84]	; 0x54
	bank->PCKSIZE.bit.BYTE_COUNT = count;
     dd4:	6d63      	ldr	r3, [r4, #84]	; 0x54
     dd6:	0b9b      	lsrs	r3, r3, #14
     dd8:	039b      	lsls	r3, r3, #14
     dda:	6563      	str	r3, [r4, #84]	; 0x54
     ddc:	4b20      	ldr	r3, [pc, #128]	; (e60 <_usb_d_dev_ep_enable+0x148>)
     dde:	18c3      	adds	r3, r0, r3
     de0:	715a      	strb	r2, [r3, #5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
     de2:	3aa0      	subs	r2, #160	; 0xa0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
     de4:	7199      	strb	r1, [r3, #6]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
     de6:	729a      	strb	r2, [r3, #10]
	return USB_OK;
     de8:	9801      	ldr	r0, [sp, #4]
     dea:	e036      	b.n	e5a <_usb_d_dev_ep_enable+0x142>
	} else if (dir) {
     dec:	2f00      	cmp	r7, #0
     dee:	d017      	beq.n	e20 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
     df0:	2070      	movs	r0, #112	; 0x70
     df2:	001f      	movs	r7, r3
     df4:	4007      	ands	r7, r0
     df6:	d12e      	bne.n	e56 <_usb_d_dev_ep_enable+0x13e>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
     df8:	0112      	lsls	r2, r2, #4
     dfa:	4002      	ands	r2, r0
     dfc:	4313      	orrs	r3, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
     dfe:	7073      	strb	r3, [r6, #1]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
     e00:	8a2d      	ldrh	r5, [r5, #16]
     e02:	4b19      	ldr	r3, [pc, #100]	; (e68 <_usb_d_dev_ep_enable+0x150>)
     e04:	0028      	movs	r0, r5
     e06:	4798      	blx	r3
     e08:	23e0      	movs	r3, #224	; 0xe0
     e0a:	0700      	lsls	r0, r0, #28
     e0c:	05db      	lsls	r3, r3, #23
     e0e:	4018      	ands	r0, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
     e10:	2380      	movs	r3, #128	; 0x80
     e12:	04ad      	lsls	r5, r5, #18
     e14:	0cad      	lsrs	r5, r5, #18
     e16:	4305      	orrs	r5, r0
     e18:	6165      	str	r5, [r4, #20]
     e1a:	7173      	strb	r3, [r6, #5]
	bank->STATUS_BK.reg     = 0;
     e1c:	76a7      	strb	r7, [r4, #26]
     e1e:	e016      	b.n	e4e <_usb_d_dev_ep_enable+0x136>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
     e20:	4018      	ands	r0, r3
     e22:	1e07      	subs	r7, r0, #0
     e24:	d117      	bne.n	e56 <_usb_d_dev_ep_enable+0x13e>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
     e26:	0752      	lsls	r2, r2, #29
     e28:	0f52      	lsrs	r2, r2, #29
     e2a:	431a      	orrs	r2, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
     e2c:	7072      	strb	r2, [r6, #1]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
     e2e:	8a2d      	ldrh	r5, [r5, #16]
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
     e30:	4b0d      	ldr	r3, [pc, #52]	; (e68 <_usb_d_dev_ep_enable+0x150>)
     e32:	0028      	movs	r0, r5
     e34:	4798      	blx	r3
     e36:	4b0d      	ldr	r3, [pc, #52]	; (e6c <_usb_d_dev_ep_enable+0x154>)
     e38:	03ad      	lsls	r5, r5, #14
     e3a:	401d      	ands	r5, r3
     e3c:	23e0      	movs	r3, #224	; 0xe0
     e3e:	0700      	lsls	r0, r0, #28
     e40:	05db      	lsls	r3, r3, #23
     e42:	4018      	ands	r0, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
     e44:	2340      	movs	r3, #64	; 0x40
     e46:	4328      	orrs	r0, r5
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
     e48:	6060      	str	r0, [r4, #4]
     e4a:	71b3      	strb	r3, [r6, #6]
	bank->STATUS_BK.reg     = 0;
     e4c:	72a7      	strb	r7, [r4, #10]
	return USB_OK;
     e4e:	0038      	movs	r0, r7
     e50:	e003      	b.n	e5a <_usb_d_dev_ep_enable+0x142>
		return -USB_ERR_PARAM;
     e52:	2012      	movs	r0, #18
     e54:	e000      	b.n	e58 <_usb_d_dev_ep_enable+0x140>
			return -USB_ERR_REDO;
     e56:	2014      	movs	r0, #20
     e58:	4240      	negs	r0, r0
}
     e5a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     e5c:	000004bd 	.word	0x000004bd
     e60:	410050ff 	.word	0x410050ff
     e64:	200000a8 	.word	0x200000a8
     e68:	00000a89 	.word	0x00000a89
     e6c:	0fffc000 	.word	0x0fffc000
     e70:	f0003fff 	.word	0xf0003fff

00000e74 <_usb_d_dev_ep_stall>:
{
     e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
     e76:	0007      	movs	r7, r0
     e78:	250f      	movs	r5, #15
	bool                  dir = USB_EP_GET_DIR(ep);
     e7a:	09c4      	lsrs	r4, r0, #7
	uint8_t               epn = USB_EP_GET_N(ep);
     e7c:	402f      	ands	r7, r5
{
     e7e:	000e      	movs	r6, r1
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
     e80:	0038      	movs	r0, r7
     e82:	0021      	movs	r1, r4
     e84:	4b2b      	ldr	r3, [pc, #172]	; (f34 <_usb_d_dev_ep_stall+0xc0>)
     e86:	4798      	blx	r3
	if (epn > CONF_USB_D_MAX_EP_N) {
     e88:	2f02      	cmp	r7, #2
     e8a:	d84f      	bhi.n	f2c <_usb_d_dev_ep_stall+0xb8>
	if (USB_EP_STALL_SET == ctrl) {
     e8c:	2e01      	cmp	r6, #1
     e8e:	d114      	bne.n	eba <_usb_d_dev_ep_stall+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
     e90:	2210      	movs	r2, #16
     e92:	40a2      	lsls	r2, r4
     e94:	7c83      	ldrb	r3, [r0, #18]
     e96:	4928      	ldr	r1, [pc, #160]	; (f38 <_usb_d_dev_ep_stall+0xc4>)
     e98:	401d      	ands	r5, r3
     e9a:	016b      	lsls	r3, r5, #5
     e9c:	b2d2      	uxtb	r2, r2
     e9e:	185b      	adds	r3, r3, r1
     ea0:	715a      	strb	r2, [r3, #5]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
     ea2:	2320      	movs	r3, #32
     ea4:	40a3      	lsls	r3, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
     ea6:	4a25      	ldr	r2, [pc, #148]	; (f3c <_usb_d_dev_ep_stall+0xc8>)
     ea8:	016d      	lsls	r5, r5, #5
     eaa:	18ad      	adds	r5, r5, r2
	ept->flags.bits.is_stalled = 1;
     eac:	2208      	movs	r2, #8
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
     eae:	b2db      	uxtb	r3, r3
     eb0:	72ab      	strb	r3, [r5, #10]
	ept->flags.bits.is_stalled = 1;
     eb2:	7cc3      	ldrb	r3, [r0, #19]
     eb4:	4313      	orrs	r3, r2
     eb6:	74c3      	strb	r3, [r0, #19]
     eb8:	e02b      	b.n	f12 <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
     eba:	7c83      	ldrb	r3, [r0, #18]
	} else if (USB_EP_STALL_CLR == ctrl) {
     ebc:	2e00      	cmp	r6, #0
     ebe:	d12a      	bne.n	f16 <_usb_d_dev_ep_stall+0xa2>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
     ec0:	402b      	ands	r3, r5
     ec2:	4a1f      	ldr	r2, [pc, #124]	; (f40 <_usb_d_dev_ep_stall+0xcc>)
     ec4:	015b      	lsls	r3, r3, #5
     ec6:	1899      	adds	r1, r3, r2
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
     ec8:	4a1c      	ldr	r2, [pc, #112]	; (f3c <_usb_d_dev_ep_stall+0xc8>)
     eca:	189b      	adds	r3, r3, r2
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
     ecc:	2210      	movs	r2, #16
     ece:	40a2      	lsls	r2, r4
     ed0:	79dd      	ldrb	r5, [r3, #7]
	if (!is_stalled) {
     ed2:	422a      	tst	r2, r5
     ed4:	d01d      	beq.n	f12 <_usb_d_dev_ep_stall+0x9e>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
     ed6:	b2d2      	uxtb	r2, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
     ed8:	715a      	strb	r2, [r3, #5]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
     eda:	2220      	movs	r2, #32
     edc:	40a2      	lsls	r2, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
     ede:	b2d5      	uxtb	r5, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     ee0:	725d      	strb	r5, [r3, #9]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
     ee2:	7a1e      	ldrb	r6, [r3, #8]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
     ee4:	4232      	tst	r2, r6
     ee6:	d004      	beq.n	ef2 <_usb_d_dev_ep_stall+0x7e>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
     ee8:	2201      	movs	r2, #1
     eea:	40a2      	lsls	r2, r4
     eec:	b2d2      	uxtb	r2, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     eee:	721d      	strb	r5, [r3, #8]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
     ef0:	715a      	strb	r2, [r3, #5]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
     ef2:	2307      	movs	r3, #7
     ef4:	7cc2      	ldrb	r2, [r0, #19]
     ef6:	4013      	ands	r3, r2
     ef8:	2b01      	cmp	r3, #1
     efa:	d107      	bne.n	f0c <_usb_d_dev_ep_stall+0x98>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
     efc:	31ff      	adds	r1, #255	; 0xff
     efe:	79c9      	ldrb	r1, [r1, #7]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
     f00:	332f      	adds	r3, #47	; 0x2f
     f02:	400b      	ands	r3, r1
     f04:	d105      	bne.n	f12 <_usb_d_dev_ep_stall+0x9e>
			ept->flags.bits.is_stalled = 0;
     f06:	2108      	movs	r1, #8
     f08:	438a      	bics	r2, r1
     f0a:	e001      	b.n	f10 <_usb_d_dev_ep_stall+0x9c>
		ept->flags.bits.is_stalled = 0;
     f0c:	2308      	movs	r3, #8
     f0e:	439a      	bics	r2, r3
     f10:	74c2      	strb	r2, [r0, #19]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
     f12:	2000      	movs	r0, #0
     f14:	e00c      	b.n	f30 <_usb_d_dev_ep_stall+0xbc>
	return _usbd_ep_is_stalled(epn, dir);
     f16:	2010      	movs	r0, #16
     f18:	40a0      	lsls	r0, r4
     f1a:	401d      	ands	r5, r3
     f1c:	4b06      	ldr	r3, [pc, #24]	; (f38 <_usb_d_dev_ep_stall+0xc4>)
     f1e:	016d      	lsls	r5, r5, #5
     f20:	18ed      	adds	r5, r5, r3
     f22:	79ab      	ldrb	r3, [r5, #6]
     f24:	4018      	ands	r0, r3
     f26:	1e43      	subs	r3, r0, #1
     f28:	4198      	sbcs	r0, r3
     f2a:	e001      	b.n	f30 <_usb_d_dev_ep_stall+0xbc>
		return -USB_ERR_PARAM;
     f2c:	2012      	movs	r0, #18
     f2e:	4240      	negs	r0, r0
}
     f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f32:	46c0      	nop			; (mov r8, r8)
     f34:	000004bd 	.word	0x000004bd
     f38:	41005100 	.word	0x41005100
     f3c:	410050ff 	.word	0x410050ff
     f40:	41005000 	.word	0x41005000

00000f44 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
     f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t            epn   = USB_EP_GET_N(ep);
     f46:	230f      	movs	r3, #15
     f48:	4018      	ands	r0, r3
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
     f4a:	4b11      	ldr	r3, [pc, #68]	; (f90 <_usb_d_dev_ep_read_req+0x4c>)
     f4c:	0144      	lsls	r4, r0, #5
     f4e:	3350      	adds	r3, #80	; 0x50
     f50:	191b      	adds	r3, r3, r4
{
     f52:	000f      	movs	r7, r1
	uint32_t           addr  = bank[0].ADDR.reg;
     f54:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
     f56:	685d      	ldr	r5, [r3, #4]
     f58:	04ad      	lsls	r5, r5, #18
     f5a:	0cad      	lsrs	r5, r5, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
     f5c:	2802      	cmp	r0, #2
     f5e:	d812      	bhi.n	f86 <_usb_d_dev_ep_read_req+0x42>
     f60:	2f00      	cmp	r7, #0
     f62:	d010      	beq.n	f86 <_usb_d_dev_ep_read_req+0x42>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
     f64:	4b0b      	ldr	r3, [pc, #44]	; (f94 <_usb_d_dev_ep_read_req+0x50>)
     f66:	18e4      	adds	r4, r4, r3
     f68:	7863      	ldrb	r3, [r4, #1]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
     f6a:	2b11      	cmp	r3, #17
     f6c:	d10d      	bne.n	f8a <_usb_d_dev_ep_read_req+0x46>
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
     f6e:	2610      	movs	r6, #16
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
     f70:	7a23      	ldrb	r3, [r4, #8]
		return ERR_NONE;
     f72:	2000      	movs	r0, #0
	if (!_usbd_ep_is_setup(epn)) {
     f74:	4233      	tst	r3, r6
     f76:	d00a      	beq.n	f8e <_usb_d_dev_ep_read_req+0x4a>
	}
	memcpy(req_buf, (void *)addr, 8);
     f78:	2208      	movs	r2, #8
     f7a:	0038      	movs	r0, r7
     f7c:	4b06      	ldr	r3, [pc, #24]	; (f98 <_usb_d_dev_ep_read_req+0x54>)
     f7e:	4798      	blx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     f80:	7226      	strb	r6, [r4, #8]
	_usbd_ep_ack_setup(epn);

	return bytes;
     f82:	0028      	movs	r0, r5
     f84:	e003      	b.n	f8e <_usb_d_dev_ep_read_req+0x4a>
		return -USB_ERR_PARAM;
     f86:	2012      	movs	r0, #18
     f88:	e000      	b.n	f8c <_usb_d_dev_ep_read_req+0x48>
		return -USB_ERR_FUNC;
     f8a:	2013      	movs	r0, #19
     f8c:	4240      	negs	r0, r0
}
     f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f90:	200000a8 	.word	0x200000a8
     f94:	410050ff 	.word	0x410050ff
     f98:	00002625 	.word	0x00002625

00000f9c <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
     f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
     f9e:	237f      	movs	r3, #127	; 0x7f
	uint8_t               epn = USB_EP_GET_N(trans->ep);
     fa0:	250f      	movs	r5, #15
     fa2:	7a06      	ldrb	r6, [r0, #8]
{
     fa4:	b087      	sub	sp, #28
	uint8_t               epn = USB_EP_GET_N(trans->ep);
     fa6:	4035      	ands	r5, r6
     fa8:	439e      	bics	r6, r3
	bool                  dir = USB_EP_GET_DIR(trans->ep);
     faa:	0033      	movs	r3, r6
     fac:	1e5a      	subs	r2, r3, #1
     fae:	4193      	sbcs	r3, r2
     fb0:	b2db      	uxtb	r3, r3
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
     fb2:	0019      	movs	r1, r3
	bool                  dir = USB_EP_GET_DIR(trans->ep);
     fb4:	9302      	str	r3, [sp, #8]
{
     fb6:	0007      	movs	r7, r0
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
     fb8:	4b3b      	ldr	r3, [pc, #236]	; (10a8 <_usb_d_dev_ep_trans+0x10c>)
     fba:	0028      	movs	r0, r5
     fbc:	4798      	blx	r3

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
     fbe:	493b      	ldr	r1, [pc, #236]	; (10ac <_usb_d_dev_ep_trans+0x110>)
     fc0:	8a02      	ldrh	r2, [r0, #16]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
     fc2:	0004      	movs	r4, r0
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
     fc4:	0013      	movs	r3, r2
     fc6:	428a      	cmp	r2, r1
     fc8:	d001      	beq.n	fce <_usb_d_dev_ep_trans+0x32>
     fca:	1e53      	subs	r3, r2, #1
     fcc:	b29b      	uxth	r3, r3
	bool     size_n_aligned = (trans->size & size_mask);
     fce:	6879      	ldr	r1, [r7, #4]
     fd0:	400b      	ands	r3, r1
     fd2:	9303      	str	r3, [sp, #12]

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
     fd4:	2d02      	cmp	r5, #2
     fd6:	d863      	bhi.n	10a0 <_usb_d_dev_ep_trans+0x104>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
     fd8:	683d      	ldr	r5, [r7, #0]
     fda:	4b35      	ldr	r3, [pc, #212]	; (10b0 <_usb_d_dev_ep_trans+0x114>)
     fdc:	429d      	cmp	r5, r3
     fde:	d90a      	bls.n	ff6 <_usb_d_dev_ep_trans+0x5a>
     fe0:	4834      	ldr	r0, [pc, #208]	; (10b4 <_usb_d_dev_ep_trans+0x118>)
     fe2:	194b      	adds	r3, r1, r5
     fe4:	4283      	cmp	r3, r0
     fe6:	d806      	bhi.n	ff6 <_usb_d_dev_ep_trans+0x5a>
     fe8:	2303      	movs	r3, #3
     fea:	401d      	ands	r5, r3
     fec:	d103      	bne.n	ff6 <_usb_d_dev_ep_trans+0x5a>
	    || (!dir && (trans->size < ept->size))) {
     fee:	2e00      	cmp	r6, #0
     ff0:	d10d      	bne.n	100e <_usb_d_dev_ep_trans+0x72>
     ff2:	4291      	cmp	r1, r2
     ff4:	d204      	bcs.n	1000 <_usb_d_dev_ep_trans+0x64>
		if (!ept->cache) {
     ff6:	68e3      	ldr	r3, [r4, #12]
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
     ff8:	2501      	movs	r5, #1
		if (!ept->cache) {
     ffa:	2b00      	cmp	r3, #0
     ffc:	d107      	bne.n	100e <_usb_d_dev_ep_trans+0x72>
     ffe:	e04d      	b.n	109c <_usb_d_dev_ep_trans+0x100>
	}
	if (!dir && size_n_aligned) {
    1000:	9b03      	ldr	r3, [sp, #12]
    1002:	2b00      	cmp	r3, #0
    1004:	d002      	beq.n	100c <_usb_d_dev_ep_trans+0x70>
		if (!ept->cache) {
    1006:	68e3      	ldr	r3, [r4, #12]
    1008:	2b00      	cmp	r3, #0
    100a:	d049      	beq.n	10a0 <_usb_d_dev_ep_trans+0x104>
	bool use_cache = false;
    100c:	0035      	movs	r5, r6
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    100e:	7ce3      	ldrb	r3, [r4, #19]
		return USB_HALTED;
    1010:	2002      	movs	r0, #2
	if (ept->flags.bits.is_stalled) {
    1012:	071b      	lsls	r3, r3, #28
    1014:	d446      	bmi.n	10a4 <_usb_d_dev_ep_trans+0x108>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    1016:	a805      	add	r0, sp, #20
    1018:	4b27      	ldr	r3, [pc, #156]	; (10b8 <_usb_d_dev_ep_trans+0x11c>)
    101a:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    101c:	7ce3      	ldrb	r3, [r4, #19]
    101e:	2140      	movs	r1, #64	; 0x40
    1020:	001a      	movs	r2, r3
    1022:	400a      	ands	r2, r1
    1024:	9201      	str	r2, [sp, #4]
    1026:	9801      	ldr	r0, [sp, #4]
    1028:	4a24      	ldr	r2, [pc, #144]	; (10bc <_usb_d_dev_ep_trans+0x120>)
    102a:	2800      	cmp	r0, #0
    102c:	d003      	beq.n	1036 <_usb_d_dev_ep_trans+0x9a>
		atomic_leave_critical(&flags);
    102e:	a805      	add	r0, sp, #20
    1030:	4790      	blx	r2
		return USB_BUSY;
    1032:	2001      	movs	r0, #1
    1034:	e036      	b.n	10a4 <_usb_d_dev_ep_trans+0x108>
	}
	ept->flags.bits.is_busy = 1;
    1036:	430b      	orrs	r3, r1
    1038:	74e3      	strb	r3, [r4, #19]
	atomic_leave_critical(&flags);
    103a:	a805      	add	r0, sp, #20
    103c:	4790      	blx	r2

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    103e:	683b      	ldr	r3, [r7, #0]
	ept->trans_size  = trans->size;
	ept->trans_count = 0;

	ept->flags.bits.dir       = dir;
    1040:	7ce2      	ldrb	r2, [r4, #19]
	ept->trans_buf   = trans->buf;
    1042:	6023      	str	r3, [r4, #0]
	ept->trans_size  = trans->size;
    1044:	687b      	ldr	r3, [r7, #4]
    1046:	6063      	str	r3, [r4, #4]
	ept->trans_count = 0;
    1048:	9b01      	ldr	r3, [sp, #4]
    104a:	60a3      	str	r3, [r4, #8]
	ept->flags.bits.dir       = dir;
    104c:	9b02      	ldr	r3, [sp, #8]
    104e:	01d9      	lsls	r1, r3, #7
    1050:	237f      	movs	r3, #127	; 0x7f
    1052:	401a      	ands	r2, r3
	ept->flags.bits.use_cache = use_cache;
    1054:	430a      	orrs	r2, r1
    1056:	2120      	movs	r1, #32
    1058:	3b7e      	subs	r3, #126	; 0x7e
    105a:	401d      	ands	r5, r3
    105c:	438a      	bics	r2, r1
    105e:	016d      	lsls	r5, r5, #5
    1060:	432a      	orrs	r2, r5
    1062:	74e2      	strb	r2, [r4, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    1064:	7a79      	ldrb	r1, [r7, #9]
    1066:	9a01      	ldr	r2, [sp, #4]
    1068:	2900      	cmp	r1, #0
    106a:	d002      	beq.n	1072 <_usb_d_dev_ep_trans+0xd6>
    106c:	9a03      	ldr	r2, [sp, #12]
    106e:	4251      	negs	r1, r2
    1070:	414a      	adcs	r2, r1
    1072:	2110      	movs	r1, #16
    1074:	4013      	ands	r3, r2
    1076:	011a      	lsls	r2, r3, #4
    1078:	7ce3      	ldrb	r3, [r4, #19]
    107a:	438b      	bics	r3, r1
    107c:	4313      	orrs	r3, r2
    107e:	74e3      	strb	r3, [r4, #19]

	if (dir) {
    1080:	2e00      	cmp	r6, #0
    1082:	d005      	beq.n	1090 <_usb_d_dev_ep_trans+0xf4>
		_usb_d_dev_in_next(ept, false);
    1084:	0020      	movs	r0, r4
    1086:	2100      	movs	r1, #0
    1088:	4b0d      	ldr	r3, [pc, #52]	; (10c0 <_usb_d_dev_ep_trans+0x124>)
    108a:	4798      	blx	r3
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
    108c:	2000      	movs	r0, #0
    108e:	e009      	b.n	10a4 <_usb_d_dev_ep_trans+0x108>
		_usb_d_dev_out_next(ept, false);
    1090:	0020      	movs	r0, r4
    1092:	0031      	movs	r1, r6
    1094:	4b0b      	ldr	r3, [pc, #44]	; (10c4 <_usb_d_dev_ep_trans+0x128>)
    1096:	4798      	blx	r3
	return ERR_NONE;
    1098:	0030      	movs	r0, r6
    109a:	e003      	b.n	10a4 <_usb_d_dev_ep_trans+0x108>
			return -USB_ERR_FUNC;
    109c:	2013      	movs	r0, #19
    109e:	e000      	b.n	10a2 <_usb_d_dev_ep_trans+0x106>
		return -USB_ERR_PARAM;
    10a0:	2012      	movs	r0, #18
    10a2:	4240      	negs	r0, r0
}
    10a4:	b007      	add	sp, #28
    10a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10a8:	000004bd 	.word	0x000004bd
    10ac:	000003ff 	.word	0x000003ff
    10b0:	1fffffff 	.word	0x1fffffff
    10b4:	20007fff 	.word	0x20007fff
    10b8:	00002599 	.word	0x00002599
    10bc:	000025a7 	.word	0x000025a7
    10c0:	00000759 	.word	0x00000759
    10c4:	000008a9 	.word	0x000008a9

000010c8 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    10c8:	4b06      	ldr	r3, [pc, #24]	; (10e4 <_usb_d_dev_register_callback+0x1c>)
    10ca:	2900      	cmp	r1, #0
    10cc:	d000      	beq.n	10d0 <_usb_d_dev_register_callback+0x8>
    10ce:	000b      	movs	r3, r1
	if (type == USB_D_CB_EVENT) {
    10d0:	2801      	cmp	r0, #1
    10d2:	d102      	bne.n	10da <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    10d4:	4a04      	ldr	r2, [pc, #16]	; (10e8 <_usb_d_dev_register_callback+0x20>)
    10d6:	6053      	str	r3, [r2, #4]
    10d8:	e003      	b.n	10e2 <_usb_d_dev_register_callback+0x1a>
	} else if (type == USB_D_CB_SOF) {
    10da:	2800      	cmp	r0, #0
    10dc:	d101      	bne.n	10e2 <_usb_d_dev_register_callback+0x1a>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    10de:	4a02      	ldr	r2, [pc, #8]	; (10e8 <_usb_d_dev_register_callback+0x20>)
    10e0:	6013      	str	r3, [r2, #0]
	}
}
    10e2:	4770      	bx	lr
    10e4:	00000495 	.word	0x00000495
    10e8:	200000a8 	.word	0x200000a8

000010ec <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    10ec:	4b09      	ldr	r3, [pc, #36]	; (1114 <_usb_d_dev_register_ep_callback+0x28>)
    10ee:	2900      	cmp	r1, #0
    10f0:	d000      	beq.n	10f4 <_usb_d_dev_register_ep_callback+0x8>
    10f2:	000b      	movs	r3, r1
	if (type == USB_D_DEV_EP_CB_SETUP) {
    10f4:	2800      	cmp	r0, #0
    10f6:	d102      	bne.n	10fe <_usb_d_dev_register_ep_callback+0x12>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    10f8:	4a07      	ldr	r2, [pc, #28]	; (1118 <_usb_d_dev_register_ep_callback+0x2c>)
    10fa:	6093      	str	r3, [r2, #8]
    10fc:	e008      	b.n	1110 <_usb_d_dev_register_ep_callback+0x24>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    10fe:	2801      	cmp	r0, #1
    1100:	d102      	bne.n	1108 <_usb_d_dev_register_ep_callback+0x1c>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    1102:	4a05      	ldr	r2, [pc, #20]	; (1118 <_usb_d_dev_register_ep_callback+0x2c>)
    1104:	60d3      	str	r3, [r2, #12]
    1106:	e003      	b.n	1110 <_usb_d_dev_register_ep_callback+0x24>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    1108:	2802      	cmp	r0, #2
    110a:	d101      	bne.n	1110 <_usb_d_dev_register_ep_callback+0x24>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    110c:	4a02      	ldr	r2, [pc, #8]	; (1118 <_usb_d_dev_register_ep_callback+0x2c>)
    110e:	6113      	str	r3, [r2, #16]
	}
}
    1110:	4770      	bx	lr
    1112:	46c0      	nop			; (mov r8, r8)
    1114:	00000495 	.word	0x00000495
    1118:	200000a8 	.word	0x200000a8

0000111c <USB_Handler>:

/**
* \brief USB interrupt handler
*/
void USB_Handler(void)
{
    111c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    111e:	4b69      	ldr	r3, [pc, #420]	; (12c4 <USB_Handler+0x1a8>)
    1120:	4d69      	ldr	r5, [pc, #420]	; (12c8 <USB_Handler+0x1ac>)
    1122:	8c1a      	ldrh	r2, [r3, #32]
    1124:	b292      	uxth	r2, r2
    1126:	9201      	str	r2, [sp, #4]
	if (0 == epint) {
    1128:	2a00      	cmp	r2, #0
    112a:	d156      	bne.n	11da <USB_Handler+0xbe>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    112c:	8b9a      	ldrh	r2, [r3, #28]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    112e:	8b1f      	ldrh	r7, [r3, #24]
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    1130:	2004      	movs	r0, #4
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    1132:	4017      	ands	r7, r2
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    1134:	003a      	movs	r2, r7
    1136:	4002      	ands	r2, r0
    1138:	d003      	beq.n	1142 <USB_Handler+0x26>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    113a:	8398      	strh	r0, [r3, #28]
	dev_inst.callbacks.sof();
    113c:	682b      	ldr	r3, [r5, #0]
    113e:	4798      	blx	r3
    1140:	e0be      	b.n	12c0 <USB_Handler+0x1a4>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    1142:	2180      	movs	r1, #128	; 0x80
    1144:	0089      	lsls	r1, r1, #2
    1146:	4039      	ands	r1, r7
    1148:	d01f      	beq.n	118a <USB_Handler+0x6e>
    114a:	4960      	ldr	r1, [pc, #384]	; (12cc <USB_Handler+0x1b0>)
    114c:	8399      	strh	r1, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    114e:	8299      	strh	r1, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1150:	3992      	subs	r1, #146	; 0x92
    1152:	39ff      	subs	r1, #255	; 0xff
    1154:	8319      	strh	r1, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    1156:	0029      	movs	r1, r5
    1158:	3150      	adds	r1, #80	; 0x50
    115a:	890b      	ldrh	r3, [r1, #8]
    115c:	071b      	lsls	r3, r3, #28
    115e:	0f1b      	lsrs	r3, r3, #28
    1160:	2b03      	cmp	r3, #3
    1162:	d006      	beq.n	1172 <USB_Handler+0x56>
    1164:	8d0b      	ldrh	r3, [r1, #40]	; 0x28
	uint32_t lpm_variable = 0;
    1166:	0011      	movs	r1, r2
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    1168:	071b      	lsls	r3, r3, #28
    116a:	0f1b      	lsrs	r3, r3, #28
    116c:	2b03      	cmp	r3, #3
    116e:	d109      	bne.n	1184 <USB_Handler+0x68>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    1170:	2201      	movs	r2, #1
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    1172:	002b      	movs	r3, r5
    1174:	0152      	lsls	r2, r2, #5
    1176:	3350      	adds	r3, #80	; 0x50
    1178:	189b      	adds	r3, r3, r2
			bank->EXTREG.reg = 0;
    117a:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    117c:	8919      	ldrh	r1, [r3, #8]
			bank->EXTREG.reg = 0;
    117e:	811a      	strh	r2, [r3, #8]
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    1180:	0449      	lsls	r1, r1, #17
    1182:	0d49      	lsrs	r1, r1, #21
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    1184:	686b      	ldr	r3, [r5, #4]
    1186:	2003      	movs	r0, #3
    1188:	e031      	b.n	11ee <USB_Handler+0xd2>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    118a:	2280      	movs	r2, #128	; 0x80
    118c:	003e      	movs	r6, r7
    118e:	4016      	ands	r6, r2
    1190:	d003      	beq.n	119a <USB_Handler+0x7e>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1192:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    1194:	686b      	ldr	r3, [r5, #4]
    1196:	2005      	movs	r0, #5
    1198:	e029      	b.n	11ee <USB_Handler+0xd2>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    119a:	2270      	movs	r2, #112	; 0x70
    119c:	003c      	movs	r4, r7
    119e:	4014      	ands	r4, r2
    11a0:	d009      	beq.n	11b6 <USB_Handler+0x9a>
    11a2:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    11a4:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    11a6:	4a49      	ldr	r2, [pc, #292]	; (12cc <USB_Handler+0x1b0>)
    11a8:	831a      	strh	r2, [r3, #24]
		_usb_d_dev_wait_dfll_rdy();
    11aa:	4b49      	ldr	r3, [pc, #292]	; (12d0 <USB_Handler+0x1b4>)
    11ac:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    11ae:	686b      	ldr	r3, [r5, #4]
    11b0:	0031      	movs	r1, r6
    11b2:	2002      	movs	r0, #2
    11b4:	e01b      	b.n	11ee <USB_Handler+0xd2>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    11b6:	2608      	movs	r6, #8
    11b8:	0039      	movs	r1, r7
    11ba:	4031      	ands	r1, r6
    11bc:	d00b      	beq.n	11d6 <USB_Handler+0xba>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    11be:	4945      	ldr	r1, [pc, #276]	; (12d4 <USB_Handler+0x1b8>)
    11c0:	704c      	strb	r4, [r1, #1]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    11c2:	839e      	strh	r6, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    11c4:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    11c6:	4a41      	ldr	r2, [pc, #260]	; (12cc <USB_Handler+0x1b0>)
    11c8:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    11ca:	4b43      	ldr	r3, [pc, #268]	; (12d8 <USB_Handler+0x1bc>)
    11cc:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    11ce:	686b      	ldr	r3, [r5, #4]
    11d0:	0021      	movs	r1, r4
    11d2:	2001      	movs	r0, #1
    11d4:	e00b      	b.n	11ee <USB_Handler+0xd2>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    11d6:	07fc      	lsls	r4, r7, #31
    11d8:	d404      	bmi.n	11e4 <USB_Handler+0xc8>
    11da:	002c      	movs	r4, r5
	uint32_t lpm_variable = 0;
    11dc:	2600      	movs	r6, #0
    11de:	3414      	adds	r4, #20
	if (!(epint & (1u << epn))) {
    11e0:	2701      	movs	r7, #1
    11e2:	e011      	b.n	1208 <USB_Handler+0xec>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    11e4:	4c39      	ldr	r4, [pc, #228]	; (12cc <USB_Handler+0x1b0>)
    11e6:	839c      	strh	r4, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    11e8:	829c      	strh	r4, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    11ea:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    11ec:	686b      	ldr	r3, [r5, #4]
    11ee:	4798      	blx	r3
    11f0:	e066      	b.n	12c0 <USB_Handler+0x1a4>
	if (!(epint & (1u << epn))) {
    11f2:	230f      	movs	r3, #15
    11f4:	401a      	ands	r2, r3
    11f6:	003b      	movs	r3, r7
    11f8:	4093      	lsls	r3, r2
    11fa:	9901      	ldr	r1, [sp, #4]
    11fc:	4219      	tst	r1, r3
    11fe:	d107      	bne.n	1210 <USB_Handler+0xf4>
    1200:	3601      	adds	r6, #1
    1202:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    1204:	2e03      	cmp	r6, #3
    1206:	d05b      	beq.n	12c0 <USB_Handler+0x1a4>
		if (ept->ep == 0xFF) {
    1208:	7ca2      	ldrb	r2, [r4, #18]
    120a:	2aff      	cmp	r2, #255	; 0xff
    120c:	d1f1      	bne.n	11f2 <USB_Handler+0xd6>
    120e:	e7f7      	b.n	1200 <USB_Handler+0xe4>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    1210:	4932      	ldr	r1, [pc, #200]	; (12dc <USB_Handler+0x1c0>)
    1212:	0153      	lsls	r3, r2, #5
    1214:	185b      	adds	r3, r3, r1
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    1216:	492f      	ldr	r1, [pc, #188]	; (12d4 <USB_Handler+0x1b8>)
    1218:	0152      	lsls	r2, r2, #5
    121a:	1852      	adds	r2, r2, r1
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    121c:	781b      	ldrb	r3, [r3, #0]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    121e:	7a92      	ldrb	r2, [r2, #10]
	flags &= mask;
    1220:	4013      	ands	r3, r2
	if (flags) {
    1222:	d0ed      	beq.n	1200 <USB_Handler+0xe4>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    1224:	2214      	movs	r2, #20
    1226:	2147      	movs	r1, #71	; 0x47
    1228:	4372      	muls	r2, r6
    122a:	18aa      	adds	r2, r5, r2
    122c:	3210      	adds	r2, #16
    122e:	7dd2      	ldrb	r2, [r2, #23]
    1230:	4011      	ands	r1, r2
    1232:	2901      	cmp	r1, #1
    1234:	d108      	bne.n	1248 <USB_Handler+0x12c>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1236:	06da      	lsls	r2, r3, #27
    1238:	d43e      	bmi.n	12b8 <USB_Handler+0x19c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    123a:	2240      	movs	r2, #64	; 0x40
    123c:	401a      	ands	r2, r3
    123e:	d123      	bne.n	1288 <USB_Handler+0x16c>
		_usb_d_dev_handle_stall(ept, 0);
    1240:	0011      	movs	r1, r2
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    1242:	069b      	lsls	r3, r3, #26
    1244:	d5dc      	bpl.n	1200 <USB_Handler+0xe4>
    1246:	e01f      	b.n	1288 <USB_Handler+0x16c>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    1248:	217f      	movs	r1, #127	; 0x7f
    124a:	0010      	movs	r0, r2
    124c:	4388      	bics	r0, r1
    124e:	4684      	mov	ip, r0
    1250:	d015      	beq.n	127e <USB_Handler+0x162>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    1252:	0659      	lsls	r1, r3, #25
    1254:	d501      	bpl.n	125a <USB_Handler+0x13e>
		_usb_d_dev_handle_stall(ept, 1);
    1256:	2101      	movs	r1, #1
    1258:	e016      	b.n	1288 <USB_Handler+0x16c>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    125a:	0719      	lsls	r1, r3, #28
    125c:	d501      	bpl.n	1262 <USB_Handler+0x146>
		_usb_d_dev_handle_trfail(ept, 1);
    125e:	2101      	movs	r1, #1
    1260:	e024      	b.n	12ac <USB_Handler+0x190>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    1262:	0799      	lsls	r1, r3, #30
    1264:	d503      	bpl.n	126e <USB_Handler+0x152>
		_usb_d_dev_in_next(ept, true);
    1266:	2101      	movs	r1, #1
    1268:	0020      	movs	r0, r4
    126a:	4b1d      	ldr	r3, [pc, #116]	; (12e0 <USB_Handler+0x1c4>)
    126c:	e020      	b.n	12b0 <USB_Handler+0x194>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    126e:	2107      	movs	r1, #7
    1270:	400a      	ands	r2, r1
    1272:	2a01      	cmp	r2, #1
    1274:	d1c4      	bne.n	1200 <USB_Handler+0xe4>
			_usb_d_dev_handle_trfail(ept, 0);
    1276:	2100      	movs	r1, #0
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    1278:	075a      	lsls	r2, r3, #29
    127a:	d51b      	bpl.n	12b4 <USB_Handler+0x198>
    127c:	e016      	b.n	12ac <USB_Handler+0x190>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    127e:	2020      	movs	r0, #32
    1280:	0001      	movs	r1, r0
    1282:	4019      	ands	r1, r3
    1284:	d003      	beq.n	128e <USB_Handler+0x172>
		_usb_d_dev_handle_stall(ept, 0);
    1286:	4661      	mov	r1, ip
    1288:	0020      	movs	r0, r4
    128a:	4b16      	ldr	r3, [pc, #88]	; (12e4 <USB_Handler+0x1c8>)
    128c:	e010      	b.n	12b0 <USB_Handler+0x194>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    128e:	0758      	lsls	r0, r3, #29
    1290:	d40c      	bmi.n	12ac <USB_Handler+0x190>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    1292:	423b      	tst	r3, r7
    1294:	d003      	beq.n	129e <USB_Handler+0x182>
		_usb_d_dev_out_next(ept, true);
    1296:	2101      	movs	r1, #1
    1298:	0020      	movs	r0, r4
    129a:	4b13      	ldr	r3, [pc, #76]	; (12e8 <USB_Handler+0x1cc>)
    129c:	e008      	b.n	12b0 <USB_Handler+0x194>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    129e:	2107      	movs	r1, #7
    12a0:	400a      	ands	r2, r1
    12a2:	2a01      	cmp	r2, #1
    12a4:	d1ac      	bne.n	1200 <USB_Handler+0xe4>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    12a6:	071a      	lsls	r2, r3, #28
    12a8:	d504      	bpl.n	12b4 <USB_Handler+0x198>
			_usb_d_dev_handle_trfail(ept, 1);
    12aa:	3906      	subs	r1, #6
    12ac:	0020      	movs	r0, r4
    12ae:	4b0f      	ldr	r3, [pc, #60]	; (12ec <USB_Handler+0x1d0>)
    12b0:	4798      	blx	r3
    12b2:	e7a5      	b.n	1200 <USB_Handler+0xe4>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    12b4:	06db      	lsls	r3, r3, #27
    12b6:	d5a3      	bpl.n	1200 <USB_Handler+0xe4>
			_usb_d_dev_handle_setup(ept);
    12b8:	0020      	movs	r0, r4
    12ba:	4b0d      	ldr	r3, [pc, #52]	; (12f0 <USB_Handler+0x1d4>)
    12bc:	4798      	blx	r3
    12be:	e79f      	b.n	1200 <USB_Handler+0xe4>

	_usb_d_dev_handler();
}
    12c0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    12c2:	46c0      	nop			; (mov r8, r8)
    12c4:	41005000 	.word	0x41005000
    12c8:	200000a8 	.word	0x200000a8
    12cc:	00000201 	.word	0x00000201
    12d0:	00000499 	.word	0x00000499
    12d4:	410050ff 	.word	0x410050ff
    12d8:	0000071d 	.word	0x0000071d
    12dc:	41005107 	.word	0x41005107
    12e0:	00000759 	.word	0x00000759
    12e4:	00000551 	.word	0x00000551
    12e8:	000008a9 	.word	0x000008a9
    12ec:	00000619 	.word	0x00000619
    12f0:	000004d9 	.word	0x000004d9

000012f4 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    12f4:	4b06      	ldr	r3, [pc, #24]	; (1310 <_pm_init+0x1c>)
    12f6:	7a1a      	ldrb	r2, [r3, #8]
    12f8:	b2d2      	uxtb	r2, r2
    12fa:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    12fc:	7a5a      	ldrb	r2, [r3, #9]
    12fe:	b2d2      	uxtb	r2, r2
    1300:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    1302:	7a9a      	ldrb	r2, [r3, #10]
    1304:	b2d2      	uxtb	r2, r2
    1306:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    1308:	7ada      	ldrb	r2, [r3, #11]
    130a:	b2d2      	uxtb	r2, r2
    130c:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    130e:	4770      	bx	lr
    1310:	40000400 	.word	0x40000400

00001314 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1314:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    1316:	4b08      	ldr	r3, [pc, #32]	; (1338 <_init_chip+0x24>)
    1318:	685a      	ldr	r2, [r3, #4]
    131a:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    131c:	4b07      	ldr	r3, [pc, #28]	; (133c <_init_chip+0x28>)
    131e:	4798      	blx	r3
	_sysctrl_init_sources();
    1320:	4b07      	ldr	r3, [pc, #28]	; (1340 <_init_chip+0x2c>)
    1322:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    1324:	200a      	movs	r0, #10
    1326:	4c07      	ldr	r4, [pc, #28]	; (1344 <_init_chip+0x30>)
    1328:	47a0      	blx	r4
#endif
	_sysctrl_init_referenced_generators();
    132a:	4b07      	ldr	r3, [pc, #28]	; (1348 <_init_chip+0x34>)
    132c:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    132e:	200b      	movs	r0, #11
    1330:	4240      	negs	r0, r0
    1332:	47a0      	blx	r4
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    1334:	bd10      	pop	{r4, pc}
    1336:	46c0      	nop			; (mov r8, r8)
    1338:	41004000 	.word	0x41004000
    133c:	000012f5 	.word	0x000012f5
    1340:	000013e5 	.word	0x000013e5
    1344:	000014b5 	.word	0x000014b5
    1348:	00001441 	.word	0x00001441

0000134c <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    134c:	6800      	ldr	r0, [r0, #0]
    134e:	2800      	cmp	r0, #0
    1350:	d002      	beq.n	1358 <is_list_element+0xc>
		if (it == element) {
    1352:	4288      	cmp	r0, r1
    1354:	d1fa      	bne.n	134c <is_list_element>
			return true;
    1356:	2001      	movs	r0, #1
		}
	}

	return false;
}
    1358:	4770      	bx	lr
	...

0000135c <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    135c:	b570      	push	{r4, r5, r6, lr}
	struct list_element *it = list->head;

	ASSERT(!is_list_element(list, element));
    135e:	4b0c      	ldr	r3, [pc, #48]	; (1390 <list_insert_at_end+0x34>)
{
    1360:	0005      	movs	r5, r0
    1362:	000c      	movs	r4, r1
	struct list_element *it = list->head;
    1364:	6806      	ldr	r6, [r0, #0]
	ASSERT(!is_list_element(list, element));
    1366:	4798      	blx	r3
    1368:	2301      	movs	r3, #1
    136a:	4058      	eors	r0, r3
    136c:	b2c0      	uxtb	r0, r0
    136e:	4b09      	ldr	r3, [pc, #36]	; (1394 <list_insert_at_end+0x38>)
    1370:	2259      	movs	r2, #89	; 0x59
    1372:	4909      	ldr	r1, [pc, #36]	; (1398 <list_insert_at_end+0x3c>)
    1374:	4798      	blx	r3

	if (!list->head) {
    1376:	682b      	ldr	r3, [r5, #0]
    1378:	2b00      	cmp	r3, #0
    137a:	d101      	bne.n	1380 <list_insert_at_end+0x24>
		list->head                             = (struct list_element *)element;
    137c:	602c      	str	r4, [r5, #0]
    137e:	e005      	b.n	138c <list_insert_at_end+0x30>
		((struct list_element *)element)->next = NULL;
		return;
	}

	while (it->next) {
    1380:	6833      	ldr	r3, [r6, #0]
    1382:	2b00      	cmp	r3, #0
    1384:	d001      	beq.n	138a <list_insert_at_end+0x2e>
    1386:	001e      	movs	r6, r3
    1388:	e7fa      	b.n	1380 <list_insert_at_end+0x24>
		it = it->next;
	}
	it->next                               = (struct list_element *)element;
    138a:	6034      	str	r4, [r6, #0]
	((struct list_element *)element)->next = NULL;
    138c:	6023      	str	r3, [r4, #0]
}
    138e:	bd70      	pop	{r4, r5, r6, pc}
    1390:	0000134d 	.word	0x0000134d
    1394:	0000139d 	.word	0x0000139d
    1398:	00002770 	.word	0x00002770

0000139c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    139c:	2800      	cmp	r0, #0
    139e:	d100      	bne.n	13a2 <assert+0x6>
		__asm("BKPT #0");
    13a0:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    13a2:	4770      	bx	lr

000013a4 <cdc_device_acm_init>:
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    13a4:	4806      	ldr	r0, [pc, #24]	; (13c0 <cdc_device_acm_init+0x1c>)
{
    13a6:	b510      	push	{r4, lr}
	usbdc_init(ctrl_buffer);
    13a8:	4b06      	ldr	r3, [pc, #24]	; (13c4 <cdc_device_acm_init+0x20>)
    13aa:	3040      	adds	r0, #64	; 0x40
    13ac:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    13ae:	4b06      	ldr	r3, [pc, #24]	; (13c8 <cdc_device_acm_init+0x24>)
    13b0:	4798      	blx	r3

	usbdc_start(single_desc);
    13b2:	4b06      	ldr	r3, [pc, #24]	; (13cc <cdc_device_acm_init+0x28>)
    13b4:	4806      	ldr	r0, [pc, #24]	; (13d0 <cdc_device_acm_init+0x2c>)
    13b6:	4798      	blx	r3
	usbdc_attach();
    13b8:	4b06      	ldr	r3, [pc, #24]	; (13d4 <cdc_device_acm_init+0x30>)
    13ba:	4798      	blx	r3
}
    13bc:	bd10      	pop	{r4, pc}
    13be:	46c0      	nop			; (mov r8, r8)
    13c0:	20000218 	.word	0x20000218
    13c4:	00002401 	.word	0x00002401
    13c8:	00000349 	.word	0x00000349
    13cc:	00002479 	.word	0x00002479
    13d0:	20000008 	.word	0x20000008
    13d4:	000024ad 	.word	0x000024ad

000013d8 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    13d8:	b510      	push	{r4, lr}

	cdc_device_acm_init();
    13da:	4b01      	ldr	r3, [pc, #4]	; (13e0 <usb_init+0x8>)
    13dc:	4798      	blx	r3
}
    13de:	bd10      	pop	{r4, pc}
    13e0:	000013a5 	.word	0x000013a5

000013e4 <_sysctrl_init_sources>:
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    13e4:	4b13      	ldr	r3, [pc, #76]	; (1434 <_sysctrl_init_sources+0x50>)
#endif

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);

	hri_sysctrl_write_OSC8M_reg(hw,
    13e6:	4a14      	ldr	r2, [pc, #80]	; (1438 <_sysctrl_init_sources+0x54>)
    13e8:	6a18      	ldr	r0, [r3, #32]
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    13ea:	6a19      	ldr	r1, [r3, #32]
    13ec:	4002      	ands	r2, r0
    13ee:	2002      	movs	r0, #2
    13f0:	0f89      	lsrs	r1, r1, #30
    13f2:	0789      	lsls	r1, r1, #30
    13f4:	4301      	orrs	r1, r0
    13f6:	430a      	orrs	r2, r1
	((Sysctrl *)hw)->OSC8M.reg = data;
    13f8:	621a      	str	r2, [r3, #32]
	                                | (CONF_OSC8M_ENABLE << SYSCTRL_OSC8M_ENABLE_Pos));
#endif

#if CONF_OSC32K_CONFIG == 1
	/* OSC32K calibration value at bit 44:38 of memory 0x00806020 */
	calib = (*((uint32_t *)0x00806024) & 0x0001FC0) >> 6;
    13fa:	4a10      	ldr	r2, [pc, #64]	; (143c <_sysctrl_init_sources+0x58>)
    13fc:	6812      	ldr	r2, [r2, #0]
    13fe:	04d2      	lsls	r2, r2, #19
    1400:	0e52      	lsrs	r2, r2, #25
	                                 (CONF_OSC32K_WRTLOCK << SYSCTRL_OSC32K_WRTLOCK_Pos)
	                                 | SYSCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP)
	                                 | (CONF_OSC32K_RUNSTDBY << SYSCTRL_OSC32K_RUNSTDBY_Pos)
	                                 | (CONF_OSC32K_EN1K << SYSCTRL_OSC32K_EN1K_Pos)
	                                 | (CONF_OSC32K_EN32K << SYSCTRL_OSC32K_EN32K_Pos)
	                                 | (1 << SYSCTRL_OSC32K_ENABLE_Pos));
    1402:	0411      	lsls	r1, r2, #16
    1404:	4301      	orrs	r1, r0
	((Sysctrl *)hw)->OSC32K.reg = data;
    1406:	6199      	str	r1, [r3, #24]
	/* Enable OSC32K anyway since GCLK configuration may need it to sync */
	hri_sysctrl_set_OSC32K_ENABLE_bit(hw);
#endif

#if CONF_OSCULP32K_CONFIG == 1
	hri_sysctrl_write_OSCULP32K_reg(hw,
    1408:	211f      	movs	r1, #31
    140a:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    140c:	771a      	strb	r2, [r3, #28]
#endif
#endif

#if CONF_OSC32K_CONFIG == 1
#if CONF_OSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(hw))
    140e:	2204      	movs	r2, #4
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
    1410:	68d8      	ldr	r0, [r3, #12]
    1412:	4908      	ldr	r1, [pc, #32]	; (1434 <_sysctrl_init_sources+0x50>)
    1414:	4210      	tst	r0, r2
    1416:	d0fb      	beq.n	1410 <_sysctrl_init_sources+0x2c>
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ONDEMAND;
    1418:	2080      	movs	r0, #128	; 0x80
    141a:	698a      	ldr	r2, [r1, #24]
    141c:	4302      	orrs	r2, r0
    141e:	618a      	str	r2, [r1, #24]
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    1420:	2108      	movs	r1, #8
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    1422:	68d8      	ldr	r0, [r3, #12]
    1424:	4a03      	ldr	r2, [pc, #12]	; (1434 <_sysctrl_init_sources+0x50>)
    1426:	4208      	tst	r0, r1
    1428:	d0fb      	beq.n	1422 <_sysctrl_init_sources+0x3e>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    142a:	2180      	movs	r1, #128	; 0x80
    142c:	6a13      	ldr	r3, [r2, #32]
    142e:	430b      	orrs	r3, r1
    1430:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    1432:	4770      	bx	lr
    1434:	40000800 	.word	0x40000800
    1438:	0fff0000 	.word	0x0fff0000
    143c:	00806024 	.word	0x00806024

00001440 <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    1440:	2202      	movs	r2, #2
    1442:	4b18      	ldr	r3, [pc, #96]	; (14a4 <_sysctrl_init_referenced_generators+0x64>)
    1444:	849a      	strh	r2, [r3, #36]	; 0x24
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    1446:	320e      	adds	r2, #14
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    1448:	68d9      	ldr	r1, [r3, #12]
    144a:	4211      	tst	r1, r2
    144c:	d0fc      	beq.n	1448 <_sysctrl_init_referenced_generators+0x8>
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    144e:	4a15      	ldr	r2, [pc, #84]	; (14a4 <_sysctrl_init_referenced_generators+0x64>)
    1450:	4915      	ldr	r1, [pc, #84]	; (14a8 <_sysctrl_init_referenced_generators+0x68>)
    1452:	62d1      	str	r1, [r2, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    1454:	4a15      	ldr	r2, [pc, #84]	; (14ac <_sysctrl_init_referenced_generators+0x6c>)
    1456:	6812      	ldr	r2, [r2, #0]
    1458:	0e92      	lsrs	r2, r2, #26
    145a:	2a3f      	cmp	r2, #63	; 0x3f
    145c:	d004      	beq.n	1468 <_sysctrl_init_referenced_generators+0x28>
    145e:	2180      	movs	r1, #128	; 0x80
    1460:	0292      	lsls	r2, r2, #10
    1462:	0089      	lsls	r1, r1, #2
    1464:	430a      	orrs	r2, r1
    1466:	e001      	b.n	146c <_sysctrl_init_referenced_generators+0x2c>
    1468:	22fc      	movs	r2, #252	; 0xfc
    146a:	01d2      	lsls	r2, r2, #7
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    146c:	629a      	str	r2, [r3, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    146e:	2202      	movs	r2, #2
    1470:	849a      	strh	r2, [r3, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    1472:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	                                    | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    1474:	0752      	lsls	r2, r2, #29
    1476:	d401      	bmi.n	147c <_sysctrl_init_referenced_generators+0x3c>
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
			;
	} else {
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    1478:	2210      	movs	r2, #16
    147a:	e005      	b.n	1488 <_sysctrl_init_referenced_generators+0x48>
		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    147c:	21d0      	movs	r1, #208	; 0xd0
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    147e:	68da      	ldr	r2, [r3, #12]
    1480:	400a      	ands	r2, r1
    1482:	2ad0      	cmp	r2, #208	; 0xd0
    1484:	d1fb      	bne.n	147e <_sysctrl_init_referenced_generators+0x3e>
    1486:	e002      	b.n	148e <_sysctrl_init_referenced_generators+0x4e>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    1488:	68d9      	ldr	r1, [r3, #12]
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    148a:	4211      	tst	r1, r2
    148c:	d0fc      	beq.n	1488 <_sysctrl_init_referenced_generators+0x48>
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ONDEMAND;
    148e:	2180      	movs	r1, #128	; 0x80
    1490:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    1492:	430a      	orrs	r2, r1
    1494:	849a      	strh	r2, [r3, #36]	; 0x24
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    1496:	227f      	movs	r2, #127	; 0x7f
	return ((Gclk *)hw)->GENDIV.reg;
}

static inline bool hri_gclk_get_STATUS_SYNCBUSY_bit(const void *const hw)
{
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    1498:	4905      	ldr	r1, [pc, #20]	; (14b0 <_sysctrl_init_referenced_generators+0x70>)
    149a:	784b      	ldrb	r3, [r1, #1]
    149c:	4393      	bics	r3, r2
    149e:	09db      	lsrs	r3, r3, #7
    14a0:	d1fb      	bne.n	149a <_sysctrl_init_referenced_generators+0x5a>
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    14a2:	4770      	bx	lr
    14a4:	40000800 	.word	0x40000800
    14a8:	04010000 	.word	0x04010000
    14ac:	00806024 	.word	0x00806024
    14b0:	40000c00 	.word	0x40000c00

000014b4 <_gclk_init_generators_by_fref>:
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
#if CONF_GCLK_GEN_0_GENEN == 1
	if (bm & (1ul << 0)) {
    14b4:	07c3      	lsls	r3, r0, #31
    14b6:	d505      	bpl.n	14c4 <_gclk_init_generators_by_fref+0x10>
	((Gclk *)hw)->GENDIV.reg = data;
    14b8:	2280      	movs	r2, #128	; 0x80
    14ba:	4b0b      	ldr	r3, [pc, #44]	; (14e8 <_gclk_init_generators_by_fref+0x34>)
    14bc:	0052      	lsls	r2, r2, #1
    14be:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    14c0:	4a0a      	ldr	r2, [pc, #40]	; (14ec <_gclk_init_generators_by_fref+0x38>)
    14c2:	605a      	str	r2, [r3, #4]
		                               | CONF_GCLK_GEN_0_SRC
		                               | GCLK_GENCTRL_ID(0));
	}
#endif
#if CONF_GCLK_GEN_1_GENEN == 1
	if (bm & (1ul << 1)) {
    14c4:	0783      	lsls	r3, r0, #30
    14c6:	d505      	bpl.n	14d4 <_gclk_init_generators_by_fref+0x20>
	((Gclk *)hw)->GENDIV.reg = data;
    14c8:	2202      	movs	r2, #2
    14ca:	4b07      	ldr	r3, [pc, #28]	; (14e8 <_gclk_init_generators_by_fref+0x34>)
    14cc:	32ff      	adds	r2, #255	; 0xff
    14ce:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    14d0:	4a07      	ldr	r2, [pc, #28]	; (14f0 <_gclk_init_generators_by_fref+0x3c>)
    14d2:	605a      	str	r2, [r3, #4]
		                               | CONF_GCLK_GEN_1_SRC
		                               | GCLK_GENCTRL_ID(1));
	}
#endif
#if CONF_GCLK_GEN_2_GENEN == 1
	if (bm & (1ul << 2)) {
    14d4:	0743      	lsls	r3, r0, #29
    14d6:	d505      	bpl.n	14e4 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
    14d8:	2281      	movs	r2, #129	; 0x81
    14da:	4b03      	ldr	r3, [pc, #12]	; (14e8 <_gclk_init_generators_by_fref+0x34>)
    14dc:	0052      	lsls	r2, r2, #1
    14de:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    14e0:	4a04      	ldr	r2, [pc, #16]	; (14f4 <_gclk_init_generators_by_fref+0x40>)
    14e2:	605a      	str	r2, [r3, #4]
		                               | (CONF_GCLK_GEN_5_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_5_SRC
		                               | GCLK_GENCTRL_ID(5));
	}
#endif
}
    14e4:	4770      	bx	lr
    14e6:	46c0      	nop			; (mov r8, r8)
    14e8:	40000c00 	.word	0x40000c00
    14ec:	00010700 	.word	0x00010700
    14f0:	00010401 	.word	0x00010401
    14f4:	00010602 	.word	0x00010602

000014f8 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    14f8:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    14fa:	4288      	cmp	r0, r1
    14fc:	d207      	bcs.n	150e <usb_find_desc+0x16>
    14fe:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    1500:	2b01      	cmp	r3, #1
    1502:	d904      	bls.n	150e <usb_find_desc+0x16>
		if (type == usb_desc_type(desc)) {
    1504:	7844      	ldrb	r4, [r0, #1]
    1506:	4294      	cmp	r4, r2
    1508:	d002      	beq.n	1510 <usb_find_desc+0x18>
    150a:	18c0      	adds	r0, r0, r3
    150c:	e7f5      	b.n	14fa <usb_find_desc+0x2>
		_desc_len_check();
    150e:	2000      	movs	r0, #0
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
}
    1510:	bd10      	pop	{r4, pc}

00001512 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    1512:	4288      	cmp	r0, r1
    1514:	d209      	bcs.n	152a <usb_find_ep_desc+0x18>
    1516:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    1518:	2b01      	cmp	r3, #1
    151a:	d906      	bls.n	152a <usb_find_ep_desc+0x18>
	return desc[1];
    151c:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    151e:	2a04      	cmp	r2, #4
    1520:	d003      	beq.n	152a <usb_find_ep_desc+0x18>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    1522:	2a05      	cmp	r2, #5
    1524:	d002      	beq.n	152c <usb_find_ep_desc+0x1a>
	return (desc + usb_desc_len(desc));
    1526:	18c0      	adds	r0, r0, r3
    1528:	e7f3      	b.n	1512 <usb_find_ep_desc>
		_desc_len_check();
    152a:	2000      	movs	r0, #0
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
}
    152c:	4770      	bx	lr
	...

00001530 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    1530:	b570      	push	{r4, r5, r6, lr}
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    1532:	4b0e      	ldr	r3, [pc, #56]	; (156c <usb_find_cfg_desc+0x3c>)
{
    1534:	0015      	movs	r5, r2
	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    1536:	2202      	movs	r2, #2
{
    1538:	000c      	movs	r4, r1
	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    153a:	4798      	blx	r3
    153c:	1e03      	subs	r3, r0, #0
	if (!desc) {
    153e:	d014      	beq.n	156a <usb_find_cfg_desc+0x3a>
		return NULL;
	}
	while (desc < eof) {
    1540:	42a3      	cmp	r3, r4
    1542:	d20f      	bcs.n	1564 <usb_find_cfg_desc+0x34>
		_desc_len_check();
    1544:	781a      	ldrb	r2, [r3, #0]
    1546:	2a01      	cmp	r2, #1
    1548:	d90c      	bls.n	1564 <usb_find_cfg_desc+0x34>
		if (desc[1] != USB_DT_CONFIG) {
    154a:	785a      	ldrb	r2, [r3, #1]
    154c:	2a02      	cmp	r2, #2
    154e:	d109      	bne.n	1564 <usb_find_cfg_desc+0x34>
			break;
		}
		if (desc[5] == cfg_value) {
    1550:	795a      	ldrb	r2, [r3, #5]
    1552:	42aa      	cmp	r2, r5
    1554:	d008      	beq.n	1568 <usb_find_cfg_desc+0x38>
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    1556:	78da      	ldrb	r2, [r3, #3]
    1558:	7899      	ldrb	r1, [r3, #2]
    155a:	0212      	lsls	r2, r2, #8
    155c:	188a      	adds	r2, r1, r2
    155e:	b292      	uxth	r2, r2
    1560:	189b      	adds	r3, r3, r2
    1562:	e7ed      	b.n	1540 <usb_find_cfg_desc+0x10>
		return NULL;
    1564:	2000      	movs	r0, #0
    1566:	e000      	b.n	156a <usb_find_cfg_desc+0x3a>
    1568:	0018      	movs	r0, r3
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
}
    156a:	bd70      	pop	{r4, r5, r6, pc}
    156c:	000014f9 	.word	0x000014f9

00001570 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    1570:	b570      	push	{r4, r5, r6, lr}
    1572:	000d      	movs	r5, r1
    1574:	0016      	movs	r6, r2
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    1576:	2400      	movs	r4, #0
    1578:	42a8      	cmp	r0, r5
    157a:	d20d      	bcs.n	1598 <usb_find_str_desc+0x28>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    157c:	2203      	movs	r2, #3
    157e:	0029      	movs	r1, r5
    1580:	4b06      	ldr	r3, [pc, #24]	; (159c <usb_find_str_desc+0x2c>)
    1582:	4798      	blx	r3
		if (desc) {
    1584:	2800      	cmp	r0, #0
    1586:	d008      	beq.n	159a <usb_find_str_desc+0x2a>
    1588:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    158a:	2b01      	cmp	r3, #1
    158c:	d904      	bls.n	1598 <usb_find_str_desc+0x28>
			if (i == str_index) {
    158e:	42b4      	cmp	r4, r6
    1590:	d003      	beq.n	159a <usb_find_str_desc+0x2a>
	return (desc + usb_desc_len(desc));
    1592:	18c0      	adds	r0, r0, r3
    1594:	3401      	adds	r4, #1
    1596:	e7ef      	b.n	1578 <usb_find_str_desc+0x8>
				return desc;
			}
			i++;
			desc = usb_desc_next(desc);
		} else {
			return NULL;
    1598:	2000      	movs	r0, #0
		}
	}
	return NULL;
}
    159a:	bd70      	pop	{r4, r5, r6, pc}
    159c:	000014f9 	.word	0x000014f9

000015a0 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    15a0:	4a08      	ldr	r2, [pc, #32]	; (15c4 <_usb_d_find_ep+0x24>)
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    15a2:	2300      	movs	r3, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    15a4:	7851      	ldrb	r1, [r2, #1]
    15a6:	4288      	cmp	r0, r1
    15a8:	d00a      	beq.n	15c0 <_usb_d_find_ep+0x20>
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    15aa:	7813      	ldrb	r3, [r2, #0]
    15ac:	2b00      	cmp	r3, #0
    15ae:	d105      	bne.n	15bc <_usb_d_find_ep+0x1c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    15b0:	220f      	movs	r2, #15
    15b2:	4010      	ands	r0, r2
    15b4:	1a43      	subs	r3, r0, r1
    15b6:	1e58      	subs	r0, r3, #1
    15b8:	4183      	sbcs	r3, r0
    15ba:	e000      	b.n	15be <_usb_d_find_ep+0x1e>
			return i;
		}
	}
	return -1;
    15bc:	2301      	movs	r3, #1
    15be:	425b      	negs	r3, r3
}
    15c0:	0018      	movs	r0, r3
    15c2:	4770      	bx	lr
    15c4:	20000298 	.word	0x20000298

000015c8 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    15c8:	2000      	movs	r0, #0
    15ca:	4770      	bx	lr

000015cc <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    15cc:	b570      	push	{r4, r5, r6, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    15ce:	4b08      	ldr	r3, [pc, #32]	; (15f0 <usb_d_cb_trans_more+0x24>)
{
    15d0:	0004      	movs	r4, r0
    15d2:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    15d4:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    15d6:	4b07      	ldr	r3, [pc, #28]	; (15f4 <usb_d_cb_trans_more+0x28>)
    15d8:	0140      	lsls	r0, r0, #5
    15da:	181b      	adds	r3, r3, r0
    15dc:	789a      	ldrb	r2, [r3, #2]
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    15de:	2000      	movs	r0, #0
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    15e0:	2a03      	cmp	r2, #3
    15e2:	d103      	bne.n	15ec <usb_d_cb_trans_more+0x20>
		return ept->callbacks.more(ep, transfered);
    15e4:	699b      	ldr	r3, [r3, #24]
    15e6:	0029      	movs	r1, r5
    15e8:	0020      	movs	r0, r4
    15ea:	4798      	blx	r3
}
    15ec:	bd70      	pop	{r4, r5, r6, pc}
    15ee:	46c0      	nop			; (mov r8, r8)
    15f0:	000015a1 	.word	0x000015a1
    15f4:	20000298 	.word	0x20000298

000015f8 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    15f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    15fa:	4b3a      	ldr	r3, [pc, #232]	; (16e4 <_usb_d_cb_trans_done+0xec>)
{
    15fc:	b087      	sub	sp, #28
    15fe:	9000      	str	r0, [sp, #0]
    1600:	000f      	movs	r7, r1
    1602:	9201      	str	r2, [sp, #4]
	int8_t           ep_index = _usb_d_find_ep(ep);
    1604:	4798      	blx	r3
    1606:	4d38      	ldr	r5, [pc, #224]	; (16e8 <_usb_d_cb_trans_done+0xf0>)
    1608:	0144      	lsls	r4, r0, #5
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    160a:	2f00      	cmp	r7, #0
    160c:	d13d      	bne.n	168a <_usb_d_cb_trans_done+0x92>
		ept->xfer.hdr.status = USB_XFER_DONE;
    160e:	192e      	adds	r6, r5, r4
    1610:	70f7      	strb	r7, [r6, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1612:	5d29      	ldrb	r1, [r5, r4]
    1614:	2900      	cmp	r1, #0
    1616:	d135      	bne.n	1684 <_usb_d_cb_trans_done+0x8c>
	if (state == USB_EP_S_X_DATA) {
    1618:	78b2      	ldrb	r2, [r6, #2]
    161a:	3408      	adds	r4, #8
    161c:	7870      	ldrb	r0, [r6, #1]
    161e:	69f3      	ldr	r3, [r6, #28]
    1620:	2a03      	cmp	r2, #3
    1622:	d129      	bne.n	1678 <_usb_d_cb_trans_done+0x80>
    1624:	7b37      	ldrb	r7, [r6, #12]
    1626:	327c      	adds	r2, #124	; 0x7c
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    1628:	192c      	adds	r4, r5, r4
    162a:	3101      	adds	r1, #1
    162c:	4397      	bics	r7, r2
    162e:	1d22      	adds	r2, r4, #4
    1630:	4798      	blx	r3
    1632:	0001      	movs	r1, r0
    1634:	7870      	ldrb	r0, [r6, #1]
		if (err) {
    1636:	2900      	cmp	r1, #0
    1638:	d00b      	beq.n	1652 <_usb_d_cb_trans_done+0x5a>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    163a:	2305      	movs	r3, #5
    163c:	70b3      	strb	r3, [r6, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    163e:	3b03      	subs	r3, #3
    1640:	70f3      	strb	r3, [r6, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    1642:	2f00      	cmp	r7, #0
    1644:	d101      	bne.n	164a <_usb_d_cb_trans_done+0x52>
    1646:	2280      	movs	r2, #128	; 0x80
    1648:	4310      	orrs	r0, r2
    164a:	2101      	movs	r1, #1
    164c:	4b27      	ldr	r3, [pc, #156]	; (16ec <_usb_d_cb_trans_done+0xf4>)
    164e:	4798      	blx	r3
    1650:	e045      	b.n	16de <_usb_d_cb_trans_done+0xe6>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1652:	2304      	movs	r3, #4
	struct usb_d_transfer trans
    1654:	aa03      	add	r2, sp, #12
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1656:	70b3      	strb	r3, [r6, #2]
	struct usb_d_transfer trans
    1658:	9103      	str	r1, [sp, #12]
    165a:	6051      	str	r1, [r2, #4]
    165c:	2f00      	cmp	r7, #0
    165e:	d102      	bne.n	1666 <_usb_d_cb_trans_done+0x6e>
    1660:	337c      	adds	r3, #124	; 0x7c
    1662:	4303      	orrs	r3, r0
    1664:	e001      	b.n	166a <_usb_d_cb_trans_done+0x72>
    1666:	230f      	movs	r3, #15
    1668:	4003      	ands	r3, r0
    166a:	7213      	strb	r3, [r2, #8]
    166c:	2301      	movs	r3, #1
	return _usb_d_dev_ep_trans(&trans);
    166e:	0010      	movs	r0, r2
	struct usb_d_transfer trans
    1670:	7253      	strb	r3, [r2, #9]
	return _usb_d_dev_ep_trans(&trans);
    1672:	4b1f      	ldr	r3, [pc, #124]	; (16f0 <_usb_d_cb_trans_done+0xf8>)
    1674:	4798      	blx	r3
    1676:	e032      	b.n	16de <_usb_d_cb_trans_done+0xe6>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    1678:	192c      	adds	r4, r5, r4
    167a:	1d22      	adds	r2, r4, #4
    167c:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    167e:	2302      	movs	r3, #2
    1680:	70b3      	strb	r3, [r6, #2]
    1682:	e02c      	b.n	16de <_usb_d_cb_trans_done+0xe6>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    1684:	2301      	movs	r3, #1
    1686:	70b3      	strb	r3, [r6, #2]
    1688:	e023      	b.n	16d2 <_usb_d_cb_trans_done+0xda>
	} else if (code == USB_TRANS_STALL) {
		ept->xfer.hdr.status = USB_XFER_HALT;
    168a:	192b      	adds	r3, r5, r4
	} else if (code == USB_TRANS_STALL) {
    168c:	2f01      	cmp	r7, #1
    168e:	d10b      	bne.n	16a8 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.status = USB_XFER_HALT;
    1690:	2202      	movs	r2, #2
    1692:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1694:	5d29      	ldrb	r1, [r5, r4]
    1696:	2900      	cmp	r1, #0
    1698:	d104      	bne.n	16a4 <_usb_d_cb_trans_done+0xac>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    169a:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    169c:	9800      	ldr	r0, [sp, #0]
    169e:	4b13      	ldr	r3, [pc, #76]	; (16ec <_usb_d_cb_trans_done+0xf4>)
    16a0:	4798      	blx	r3
    16a2:	e016      	b.n	16d2 <_usb_d_cb_trans_done+0xda>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    16a4:	2205      	movs	r2, #5
    16a6:	e009      	b.n	16bc <_usb_d_cb_trans_done+0xc4>
		}
	} else if (code == USB_TRANS_ABORT) {
    16a8:	2f02      	cmp	r7, #2
    16aa:	d109      	bne.n	16c0 <_usb_d_cb_trans_done+0xc8>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    16ac:	2204      	movs	r2, #4
    16ae:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    16b0:	5d2a      	ldrb	r2, [r5, r4]
    16b2:	2a00      	cmp	r2, #0
    16b4:	d101      	bne.n	16ba <_usb_d_cb_trans_done+0xc2>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    16b6:	709f      	strb	r7, [r3, #2]
			return;
    16b8:	e011      	b.n	16de <_usb_d_cb_trans_done+0xe6>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    16ba:	2201      	movs	r2, #1
    16bc:	709a      	strb	r2, [r3, #2]
    16be:	e008      	b.n	16d2 <_usb_d_cb_trans_done+0xda>
	} else if (code == USB_TRANS_RESET) {
    16c0:	2f03      	cmp	r7, #3
    16c2:	d103      	bne.n	16cc <_usb_d_cb_trans_done+0xd4>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    16c4:	2200      	movs	r2, #0
    16c6:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    16c8:	3205      	adds	r2, #5
    16ca:	e001      	b.n	16d0 <_usb_d_cb_trans_done+0xd8>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    16cc:	2206      	movs	r2, #6
    16ce:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    16d0:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    16d2:	192c      	adds	r4, r5, r4
    16d4:	78e1      	ldrb	r1, [r4, #3]
    16d6:	69e3      	ldr	r3, [r4, #28]
    16d8:	9a01      	ldr	r2, [sp, #4]
    16da:	9800      	ldr	r0, [sp, #0]
    16dc:	4798      	blx	r3
}
    16de:	b007      	add	sp, #28
    16e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16e2:	46c0      	nop			; (mov r8, r8)
    16e4:	000015a1 	.word	0x000015a1
    16e8:	20000298 	.word	0x20000298
    16ec:	00000e75 	.word	0x00000e75
    16f0:	00000f9d 	.word	0x00000f9d

000016f4 <usb_d_cb_trans_setup>:
{
    16f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    16f6:	4b1c      	ldr	r3, [pc, #112]	; (1768 <usb_d_cb_trans_setup+0x74>)
{
    16f8:	b085      	sub	sp, #20
    16fa:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    16fc:	4798      	blx	r3
	uint8_t *        req      = ept->xfer.req;
    16fe:	4f1b      	ldr	r7, [pc, #108]	; (176c <usb_d_cb_trans_setup+0x78>)
    1700:	0143      	lsls	r3, r0, #5
    1702:	9303      	str	r3, [sp, #12]
    1704:	18fb      	adds	r3, r7, r3
    1706:	330c      	adds	r3, #12
    1708:	9301      	str	r3, [sp, #4]
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    170a:	0019      	movs	r1, r3
    170c:	0020      	movs	r0, r4
    170e:	4b18      	ldr	r3, [pc, #96]	; (1770 <usb_d_cb_trans_setup+0x7c>)
    1710:	4798      	blx	r3
    1712:	2680      	movs	r6, #128	; 0x80
	if (n != 8) {
    1714:	b2c0      	uxtb	r0, r0
    1716:	4d17      	ldr	r5, [pc, #92]	; (1774 <usb_d_cb_trans_setup+0x80>)
    1718:	4276      	negs	r6, r6
    171a:	2808      	cmp	r0, #8
    171c:	d006      	beq.n	172c <usb_d_cb_trans_setup+0x38>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    171e:	2101      	movs	r1, #1
    1720:	0020      	movs	r0, r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1722:	4334      	orrs	r4, r6
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1724:	47a8      	blx	r5
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1726:	b2e0      	uxtb	r0, r4
    1728:	2101      	movs	r1, #1
    172a:	e019      	b.n	1760 <usb_d_cb_trans_setup+0x6c>
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    172c:	2100      	movs	r1, #0
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    172e:	4326      	orrs	r6, r4
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1730:	0020      	movs	r0, r4
    1732:	47a8      	blx	r5
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    1734:	b2f3      	uxtb	r3, r6
    1736:	2100      	movs	r1, #0
    1738:	0018      	movs	r0, r3
    173a:	9302      	str	r3, [sp, #8]
    173c:	47a8      	blx	r5
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    173e:	9b03      	ldr	r3, [sp, #12]
	if (!ept->callbacks.req(ep, req)) {
    1740:	9901      	ldr	r1, [sp, #4]
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    1742:	18fe      	adds	r6, r7, r3
    1744:	2701      	movs	r7, #1
	if (!ept->callbacks.req(ep, req)) {
    1746:	0020      	movs	r0, r4
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    1748:	70b7      	strb	r7, [r6, #2]
	if (!ept->callbacks.req(ep, req)) {
    174a:	6973      	ldr	r3, [r6, #20]
    174c:	4798      	blx	r3
    174e:	2800      	cmp	r0, #0
    1750:	d107      	bne.n	1762 <usb_d_cb_trans_setup+0x6e>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    1752:	2305      	movs	r3, #5
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1754:	0039      	movs	r1, r7
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    1756:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1758:	0020      	movs	r0, r4
    175a:	47a8      	blx	r5
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    175c:	0039      	movs	r1, r7
    175e:	9802      	ldr	r0, [sp, #8]
    1760:	47a8      	blx	r5
}
    1762:	b005      	add	sp, #20
    1764:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1766:	46c0      	nop			; (mov r8, r8)
    1768:	000015a1 	.word	0x000015a1
    176c:	20000298 	.word	0x20000298
    1770:	00000f45 	.word	0x00000f45
    1774:	00000e75 	.word	0x00000e75

00001778 <usb_d_init>:

int32_t usb_d_init(void)
{
	int32_t rc = _usb_d_dev_init();
    1778:	4b0e      	ldr	r3, [pc, #56]	; (17b4 <usb_d_init+0x3c>)
{
    177a:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    177c:	4798      	blx	r3
    177e:	1e03      	subs	r3, r0, #0
	uint8_t i;
	if (rc < 0) {
    1780:	db16      	blt.n	17b0 <usb_d_init+0x38>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    1782:	4c0d      	ldr	r4, [pc, #52]	; (17b8 <usb_d_init+0x40>)
    1784:	2220      	movs	r2, #32
    1786:	2100      	movs	r1, #0
    1788:	0020      	movs	r0, r4
    178a:	4b0c      	ldr	r3, [pc, #48]	; (17bc <usb_d_init+0x44>)
    178c:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    178e:	23ff      	movs	r3, #255	; 0xff
    1790:	7063      	strb	r3, [r4, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1792:	4b0b      	ldr	r3, [pc, #44]	; (17c0 <usb_d_init+0x48>)
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    1794:	490b      	ldr	r1, [pc, #44]	; (17c4 <usb_d_init+0x4c>)
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1796:	6163      	str	r3, [r4, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    1798:	61a3      	str	r3, [r4, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    179a:	61e3      	str	r3, [r4, #28]
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    179c:	2000      	movs	r0, #0
    179e:	4c0a      	ldr	r4, [pc, #40]	; (17c8 <usb_d_init+0x50>)
    17a0:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    17a2:	490a      	ldr	r1, [pc, #40]	; (17cc <usb_d_init+0x54>)
    17a4:	2001      	movs	r0, #1
    17a6:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    17a8:	4909      	ldr	r1, [pc, #36]	; (17d0 <usb_d_init+0x58>)
    17aa:	2002      	movs	r0, #2
    17ac:	47a0      	blx	r4
	return ERR_NONE;
    17ae:	2300      	movs	r3, #0
}
    17b0:	0018      	movs	r0, r3
    17b2:	bd10      	pop	{r4, pc}
    17b4:	00000ac1 	.word	0x00000ac1
    17b8:	20000298 	.word	0x20000298
    17bc:	000026a1 	.word	0x000026a1
    17c0:	000015c9 	.word	0x000015c9
    17c4:	000016f5 	.word	0x000016f5
    17c8:	000010ed 	.word	0x000010ed
    17cc:	000015cd 	.word	0x000015cd
    17d0:	000015f9 	.word	0x000015f9

000017d4 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    17d4:	b510      	push	{r4, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    17d6:	4b01      	ldr	r3, [pc, #4]	; (17dc <usb_d_register_callback+0x8>)
    17d8:	4798      	blx	r3
}
    17da:	bd10      	pop	{r4, pc}
    17dc:	000010c9 	.word	0x000010c9

000017e0 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    17e0:	b510      	push	{r4, lr}
	return _usb_d_dev_enable();
    17e2:	4b01      	ldr	r3, [pc, #4]	; (17e8 <usb_d_enable+0x8>)
    17e4:	4798      	blx	r3
}
    17e6:	bd10      	pop	{r4, pc}
    17e8:	00000b71 	.word	0x00000b71

000017ec <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    17ec:	b510      	push	{r4, lr}
	_usb_d_dev_attach();
    17ee:	4b01      	ldr	r3, [pc, #4]	; (17f4 <usb_d_attach+0x8>)
    17f0:	4798      	blx	r3
}
    17f2:	bd10      	pop	{r4, pc}
    17f4:	00000ba9 	.word	0x00000ba9

000017f8 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    17f8:	b510      	push	{r4, lr}
	_usb_d_dev_set_address(addr);
    17fa:	4b01      	ldr	r3, [pc, #4]	; (1800 <usb_d_set_address+0x8>)
    17fc:	4798      	blx	r3
}
    17fe:	bd10      	pop	{r4, pc}
    1800:	00000bb9 	.word	0x00000bb9

00001804 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    1804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    1806:	4c10      	ldr	r4, [pc, #64]	; (1848 <usb_d_ep_init+0x44>)
{
    1808:	0005      	movs	r5, r0
    180a:	000e      	movs	r6, r1
    180c:	0017      	movs	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    180e:	47a0      	blx	r4
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    1810:	2800      	cmp	r0, #0
    1812:	da13      	bge.n	183c <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    1814:	20ff      	movs	r0, #255	; 0xff
    1816:	47a0      	blx	r4
    1818:	1e04      	subs	r4, r0, #0
		if (ep_index < 0) {
    181a:	db11      	blt.n	1840 <usb_d_ep_init+0x3c>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    181c:	4b0b      	ldr	r3, [pc, #44]	; (184c <usb_d_ep_init+0x48>)
    181e:	003a      	movs	r2, r7
    1820:	0031      	movs	r1, r6
    1822:	0028      	movs	r0, r5
    1824:	4798      	blx	r3
    1826:	1e03      	subs	r3, r0, #0
	if (rc < 0) {
    1828:	db0c      	blt.n	1844 <usb_d_ep_init+0x40>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    182a:	4a09      	ldr	r2, [pc, #36]	; (1850 <usb_d_ep_init+0x4c>)
    182c:	0164      	lsls	r4, r4, #5
    182e:	1913      	adds	r3, r2, r4
    1830:	705d      	strb	r5, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    1832:	2303      	movs	r3, #3
    1834:	401e      	ands	r6, r3
    1836:	54a6      	strb	r6, [r4, r2]
	return ERR_NONE;
    1838:	2300      	movs	r3, #0
    183a:	e003      	b.n	1844 <usb_d_ep_init+0x40>
		return -USB_ERR_REDO;
    183c:	2314      	movs	r3, #20
    183e:	e000      	b.n	1842 <usb_d_ep_init+0x3e>
			return -USB_ERR_ALLOC_FAIL;
    1840:	2315      	movs	r3, #21
    1842:	425b      	negs	r3, r3
}
    1844:	0018      	movs	r0, r3
    1846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1848:	000015a1 	.word	0x000015a1
    184c:	00000bc9 	.word	0x00000bc9
    1850:	20000298 	.word	0x20000298

00001854 <usb_d_ep0_init>:
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    1854:	2100      	movs	r1, #0
{
    1856:	b510      	push	{r4, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    1858:	b282      	uxth	r2, r0
    185a:	4b02      	ldr	r3, [pc, #8]	; (1864 <usb_d_ep0_init+0x10>)
    185c:	0008      	movs	r0, r1
    185e:	4798      	blx	r3
}
    1860:	bd10      	pop	{r4, pc}
    1862:	46c0      	nop			; (mov r8, r8)
    1864:	00001805 	.word	0x00001805

00001868 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    1868:	b570      	push	{r4, r5, r6, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    186a:	4b07      	ldr	r3, [pc, #28]	; (1888 <usb_d_ep_deinit+0x20>)
{
    186c:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    186e:	4798      	blx	r3
    1870:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    1872:	db07      	blt.n	1884 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    1874:	4b05      	ldr	r3, [pc, #20]	; (188c <usb_d_ep_deinit+0x24>)
    1876:	0028      	movs	r0, r5
    1878:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    187a:	4b05      	ldr	r3, [pc, #20]	; (1890 <usb_d_ep_deinit+0x28>)
    187c:	0164      	lsls	r4, r4, #5
    187e:	191c      	adds	r4, r3, r4
    1880:	23ff      	movs	r3, #255	; 0xff
    1882:	7063      	strb	r3, [r4, #1]
}
    1884:	bd70      	pop	{r4, r5, r6, pc}
    1886:	46c0      	nop			; (mov r8, r8)
    1888:	000015a1 	.word	0x000015a1
    188c:	00000ca1 	.word	0x00000ca1
    1890:	20000298 	.word	0x20000298

00001894 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    1894:	b570      	push	{r4, r5, r6, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    1896:	4b0c      	ldr	r3, [pc, #48]	; (18c8 <usb_d_ep_enable+0x34>)
{
    1898:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    189a:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    189c:	2800      	cmp	r0, #0
    189e:	db0f      	blt.n	18c0 <usb_d_ep_enable+0x2c>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    18a0:	4c0a      	ldr	r4, [pc, #40]	; (18cc <usb_d_ep_enable+0x38>)
    18a2:	0140      	lsls	r0, r0, #5
    18a4:	5d03      	ldrb	r3, [r0, r4]
    18a6:	1824      	adds	r4, r4, r0
    18a8:	425a      	negs	r2, r3
    18aa:	4153      	adcs	r3, r2
    18ac:	3301      	adds	r3, #1
    18ae:	70a3      	strb	r3, [r4, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    18b0:	0028      	movs	r0, r5
    18b2:	4b07      	ldr	r3, [pc, #28]	; (18d0 <usb_d_ep_enable+0x3c>)
    18b4:	4798      	blx	r3
	if (rc < 0) {
    18b6:	2800      	cmp	r0, #0
    18b8:	da04      	bge.n	18c4 <usb_d_ep_enable+0x30>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    18ba:	2300      	movs	r3, #0
    18bc:	70a3      	strb	r3, [r4, #2]
    18be:	e001      	b.n	18c4 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    18c0:	2012      	movs	r0, #18
    18c2:	4240      	negs	r0, r0
	}
	return rc;
}
    18c4:	bd70      	pop	{r4, r5, r6, pc}
    18c6:	46c0      	nop			; (mov r8, r8)
    18c8:	000015a1 	.word	0x000015a1
    18cc:	20000298 	.word	0x20000298
    18d0:	00000d19 	.word	0x00000d19

000018d4 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    18d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    18d6:	7a03      	ldrb	r3, [r0, #8]
{
    18d8:	b08b      	sub	sp, #44	; 0x2c
    18da:	0005      	movs	r5, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    18dc:	9301      	str	r3, [sp, #4]
    18de:	0018      	movs	r0, r3
    18e0:	4b35      	ldr	r3, [pc, #212]	; (19b8 <usb_d_ep_transfer+0xe4>)
    18e2:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    18e4:	7a6b      	ldrb	r3, [r5, #9]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    18e6:	1e06      	subs	r6, r0, #0
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    18e8:	9303      	str	r3, [sp, #12]
	uint32_t              len = xfer->size;
    18ea:	686c      	ldr	r4, [r5, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    18ec:	db60      	blt.n	19b0 <usb_d_ep_transfer+0xdc>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    18ee:	4b33      	ldr	r3, [pc, #204]	; (19bc <usb_d_ep_transfer+0xe8>)
    18f0:	a806      	add	r0, sp, #24
    18f2:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    18f4:	0173      	lsls	r3, r6, #5
    18f6:	9300      	str	r3, [sp, #0]
    18f8:	9a00      	ldr	r2, [sp, #0]
    18fa:	4b31      	ldr	r3, [pc, #196]	; (19c0 <usb_d_ep_transfer+0xec>)
    18fc:	189e      	adds	r6, r3, r2
    18fe:	78b3      	ldrb	r3, [r6, #2]
    1900:	aa04      	add	r2, sp, #16
    1902:	1dd7      	adds	r7, r2, #7
    1904:	703b      	strb	r3, [r7, #0]
	if (state == USB_EP_S_IDLE) {
    1906:	783b      	ldrb	r3, [r7, #0]
    1908:	b2db      	uxtb	r3, r3
    190a:	9302      	str	r3, [sp, #8]
    190c:	9a02      	ldr	r2, [sp, #8]
    190e:	4b2d      	ldr	r3, [pc, #180]	; (19c4 <usb_d_ep_transfer+0xf0>)
    1910:	2a01      	cmp	r2, #1
    1912:	d10f      	bne.n	1934 <usb_d_ep_transfer+0x60>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    1914:	3202      	adds	r2, #2
    1916:	70b2      	strb	r2, [r6, #2]
		atomic_leave_critical(&flags);
    1918:	a806      	add	r0, sp, #24
    191a:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    191c:	4b28      	ldr	r3, [pc, #160]	; (19c0 <usb_d_ep_transfer+0xec>)
    191e:	9a00      	ldr	r2, [sp, #0]
    1920:	5cd3      	ldrb	r3, [r2, r3]
    1922:	2b00      	cmp	r3, #0
    1924:	d016      	beq.n	1954 <usb_d_ep_transfer+0x80>
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    1926:	9b01      	ldr	r3, [sp, #4]
    1928:	09da      	lsrs	r2, r3, #7
    192a:	9b03      	ldr	r3, [sp, #12]
    192c:	1e59      	subs	r1, r3, #1
    192e:	418b      	sbcs	r3, r1
    1930:	b2db      	uxtb	r3, r3
    1932:	e02c      	b.n	198e <usb_d_ep_transfer+0xba>
		atomic_leave_critical(&flags);
    1934:	a806      	add	r0, sp, #24
    1936:	4798      	blx	r3
		switch (state) {
    1938:	783b      	ldrb	r3, [r7, #0]
			return USB_HALTED;
    193a:	2002      	movs	r0, #2
		switch (state) {
    193c:	b2db      	uxtb	r3, r3
    193e:	2b05      	cmp	r3, #5
    1940:	d038      	beq.n	19b4 <usb_d_ep_transfer+0xe0>
    1942:	2b06      	cmp	r3, #6
    1944:	d004      	beq.n	1950 <usb_d_ep_transfer+0x7c>
			return USB_BUSY;
    1946:	2001      	movs	r0, #1
		switch (state) {
    1948:	2b00      	cmp	r3, #0
    194a:	d133      	bne.n	19b4 <usb_d_ep_transfer+0xe0>
			return -USB_ERR_FUNC;
    194c:	2013      	movs	r0, #19
    194e:	e030      	b.n	19b2 <usb_d_ep_transfer+0xde>
			return -USB_ERROR;
    1950:	2010      	movs	r0, #16
    1952:	e02e      	b.n	19b2 <usb_d_ep_transfer+0xde>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    1954:	7cf2      	ldrb	r2, [r6, #19]
    1956:	7cb3      	ldrb	r3, [r6, #18]
    1958:	0212      	lsls	r2, r2, #8
    195a:	189a      	adds	r2, r3, r2
    195c:	b292      	uxth	r2, r2
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    195e:	2a00      	cmp	r2, #0
    1960:	d104      	bne.n	196c <usb_d_ep_transfer+0x98>
			dir                 = true;
			len                 = 0;
			zlp                 = true;
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1962:	2304      	movs	r3, #4
			len                 = 0;
    1964:	0014      	movs	r4, r2
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1966:	70b3      	strb	r3, [r6, #2]
			zlp                 = true;
    1968:	9b02      	ldr	r3, [sp, #8]
    196a:	e00f      	b.n	198c <usb_d_ep_transfer+0xb8>
    196c:	4294      	cmp	r4, r2
    196e:	d900      	bls.n	1972 <usb_d_ep_transfer+0x9e>
    1970:	0014      	movs	r4, r2
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    1972:	4913      	ldr	r1, [pc, #76]	; (19c0 <usb_d_ep_transfer+0xec>)
    1974:	9b00      	ldr	r3, [sp, #0]
    1976:	468c      	mov	ip, r1
			/* Data length not exceed requested. */
			if (len > req_len) {
				len = req_len;
			}
			if (dir) {
    1978:	217f      	movs	r1, #127	; 0x7f
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    197a:	4463      	add	r3, ip
			if (dir) {
    197c:	7b1b      	ldrb	r3, [r3, #12]
    197e:	438b      	bics	r3, r1
    1980:	d004      	beq.n	198c <usb_d_ep_transfer+0xb8>
				/* Setup -> In */
				zlp = (req_len > len);
    1982:	4294      	cmp	r4, r2
    1984:	419b      	sbcs	r3, r3
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    1986:	2201      	movs	r2, #1
				zlp = (req_len > len);
    1988:	425b      	negs	r3, r3
    198a:	e000      	b.n	198e <usb_d_ep_transfer+0xba>
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    198c:	001a      	movs	r2, r3
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    198e:	7a29      	ldrb	r1, [r5, #8]
	struct usb_d_transfer trans
    1990:	682d      	ldr	r5, [r5, #0]
    1992:	a807      	add	r0, sp, #28
    1994:	9507      	str	r5, [sp, #28]
    1996:	6044      	str	r4, [r0, #4]
    1998:	2a00      	cmp	r2, #0
    199a:	d002      	beq.n	19a2 <usb_d_ep_transfer+0xce>
    199c:	2280      	movs	r2, #128	; 0x80
    199e:	430a      	orrs	r2, r1
    19a0:	e001      	b.n	19a6 <usb_d_ep_transfer+0xd2>
    19a2:	220f      	movs	r2, #15
    19a4:	400a      	ands	r2, r1
    19a6:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
    19a8:	4b07      	ldr	r3, [pc, #28]	; (19c8 <usb_d_ep_transfer+0xf4>)
	struct usb_d_transfer trans
    19aa:	7202      	strb	r2, [r0, #8]
	return _usb_d_dev_ep_trans(&trans);
    19ac:	4798      	blx	r3
	return rc;
    19ae:	e001      	b.n	19b4 <usb_d_ep_transfer+0xe0>
		return -USB_ERR_PARAM;
    19b0:	2012      	movs	r0, #18
    19b2:	4240      	negs	r0, r0
}
    19b4:	b00b      	add	sp, #44	; 0x2c
    19b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19b8:	000015a1 	.word	0x000015a1
    19bc:	00002599 	.word	0x00002599
    19c0:	20000298 	.word	0x20000298
    19c4:	000025a7 	.word	0x000025a7
    19c8:	00000f9d 	.word	0x00000f9d

000019cc <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    19cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    19ce:	0005      	movs	r5, r0
    19d0:	1e0e      	subs	r6, r1, #0
	if (ctrl == USB_EP_HALT_CLR) {
    19d2:	d11b      	bne.n	1a0c <usb_d_ep_halt+0x40>
	int8_t           ep_index = _usb_d_find_ep(ep);
    19d4:	4b12      	ldr	r3, [pc, #72]	; (1a20 <usb_d_ep_halt+0x54>)
    19d6:	4798      	blx	r3
    19d8:	1e04      	subs	r4, r0, #0
	if (ep_index < 0) {
    19da:	db1e      	blt.n	1a1a <usb_d_ep_halt+0x4e>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    19dc:	2102      	movs	r1, #2
    19de:	0028      	movs	r0, r5
    19e0:	4f10      	ldr	r7, [pc, #64]	; (1a24 <usb_d_ep_halt+0x58>)
    19e2:	47b8      	blx	r7
    19e4:	2800      	cmp	r0, #0
    19e6:	d01a      	beq.n	1a1e <usb_d_ep_halt+0x52>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    19e8:	0031      	movs	r1, r6
    19ea:	0028      	movs	r0, r5
    19ec:	47b8      	blx	r7
		if (rc < 0) {
    19ee:	2800      	cmp	r0, #0
    19f0:	db15      	blt.n	1a1e <usb_d_ep_halt+0x52>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    19f2:	2301      	movs	r3, #1
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    19f4:	2103      	movs	r1, #3
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    19f6:	480c      	ldr	r0, [pc, #48]	; (1a28 <usb_d_ep_halt+0x5c>)
    19f8:	0164      	lsls	r4, r4, #5
    19fa:	1900      	adds	r0, r0, r4
    19fc:	7083      	strb	r3, [r0, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    19fe:	70c1      	strb	r1, [r0, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    1a00:	69c3      	ldr	r3, [r0, #28]
    1a02:	0032      	movs	r2, r6
    1a04:	0028      	movs	r0, r5
    1a06:	4798      	blx	r3
	return ERR_NONE;
    1a08:	0030      	movs	r0, r6
    1a0a:	e008      	b.n	1a1e <usb_d_ep_halt+0x52>
    1a0c:	4b05      	ldr	r3, [pc, #20]	; (1a24 <usb_d_ep_halt+0x58>)
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    1a0e:	2901      	cmp	r1, #1
    1a10:	d000      	beq.n	1a14 <usb_d_ep_halt+0x48>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    1a12:	2102      	movs	r1, #2
    1a14:	0028      	movs	r0, r5
    1a16:	4798      	blx	r3
    1a18:	e001      	b.n	1a1e <usb_d_ep_halt+0x52>
		return -USB_ERR_PARAM;
    1a1a:	2012      	movs	r0, #18
    1a1c:	4240      	negs	r0, r0
	}
}
    1a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1a20:	000015a1 	.word	0x000015a1
    1a24:	00000e75 	.word	0x00000e75
    1a28:	20000298 	.word	0x20000298

00001a2c <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    1a2c:	b570      	push	{r4, r5, r6, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    1a2e:	4b0f      	ldr	r3, [pc, #60]	; (1a6c <usb_d_ep_register_callback+0x40>)
{
    1a30:	000c      	movs	r4, r1
    1a32:	0015      	movs	r5, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    1a34:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    1a36:	4b0e      	ldr	r3, [pc, #56]	; (1a70 <usb_d_ep_register_callback+0x44>)
    1a38:	2d00      	cmp	r5, #0
    1a3a:	d000      	beq.n	1a3e <usb_d_ep_register_callback+0x12>
    1a3c:	002b      	movs	r3, r5
	if (ep_index < 0) {
    1a3e:	2800      	cmp	r0, #0
    1a40:	db13      	blt.n	1a6a <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    1a42:	2c01      	cmp	r4, #1
    1a44:	d00d      	beq.n	1a62 <usb_d_ep_register_callback+0x36>
    1a46:	2c00      	cmp	r4, #0
    1a48:	d006      	beq.n	1a58 <usb_d_ep_register_callback+0x2c>
    1a4a:	2c02      	cmp	r4, #2
    1a4c:	d10d      	bne.n	1a6a <usb_d_ep_register_callback+0x3e>
		break;
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    1a4e:	4a09      	ldr	r2, [pc, #36]	; (1a74 <usb_d_ep_register_callback+0x48>)
    1a50:	0140      	lsls	r0, r0, #5
    1a52:	1810      	adds	r0, r2, r0
    1a54:	61c3      	str	r3, [r0, #28]
		break;
    1a56:	e008      	b.n	1a6a <usb_d_ep_register_callback+0x3e>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    1a58:	4a06      	ldr	r2, [pc, #24]	; (1a74 <usb_d_ep_register_callback+0x48>)
    1a5a:	0140      	lsls	r0, r0, #5
    1a5c:	1810      	adds	r0, r2, r0
    1a5e:	6143      	str	r3, [r0, #20]
		break;
    1a60:	e003      	b.n	1a6a <usb_d_ep_register_callback+0x3e>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    1a62:	4a04      	ldr	r2, [pc, #16]	; (1a74 <usb_d_ep_register_callback+0x48>)
    1a64:	0140      	lsls	r0, r0, #5
    1a66:	1810      	adds	r0, r2, r0
    1a68:	6183      	str	r3, [r0, #24]
	default:
		break;
	}
}
    1a6a:	bd70      	pop	{r4, r5, r6, pc}
    1a6c:	000015a1 	.word	0x000015a1
    1a70:	000015c9 	.word	0x000015c9
    1a74:	20000298 	.word	0x20000298

00001a78 <main>:
#include <atmel_start.h>

int main(void)
{
    1a78:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    1a7a:	4b01      	ldr	r3, [pc, #4]	; (1a80 <main+0x8>)
    1a7c:	4798      	blx	r3
    1a7e:	e7fe      	b.n	1a7e <main+0x6>
    1a80:	00001ee1 	.word	0x00001ee1

00001a84 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    1a84:	b570      	push	{r4, r5, r6, lr}
    1a86:	24ff      	movs	r4, #255	; 0xff
	uint8_t port = GPIO_PORT(gpio);
	uint8_t pin  = GPIO_PIN(gpio);
    1a88:	221f      	movs	r2, #31
	uint8_t port = GPIO_PORT(gpio);
    1a8a:	0943      	lsrs	r3, r0, #5
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1a8c:	401c      	ands	r4, r3
	uint8_t pin  = GPIO_PIN(gpio);
    1a8e:	b2c0      	uxtb	r0, r0
    1a90:	4002      	ands	r2, r0
    1a92:	01e4      	lsls	r4, r4, #7

	if (function == GPIO_PIN_FUNCTION_OFF) {
    1a94:	1c4d      	adds	r5, r1, #1
    1a96:	d107      	bne.n	1aa8 <_gpio_set_pin_function+0x24>
    1a98:	4b11      	ldr	r3, [pc, #68]	; (1ae0 <_gpio_set_pin_function+0x5c>)
    1a9a:	1912      	adds	r2, r2, r4
    1a9c:	18d2      	adds	r2, r2, r3
    1a9e:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1aa0:	3102      	adds	r1, #2
    1aa2:	438b      	bics	r3, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1aa4:	7013      	strb	r3, [r2, #0]
    1aa6:	e01a      	b.n	1ade <_gpio_set_pin_function+0x5a>
	tmp &= ~PORT_PINCFG_PMUXEN;
    1aa8:	2501      	movs	r5, #1
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1aaa:	4b0e      	ldr	r3, [pc, #56]	; (1ae4 <_gpio_set_pin_function+0x60>)
    1aac:	18e3      	adds	r3, r4, r3
    1aae:	189e      	adds	r6, r3, r2
    1ab0:	40ea      	lsrs	r2, r5
    1ab2:	3640      	adds	r6, #64	; 0x40
    1ab4:	7834      	ldrb	r4, [r6, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1ab6:	189b      	adds	r3, r3, r2
	tmp &= ~PORT_PINCFG_PMUXEN;
    1ab8:	43ac      	bics	r4, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1aba:	432c      	orrs	r4, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1abc:	7034      	strb	r4, [r6, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1abe:	3330      	adds	r3, #48	; 0x30
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);

	} else {
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);

		if (pin & 1) {
    1ac0:	4228      	tst	r0, r5
    1ac2:	d006      	beq.n	1ad2 <_gpio_set_pin_function+0x4e>
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1ac4:	220f      	movs	r2, #15
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1ac6:	7818      	ldrb	r0, [r3, #0]
	tmp |= PORT_PMUX_PMUXO(data);
    1ac8:	0109      	lsls	r1, r1, #4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1aca:	4002      	ands	r2, r0
	tmp |= PORT_PMUX_PMUXO(data);
    1acc:	4311      	orrs	r1, r2
    1ace:	b2c9      	uxtb	r1, r1
    1ad0:	e004      	b.n	1adc <_gpio_set_pin_function+0x58>
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1ad2:	220f      	movs	r2, #15
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1ad4:	7818      	ldrb	r0, [r3, #0]
	tmp |= PORT_PMUX_PMUXE(data);
    1ad6:	4011      	ands	r1, r2
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1ad8:	4390      	bics	r0, r2
	tmp |= PORT_PMUX_PMUXE(data);
    1ada:	4301      	orrs	r1, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1adc:	7019      	strb	r1, [r3, #0]
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    1ade:	bd70      	pop	{r4, r5, r6, pc}
    1ae0:	41004440 	.word	0x41004440
    1ae4:	41004400 	.word	0x41004400

00001ae8 <SPI_0_PORT_init>:
#include <hpl_pm_base.h>

struct spi_m_sync_descriptor SPI_0;

void SPI_0_PORT_init(void)
{
    1ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1aea:	25c0      	movs	r5, #192	; 0xc0
    1aec:	2380      	movs	r3, #128	; 0x80
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1aee:	27c0      	movs	r7, #192	; 0xc0
    1af0:	4c12      	ldr	r4, [pc, #72]	; (1b3c <SPI_0_PORT_init+0x54>)
    1af2:	4a13      	ldr	r2, [pc, #76]	; (1b40 <SPI_0_PORT_init+0x58>)
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1af4:	05ed      	lsls	r5, r5, #23
    1af6:	01db      	lsls	r3, r3, #7
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1af8:	063f      	lsls	r7, r7, #24
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1afa:	60ab      	str	r3, [r5, #8]
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
	_gpio_set_pin_function(pin, function);
    1afc:	4e11      	ldr	r6, [pc, #68]	; (1b44 <SPI_0_PORT_init+0x5c>)
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1afe:	62a2      	str	r2, [r4, #40]	; 0x28
    1b00:	4911      	ldr	r1, [pc, #68]	; (1b48 <SPI_0_PORT_init+0x60>)
    1b02:	62a7      	str	r7, [r4, #40]	; 0x28
    1b04:	200e      	movs	r0, #14
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1b06:	616b      	str	r3, [r5, #20]
    1b08:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1b0a:	2380      	movs	r3, #128	; 0x80
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1b0c:	4a0f      	ldr	r2, [pc, #60]	; (1b4c <SPI_0_PORT_init+0x64>)
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1b0e:	021b      	lsls	r3, r3, #8
    1b10:	60ab      	str	r3, [r5, #8]
    1b12:	490f      	ldr	r1, [pc, #60]	; (1b50 <SPI_0_PORT_init+0x68>)
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1b14:	62a2      	str	r2, [r4, #40]	; 0x28
    1b16:	200f      	movs	r0, #15
    1b18:	62a7      	str	r7, [r4, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1b1a:	616b      	str	r3, [r5, #20]
    1b1c:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1b1e:	2320      	movs	r3, #32
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1b20:	2204      	movs	r2, #4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1b22:	606b      	str	r3, [r5, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1b24:	4b0b      	ldr	r3, [pc, #44]	; (1b54 <SPI_0_PORT_init+0x6c>)
    1b26:	490c      	ldr	r1, [pc, #48]	; (1b58 <SPI_0_PORT_init+0x70>)
    1b28:	62a3      	str	r3, [r4, #40]	; 0x28
    1b2a:	4b0c      	ldr	r3, [pc, #48]	; (1b5c <SPI_0_PORT_init+0x74>)
    1b2c:	2005      	movs	r0, #5
    1b2e:	62a3      	str	r3, [r4, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1b30:	3445      	adds	r4, #69	; 0x45
    1b32:	7823      	ldrb	r3, [r4, #0]
    1b34:	4393      	bics	r3, r2
    1b36:	7023      	strb	r3, [r4, #0]
    1b38:	47b0      	blx	r6
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA05, PINMUX_PA05C_SERCOM0_PAD3);
}
    1b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b3c:	41004400 	.word	0x41004400
    1b40:	40004000 	.word	0x40004000
    1b44:	00001a85 	.word	0x00001a85
    1b48:	000e0002 	.word	0x000e0002
    1b4c:	40008000 	.word	0x40008000
    1b50:	000f0002 	.word	0x000f0002
    1b54:	40020020 	.word	0x40020020
    1b58:	00050002 	.word	0x00050002
    1b5c:	c0020000 	.word	0xc0020000

00001b60 <SPI_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
    1b60:	2104      	movs	r1, #4
    1b62:	4a04      	ldr	r2, [pc, #16]	; (1b74 <SPI_0_CLOCK_init+0x14>)
    1b64:	6a13      	ldr	r3, [r2, #32]
    1b66:	430b      	orrs	r3, r1
    1b68:	6213      	str	r3, [r2, #32]
	((Gclk *)hw)->CLKCTRL.reg = data;
    1b6a:	4a03      	ldr	r2, [pc, #12]	; (1b78 <SPI_0_CLOCK_init+0x18>)
    1b6c:	4b03      	ldr	r3, [pc, #12]	; (1b7c <SPI_0_CLOCK_init+0x1c>)
    1b6e:	805a      	strh	r2, [r3, #2]

void SPI_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
}
    1b70:	4770      	bx	lr
    1b72:	46c0      	nop			; (mov r8, r8)
    1b74:	40000400 	.word	0x40000400
    1b78:	0000420e 	.word	0x0000420e
    1b7c:	40000c00 	.word	0x40000c00

00001b80 <SPI_0_init>:

void SPI_0_init(void)
{
    1b80:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
    1b82:	4b04      	ldr	r3, [pc, #16]	; (1b94 <SPI_0_init+0x14>)
    1b84:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM0);
    1b86:	4904      	ldr	r1, [pc, #16]	; (1b98 <SPI_0_init+0x18>)
    1b88:	4b04      	ldr	r3, [pc, #16]	; (1b9c <SPI_0_init+0x1c>)
    1b8a:	4805      	ldr	r0, [pc, #20]	; (1ba0 <SPI_0_init+0x20>)
    1b8c:	4798      	blx	r3
	SPI_0_PORT_init();
    1b8e:	4b05      	ldr	r3, [pc, #20]	; (1ba4 <SPI_0_init+0x24>)
    1b90:	4798      	blx	r3
}
    1b92:	bd10      	pop	{r4, pc}
    1b94:	00001b61 	.word	0x00001b61
    1b98:	42000800 	.word	0x42000800
    1b9c:	0000038d 	.word	0x0000038d
    1ba0:	200002d8 	.word	0x200002d8
    1ba4:	00001ae9 	.word	0x00001ae9

00001ba8 <USB_0_PORT_init>:

void USB_0_PORT_init(void)
{
    1ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1baa:	25c0      	movs	r5, #192	; 0xc0
    1bac:	2380      	movs	r3, #128	; 0x80
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1bae:	2780      	movs	r7, #128	; 0x80
    1bb0:	4c11      	ldr	r4, [pc, #68]	; (1bf8 <USB_0_PORT_init+0x50>)
    1bb2:	4a12      	ldr	r2, [pc, #72]	; (1bfc <USB_0_PORT_init+0x54>)
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1bb4:	05ed      	lsls	r5, r5, #23
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1bb6:	05ff      	lsls	r7, r7, #23
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1bb8:	045b      	lsls	r3, r3, #17
    1bba:	60ab      	str	r3, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1bbc:	62a7      	str	r7, [r4, #40]	; 0x28
    1bbe:	62a2      	str	r2, [r4, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1bc0:	0022      	movs	r2, r4
    1bc2:	2604      	movs	r6, #4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1bc4:	616b      	str	r3, [r5, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1bc6:	3258      	adds	r2, #88	; 0x58
    1bc8:	7813      	ldrb	r3, [r2, #0]
    1bca:	490d      	ldr	r1, [pc, #52]	; (1c00 <USB_0_PORT_init+0x58>)
    1bcc:	43b3      	bics	r3, r6
    1bce:	7013      	strb	r3, [r2, #0]
    1bd0:	2018      	movs	r0, #24
    1bd2:	4b0c      	ldr	r3, [pc, #48]	; (1c04 <USB_0_PORT_init+0x5c>)
    1bd4:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1bd6:	2380      	movs	r3, #128	; 0x80
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1bd8:	4a0b      	ldr	r2, [pc, #44]	; (1c08 <USB_0_PORT_init+0x60>)
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1bda:	049b      	lsls	r3, r3, #18
    1bdc:	60ab      	str	r3, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1bde:	62a7      	str	r7, [r4, #40]	; 0x28
    1be0:	62a2      	str	r2, [r4, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1be2:	616b      	str	r3, [r5, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1be4:	3459      	adds	r4, #89	; 0x59
    1be6:	7823      	ldrb	r3, [r4, #0]
    1be8:	4908      	ldr	r1, [pc, #32]	; (1c0c <USB_0_PORT_init+0x64>)
    1bea:	43b3      	bics	r3, r6
    1bec:	7023      	strb	r3, [r4, #0]
    1bee:	2019      	movs	r0, #25
    1bf0:	4b04      	ldr	r3, [pc, #16]	; (1c04 <USB_0_PORT_init+0x5c>)
    1bf2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
    1bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1bf6:	46c0      	nop			; (mov r8, r8)
    1bf8:	41004400 	.word	0x41004400
    1bfc:	c0000100 	.word	0xc0000100
    1c00:	00180006 	.word	0x00180006
    1c04:	00001a85 	.word	0x00001a85
    1c08:	c0000200 	.word	0xc0000200
    1c0c:	00190006 	.word	0x00190006

00001c10 <USB_0_CLOCK_init>:
			PM->APBBMASK.reg |= 1 << peripheral;
    1c10:	2120      	movs	r1, #32
    1c12:	4b06      	ldr	r3, [pc, #24]	; (1c2c <USB_0_CLOCK_init+0x1c>)
    1c14:	69da      	ldr	r2, [r3, #28]
    1c16:	430a      	orrs	r2, r1
    1c18:	61da      	str	r2, [r3, #28]
			PM->AHBMASK.reg |= 1 << peripheral;
    1c1a:	695a      	ldr	r2, [r3, #20]
    1c1c:	1849      	adds	r1, r1, r1
    1c1e:	430a      	orrs	r2, r1
    1c20:	615a      	str	r2, [r3, #20]
    1c22:	4a03      	ldr	r2, [pc, #12]	; (1c30 <USB_0_CLOCK_init+0x20>)
    1c24:	4b03      	ldr	r3, [pc, #12]	; (1c34 <USB_0_CLOCK_init+0x24>)
    1c26:	805a      	strh	r2, [r3, #2]
{

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
}
    1c28:	4770      	bx	lr
    1c2a:	46c0      	nop			; (mov r8, r8)
    1c2c:	40000400 	.word	0x40000400
    1c30:	00004006 	.word	0x00004006
    1c34:	40000c00 	.word	0x40000c00

00001c38 <USB_0_init>:

void USB_0_init(void)
{
    1c38:	b510      	push	{r4, lr}
	USB_0_CLOCK_init();
    1c3a:	4b03      	ldr	r3, [pc, #12]	; (1c48 <USB_0_init+0x10>)
    1c3c:	4798      	blx	r3
	usb_d_init();
    1c3e:	4b03      	ldr	r3, [pc, #12]	; (1c4c <USB_0_init+0x14>)
    1c40:	4798      	blx	r3
	USB_0_PORT_init();
    1c42:	4b03      	ldr	r3, [pc, #12]	; (1c50 <USB_0_init+0x18>)
    1c44:	4798      	blx	r3
}
    1c46:	bd10      	pop	{r4, pc}
    1c48:	00001c11 	.word	0x00001c11
    1c4c:	00001779 	.word	0x00001779
    1c50:	00001ba9 	.word	0x00001ba9

00001c54 <system_init>:

void system_init(void)
{
    1c54:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    1c56:	4b03      	ldr	r3, [pc, #12]	; (1c64 <system_init+0x10>)
    1c58:	4798      	blx	r3
	init_mcu();

	SPI_0_init();
    1c5a:	4b03      	ldr	r3, [pc, #12]	; (1c68 <system_init+0x14>)
    1c5c:	4798      	blx	r3

	USB_0_init();
    1c5e:	4b03      	ldr	r3, [pc, #12]	; (1c6c <system_init+0x18>)
    1c60:	4798      	blx	r3
}
    1c62:	bd10      	pop	{r4, pc}
    1c64:	00001315 	.word	0x00001315
    1c68:	00001b81 	.word	0x00001b81
    1c6c:	00001c39 	.word	0x00001c39

00001c70 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (sercomspi_regs[i].n == n) {
    1c72:	4b59      	ldr	r3, [pc, #356]	; (1dd8 <_spi_m_sync_init+0x168>)
{
    1c74:	0006      	movs	r6, r0
		if (sercomspi_regs[i].n == n) {
    1c76:	18c8      	adds	r0, r1, r3
    1c78:	0a80      	lsrs	r0, r0, #10
    1c7a:	b2c0      	uxtb	r0, r0
{
    1c7c:	000d      	movs	r5, r1
    1c7e:	4f57      	ldr	r7, [pc, #348]	; (1ddc <_spi_m_sync_init+0x16c>)
		if (sercomspi_regs[i].n == n) {
    1c80:	2800      	cmp	r0, #0
    1c82:	d000      	beq.n	1c86 <_spi_m_sync_init+0x16>
    1c84:	e09c      	b.n	1dc0 <_spi_m_sync_init+0x150>
    1c86:	4c56      	ldr	r4, [pc, #344]	; (1de0 <_spi_m_sync_init+0x170>)
			return &sercomspi_regs[i];
    1c88:	3418      	adds	r4, #24
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    1c8a:	2e00      	cmp	r6, #0
    1c8c:	d002      	beq.n	1c94 <_spi_m_sync_init+0x24>
    1c8e:	0028      	movs	r0, r5
    1c90:	1e43      	subs	r3, r0, #1
    1c92:	4198      	sbcs	r0, r3
    1c94:	2301      	movs	r3, #1
    1c96:	4a53      	ldr	r2, [pc, #332]	; (1de4 <_spi_m_sync_init+0x174>)
    1c98:	4018      	ands	r0, r3
    1c9a:	0039      	movs	r1, r7
    1c9c:	4b52      	ldr	r3, [pc, #328]	; (1de8 <_spi_m_sync_init+0x178>)
    1c9e:	4798      	blx	r3

	if (regs == NULL) {
    1ca0:	2c00      	cmp	r4, #0
    1ca2:	d100      	bne.n	1ca6 <_spi_m_sync_init+0x36>
    1ca4:	e095      	b.n	1dd2 <_spi_m_sync_init+0x162>
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1ca6:	2301      	movs	r3, #1
    1ca8:	69ea      	ldr	r2, [r5, #28]
    1caa:	421a      	tst	r2, r3
    1cac:	d1fc      	bne.n	1ca8 <_spi_m_sync_init+0x38>
    1cae:	2303      	movs	r3, #3
    1cb0:	69ea      	ldr	r2, [r5, #28]
    1cb2:	421a      	tst	r2, r3
    1cb4:	d1fc      	bne.n	1cb0 <_spi_m_sync_init+0x40>

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1cb6:	682b      	ldr	r3, [r5, #0]
		return ERR_INVALID_ARG;
	}

	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
	if (hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    1cb8:	079b      	lsls	r3, r3, #30
    1cba:	d47f      	bmi.n	1dbc <_spi_m_sync_init+0x14c>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1cbc:	2201      	movs	r2, #1
    1cbe:	69e9      	ldr	r1, [r5, #28]
    1cc0:	2301      	movs	r3, #1
    1cc2:	4211      	tst	r1, r2
    1cc4:	d1fb      	bne.n	1cbe <_spi_m_sync_init+0x4e>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
    1cc6:	682a      	ldr	r2, [r5, #0]
    1cc8:	431a      	orrs	r2, r3
    1cca:	602a      	str	r2, [r5, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1ccc:	69ea      	ldr	r2, [r5, #28]
    1cce:	421a      	tst	r2, r3
    1cd0:	d1fc      	bne.n	1ccc <_spi_m_sync_init+0x5c>
	}
	hri_sercomspi_set_CTRLA_SWRST_bit(hw);
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
	dev->prvt = hw;

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    1cd2:	231c      	movs	r3, #28
	dev->prvt = hw;
    1cd4:	6035      	str	r5, [r6, #0]
	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    1cd6:	7822      	ldrb	r2, [r4, #0]
    1cd8:	4013      	ands	r3, r2
    1cda:	2b08      	cmp	r3, #8
    1cdc:	d136      	bne.n	1d4c <_spi_m_sync_init+0xdc>
	ASSERT(hw && regs);
    1cde:	4a43      	ldr	r2, [pc, #268]	; (1dec <_spi_m_sync_init+0x17c>)
    1ce0:	2001      	movs	r0, #1
    1ce2:	4b41      	ldr	r3, [pc, #260]	; (1de8 <_spi_m_sync_init+0x178>)
    1ce4:	0039      	movs	r1, r7
    1ce6:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1ce8:	7862      	ldrb	r2, [r4, #1]
    1cea:	7820      	ldrb	r0, [r4, #0]
    1cec:	78a3      	ldrb	r3, [r4, #2]
    1cee:	0212      	lsls	r2, r2, #8
    1cf0:	4302      	orrs	r2, r0
    1cf2:	041b      	lsls	r3, r3, #16
    1cf4:	4313      	orrs	r3, r2
    1cf6:	001a      	movs	r2, r3
    1cf8:	78e3      	ldrb	r3, [r4, #3]
    1cfa:	061b      	lsls	r3, r3, #24
    1cfc:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    1cfe:	4a3c      	ldr	r2, [pc, #240]	; (1df0 <_spi_m_sync_init+0x180>)
    1d00:	4013      	ands	r3, r2
}

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1d02:	602b      	str	r3, [r5, #0]
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    1d04:	7962      	ldrb	r2, [r4, #5]
    1d06:	7920      	ldrb	r0, [r4, #4]
    1d08:	79a3      	ldrb	r3, [r4, #6]
    1d0a:	0212      	lsls	r2, r2, #8
    1d0c:	4302      	orrs	r2, r0
    1d0e:	041b      	lsls	r3, r3, #16
    1d10:	4313      	orrs	r3, r2
    1d12:	001a      	movs	r2, r3
    1d14:	79e3      	ldrb	r3, [r4, #7]
    1d16:	061b      	lsls	r3, r3, #24
    1d18:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLB_reg(hw,
    1d1a:	4a36      	ldr	r2, [pc, #216]	; (1df4 <_spi_m_sync_init+0x184>)
    1d1c:	4013      	ands	r3, r2
    1d1e:	4a36      	ldr	r2, [pc, #216]	; (1df8 <_spi_m_sync_init+0x188>)
    1d20:	4313      	orrs	r3, r2
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1d22:	606b      	str	r3, [r5, #4]
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    1d24:	7a62      	ldrb	r2, [r4, #9]
    1d26:	7a20      	ldrb	r0, [r4, #8]
    1d28:	7aa3      	ldrb	r3, [r4, #10]
    1d2a:	0212      	lsls	r2, r2, #8
    1d2c:	4302      	orrs	r2, r0
    1d2e:	041b      	lsls	r3, r3, #16
    1d30:	4313      	orrs	r3, r2
    1d32:	001a      	movs	r2, r3
    1d34:	7ae3      	ldrb	r3, [r4, #11]
    1d36:	061b      	lsls	r3, r3, #24
    1d38:	4313      	orrs	r3, r2
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    1d3a:	626b      	str	r3, [r5, #36]	; 0x24
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1d3c:	002b      	movs	r3, r5
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1d3e:	7b62      	ldrb	r2, [r4, #13]
    1d40:	3330      	adds	r3, #48	; 0x30
    1d42:	701a      	strb	r2, [r3, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1d44:	69eb      	ldr	r3, [r5, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    1d46:	2b00      	cmp	r3, #0
    1d48:	d1fc      	bne.n	1d44 <_spi_m_sync_init+0xd4>
    1d4a:	e028      	b.n	1d9e <_spi_m_sync_init+0x12e>
	ASSERT(hw && regs);
    1d4c:	4a2b      	ldr	r2, [pc, #172]	; (1dfc <_spi_m_sync_init+0x18c>)
    1d4e:	2001      	movs	r0, #1
    1d50:	4b25      	ldr	r3, [pc, #148]	; (1de8 <_spi_m_sync_init+0x178>)
    1d52:	0039      	movs	r1, r7
    1d54:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1d56:	7862      	ldrb	r2, [r4, #1]
    1d58:	7820      	ldrb	r0, [r4, #0]
    1d5a:	78a3      	ldrb	r3, [r4, #2]
    1d5c:	0212      	lsls	r2, r2, #8
    1d5e:	4302      	orrs	r2, r0
    1d60:	041b      	lsls	r3, r3, #16
    1d62:	4313      	orrs	r3, r2
    1d64:	001a      	movs	r2, r3
    1d66:	78e3      	ldrb	r3, [r4, #3]
    1d68:	061b      	lsls	r3, r3, #24
    1d6a:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    1d6c:	4a20      	ldr	r2, [pc, #128]	; (1df0 <_spi_m_sync_init+0x180>)
    1d6e:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1d70:	602b      	str	r3, [r5, #0]
	    (regs->ctrlb
    1d72:	7962      	ldrb	r2, [r4, #5]
    1d74:	7920      	ldrb	r0, [r4, #4]
    1d76:	79a3      	ldrb	r3, [r4, #6]
    1d78:	0212      	lsls	r2, r2, #8
    1d7a:	4302      	orrs	r2, r0
    1d7c:	041b      	lsls	r3, r3, #16
    1d7e:	4313      	orrs	r3, r2
    1d80:	001a      	movs	r2, r3
    1d82:	79e3      	ldrb	r3, [r4, #7]
    1d84:	061b      	lsls	r3, r3, #24
    1d86:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLB_reg(
    1d88:	4a1d      	ldr	r2, [pc, #116]	; (1e00 <_spi_m_sync_init+0x190>)
    1d8a:	4013      	ands	r3, r2
    1d8c:	2280      	movs	r2, #128	; 0x80
    1d8e:	0292      	lsls	r2, r2, #10
    1d90:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1d92:	606b      	str	r3, [r5, #4]
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    1d94:	7b23      	ldrb	r3, [r4, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1d96:	732b      	strb	r3, [r5, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1d98:	7b63      	ldrb	r3, [r4, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1d9a:	3530      	adds	r5, #48	; 0x30
    1d9c:	702b      	strb	r3, [r5, #0]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1d9e:	2307      	movs	r3, #7
    1da0:	7922      	ldrb	r2, [r4, #4]

	dev->dummy_byte = regs->dummy_byte;

	return ERR_NONE;
    1da2:	2000      	movs	r0, #0
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1da4:	4013      	ands	r3, r2
    1da6:	425a      	negs	r2, r3
    1da8:	4153      	adcs	r3, r2
    1daa:	2202      	movs	r2, #2
    1dac:	1ad3      	subs	r3, r2, r3
    1dae:	7133      	strb	r3, [r6, #4]
	dev->dummy_byte = regs->dummy_byte;
    1db0:	7be3      	ldrb	r3, [r4, #15]
    1db2:	7ba2      	ldrb	r2, [r4, #14]
    1db4:	021b      	lsls	r3, r3, #8
    1db6:	4313      	orrs	r3, r2
    1db8:	80f3      	strh	r3, [r6, #6]
	return ERR_NONE;
    1dba:	e00c      	b.n	1dd6 <_spi_m_sync_init+0x166>
		return ERR_DENIED;
    1dbc:	2011      	movs	r0, #17
    1dbe:	e009      	b.n	1dd4 <_spi_m_sync_init+0x164>
	return NULL;
    1dc0:	2400      	movs	r4, #0
	ASSERT(dev && hw);
    1dc2:	42a6      	cmp	r6, r4
    1dc4:	d000      	beq.n	1dc8 <_spi_m_sync_init+0x158>
    1dc6:	e762      	b.n	1c8e <_spi_m_sync_init+0x1e>
    1dc8:	4a06      	ldr	r2, [pc, #24]	; (1de4 <_spi_m_sync_init+0x174>)
    1dca:	0039      	movs	r1, r7
    1dcc:	0030      	movs	r0, r6
    1dce:	4b06      	ldr	r3, [pc, #24]	; (1de8 <_spi_m_sync_init+0x178>)
    1dd0:	4798      	blx	r3
		return ERR_INVALID_ARG;
    1dd2:	200d      	movs	r0, #13
    1dd4:	4240      	negs	r0, r0
}
    1dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1dd8:	bdfff800 	.word	0xbdfff800
    1ddc:	000027b9 	.word	0x000027b9
    1de0:	00002790 	.word	0x00002790
    1de4:	00000915 	.word	0x00000915
    1de8:	0000139d 	.word	0x0000139d
    1dec:	000008f3 	.word	0x000008f3
    1df0:	fffffefc 	.word	0xfffffefc
    1df4:	fffdddbf 	.word	0xfffdddbf
    1df8:	00020240 	.word	0x00020240
    1dfc:	000008df 	.word	0x000008df
    1e00:	fffd1dbf 	.word	0xfffd1dbf

00001e04 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    1e04:	b5f0      	push	{r4, r5, r6, r7, lr}
	void *                 hw   = dev->prvt;
    1e06:	6804      	ldr	r4, [r0, #0]
{
    1e08:	b085      	sub	sp, #20
    1e0a:	9002      	str	r0, [sp, #8]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    1e0c:	7903      	ldrb	r3, [r0, #4]

	ASSERT(dev && hw);
    1e0e:	0020      	movs	r0, r4
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    1e10:	9303      	str	r3, [sp, #12]
	ASSERT(dev && hw);
    1e12:	1e43      	subs	r3, r0, #1
    1e14:	4198      	sbcs	r0, r3
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    1e16:	680e      	ldr	r6, [r1, #0]
    1e18:	684d      	ldr	r5, [r1, #4]
	ASSERT(dev && hw);
    1e1a:	4b2e      	ldr	r3, [pc, #184]	; (1ed4 <_spi_m_sync_trans+0xd0>)
{
    1e1c:	000f      	movs	r7, r1
	ASSERT(dev && hw);
    1e1e:	b2c0      	uxtb	r0, r0
    1e20:	4a2d      	ldr	r2, [pc, #180]	; (1ed8 <_spi_m_sync_trans+0xd4>)
    1e22:	492e      	ldr	r1, [pc, #184]	; (1edc <_spi_m_sync_trans+0xd8>)
    1e24:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1e26:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    1e28:	075b      	lsls	r3, r3, #29
    1e2a:	d13a      	bne.n	1ea2 <_spi_m_sync_trans+0x9e>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1e2c:	2203      	movs	r2, #3
    1e2e:	69e3      	ldr	r3, [r4, #28]
    1e30:	4013      	ands	r3, r2
    1e32:	d1fc      	bne.n	1e2e <_spi_m_sync_trans+0x2a>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1e34:	6822      	ldr	r2, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    1e36:	0792      	lsls	r2, r2, #30
    1e38:	d535      	bpl.n	1ea6 <_spi_m_sync_trans+0xa2>
    1e3a:	0018      	movs	r0, r3
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    1e3c:	7e21      	ldrb	r1, [r4, #24]
    1e3e:	b2ca      	uxtb	r2, r1
    1e40:	9201      	str	r2, [sp, #4]
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    1e42:	2204      	movs	r2, #4
    1e44:	9901      	ldr	r1, [sp, #4]
    1e46:	4211      	tst	r1, r2
    1e48:	d00d      	beq.n	1e66 <_spi_m_sync_trans+0x62>
	return ((Sercom *)hw)->SPI.DATA.reg;
    1e4a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    1e4c:	2d00      	cmp	r5, #0
    1e4e:	d008      	beq.n	1e62 <_spi_m_sync_trans+0x5e>
		if (ctrl->char_size > 1) {
    1e50:	9903      	ldr	r1, [sp, #12]
		*ctrl->rxbuf++ = (uint8_t)data;
    1e52:	702a      	strb	r2, [r5, #0]
		if (ctrl->char_size > 1) {
    1e54:	2901      	cmp	r1, #1
    1e56:	d801      	bhi.n	1e5c <_spi_m_sync_trans+0x58>
		*ctrl->rxbuf++ = (uint8_t)data;
    1e58:	3501      	adds	r5, #1
    1e5a:	e002      	b.n	1e62 <_spi_m_sync_trans+0x5e>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    1e5c:	0a12      	lsrs	r2, r2, #8
    1e5e:	706a      	strb	r2, [r5, #1]
    1e60:	3502      	adds	r5, #2
	ctrl->rxcnt++;
    1e62:	3301      	adds	r3, #1
    1e64:	e005      	b.n	1e72 <_spi_m_sync_trans+0x6e>
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    1e66:	4283      	cmp	r3, r0
    1e68:	d303      	bcc.n	1e72 <_spi_m_sync_trans+0x6e>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    1e6a:	2201      	movs	r2, #1
    1e6c:	9901      	ldr	r1, [sp, #4]
    1e6e:	4211      	tst	r1, r2
    1e70:	d11c      	bne.n	1eac <_spi_m_sync_trans+0xa8>
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    1e72:	227f      	movs	r2, #127	; 0x7f
    1e74:	9901      	ldr	r1, [sp, #4]
    1e76:	4391      	bics	r1, r2
    1e78:	d007      	beq.n	1e8a <_spi_m_sync_trans+0x86>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    1e7a:	2301      	movs	r3, #1
		return ERR_OVERFLOW;
    1e7c:	2013      	movs	r0, #19
    1e7e:	425b      	negs	r3, r3
    1e80:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1e82:	3381      	adds	r3, #129	; 0x81
    1e84:	7623      	strb	r3, [r4, #24]
    1e86:	4240      	negs	r0, r0
    1e88:	e004      	b.n	1e94 <_spi_m_sync_trans+0x90>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    1e8a:	68ba      	ldr	r2, [r7, #8]
    1e8c:	4290      	cmp	r0, r2
    1e8e:	d3d5      	bcc.n	1e3c <_spi_m_sync_trans+0x38>
    1e90:	4293      	cmp	r3, r2
    1e92:	d3d3      	bcc.n	1e3c <_spi_m_sync_trans+0x38>
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    1e94:	2303      	movs	r3, #3
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    1e96:	7e22      	ldrb	r2, [r4, #24]
    1e98:	421a      	tst	r2, r3
    1e9a:	d0fc      	beq.n	1e96 <_spi_m_sync_trans+0x92>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1e9c:	2303      	movs	r3, #3
    1e9e:	7623      	strb	r3, [r4, #24]
    1ea0:	e015      	b.n	1ece <_spi_m_sync_trans+0xca>
		return ERR_BUSY;
    1ea2:	2004      	movs	r0, #4
    1ea4:	e000      	b.n	1ea8 <_spi_m_sync_trans+0xa4>
		return ERR_NOT_INITIALIZED;
    1ea6:	2014      	movs	r0, #20
    1ea8:	4240      	negs	r0, r0
    1eaa:	e010      	b.n	1ece <_spi_m_sync_trans+0xca>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    1eac:	9a02      	ldr	r2, [sp, #8]
    1eae:	88d2      	ldrh	r2, [r2, #6]
	if (ctrl->txbuf) {
    1eb0:	2e00      	cmp	r6, #0
    1eb2:	d009      	beq.n	1ec8 <_spi_m_sync_trans+0xc4>
		if (ctrl->char_size > 1) {
    1eb4:	9903      	ldr	r1, [sp, #12]
		data = *ctrl->txbuf++;
    1eb6:	7832      	ldrb	r2, [r6, #0]
		if (ctrl->char_size > 1) {
    1eb8:	2901      	cmp	r1, #1
    1eba:	d801      	bhi.n	1ec0 <_spi_m_sync_trans+0xbc>
		data = *ctrl->txbuf++;
    1ebc:	3601      	adds	r6, #1
    1ebe:	e003      	b.n	1ec8 <_spi_m_sync_trans+0xc4>
    1ec0:	7871      	ldrb	r1, [r6, #1]
			ctrl->txbuf++;
    1ec2:	3602      	adds	r6, #2
    1ec4:	0209      	lsls	r1, r1, #8
			data |= (*ctrl->txbuf) << 8;
    1ec6:	430a      	orrs	r2, r1
	ctrl->txcnt++;
    1ec8:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    1eca:	62a2      	str	r2, [r4, #40]	; 0x28
    1ecc:	e7d1      	b.n	1e72 <_spi_m_sync_trans+0x6e>
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    1ece:	b005      	add	sp, #20
    1ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ed2:	46c0      	nop			; (mov r8, r8)
    1ed4:	0000139d 	.word	0x0000139d
    1ed8:	00000a71 	.word	0x00000a71
    1edc:	000027b9 	.word	0x000027b9

00001ee0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
    1ee0:	b510      	push	{r4, lr}
	system_init();
    1ee2:	4b02      	ldr	r3, [pc, #8]	; (1eec <atmel_start_init+0xc>)
    1ee4:	4798      	blx	r3
	usb_init();
    1ee6:	4b02      	ldr	r3, [pc, #8]	; (1ef0 <atmel_start_init+0x10>)
    1ee8:	4798      	blx	r3
}
    1eea:	bd10      	pop	{r4, pc}
    1eec:	00001c55 	.word	0x00001c55
    1ef0:	000013d9 	.word	0x000013d9

00001ef4 <usbdc_unconfig>:
/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    1ef4:	4b06      	ldr	r3, [pc, #24]	; (1f10 <usbdc_unconfig+0x1c>)
{
    1ef6:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    1ef8:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    1efa:	2c00      	cmp	r4, #0
    1efc:	d006      	beq.n	1f0c <usbdc_unconfig+0x18>
		func->ctrl(func, USBDF_DISABLE, NULL);
    1efe:	0020      	movs	r0, r4
    1f00:	6863      	ldr	r3, [r4, #4]
    1f02:	2200      	movs	r2, #0
    1f04:	2101      	movs	r1, #1
    1f06:	4798      	blx	r3
		func = func->next;
    1f08:	6824      	ldr	r4, [r4, #0]
    1f0a:	e7f6      	b.n	1efa <usbdc_unconfig+0x6>
	}
}
    1f0c:	bd10      	pop	{r4, pc}
    1f0e:	46c0      	nop			; (mov r8, r8)
    1f10:	200002b8 	.word	0x200002b8

00001f14 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    1f14:	b570      	push	{r4, r5, r6, lr}
    1f16:	0005      	movs	r5, r0
    1f18:	000e      	movs	r6, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    1f1a:	4b06      	ldr	r3, [pc, #24]	; (1f34 <usbdc_change_notify+0x20>)
    1f1c:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    1f1e:	2c00      	cmp	r4, #0
    1f20:	d007      	beq.n	1f32 <usbdc_change_notify+0x1e>
		if (NULL != cg->cb) {
    1f22:	6863      	ldr	r3, [r4, #4]
    1f24:	2b00      	cmp	r3, #0
    1f26:	d002      	beq.n	1f2e <usbdc_change_notify+0x1a>
			cg->cb(change, value);
    1f28:	0031      	movs	r1, r6
    1f2a:	0028      	movs	r0, r5
    1f2c:	4798      	blx	r3
		}
		cg = cg->next;
    1f2e:	6824      	ldr	r4, [r4, #0]
    1f30:	e7f5      	b.n	1f1e <usbdc_change_notify+0xa>
	}
}
    1f32:	bd70      	pop	{r4, r5, r6, pc}
    1f34:	200002b8 	.word	0x200002b8

00001f38 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    1f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f3a:	0005      	movs	r5, r0
    1f3c:	000e      	movs	r6, r1
    1f3e:	0017      	movs	r7, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    1f40:	4b0b      	ldr	r3, [pc, #44]	; (1f70 <usbdc_request_handler+0x38>)
    1f42:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    1f44:	2c00      	cmp	r4, #0
    1f46:	d00f      	beq.n	1f68 <usbdc_request_handler+0x30>
		if (NULL != h->cb) {
    1f48:	6863      	ldr	r3, [r4, #4]
    1f4a:	2b00      	cmp	r3, #0
    1f4c:	d101      	bne.n	1f52 <usbdc_request_handler+0x1a>
				return true;
			} else if (ERR_NOT_FOUND != rc) {
				return -1;
			}
		}
		h = h->next;
    1f4e:	6824      	ldr	r4, [r4, #0]
    1f50:	e7f8      	b.n	1f44 <usbdc_request_handler+0xc>
			rc = h->cb(ep, req, stage);
    1f52:	003a      	movs	r2, r7
    1f54:	0031      	movs	r1, r6
    1f56:	0028      	movs	r0, r5
    1f58:	4798      	blx	r3
			if (0 == rc) {
    1f5a:	2800      	cmp	r0, #0
    1f5c:	d006      	beq.n	1f6c <usbdc_request_handler+0x34>
			} else if (ERR_NOT_FOUND != rc) {
    1f5e:	300a      	adds	r0, #10
    1f60:	d0f5      	beq.n	1f4e <usbdc_request_handler+0x16>
				return -1;
    1f62:	2001      	movs	r0, #1
    1f64:	4240      	negs	r0, r0
    1f66:	e002      	b.n	1f6e <usbdc_request_handler+0x36>
	}
	return false;
    1f68:	0020      	movs	r0, r4
    1f6a:	e000      	b.n	1f6e <usbdc_request_handler+0x36>
				return true;
    1f6c:	2001      	movs	r0, #1
}
    1f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1f70:	200002b8 	.word	0x200002b8

00001f74 <usbd_sof_cb>:
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    1f74:	4b05      	ldr	r3, [pc, #20]	; (1f8c <usbd_sof_cb+0x18>)

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    1f76:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    1f78:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    1f7a:	2c00      	cmp	r4, #0
    1f7c:	d005      	beq.n	1f8a <usbd_sof_cb+0x16>
		if (NULL != sof->cb) {
    1f7e:	6863      	ldr	r3, [r4, #4]
    1f80:	2b00      	cmp	r3, #0
    1f82:	d000      	beq.n	1f86 <usbd_sof_cb+0x12>
			sof->cb();
    1f84:	4798      	blx	r3
		sof = sof->next;
    1f86:	6824      	ldr	r4, [r4, #0]
    1f88:	e7f7      	b.n	1f7a <usbd_sof_cb+0x6>
	usbdc_sof_notify();
}
    1f8a:	bd10      	pop	{r4, pc}
    1f8c:	200002b8 	.word	0x200002b8

00001f90 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    1f90:	b510      	push	{r4, lr}
    1f92:	0014      	movs	r4, r2
	(void)ep;

	switch (code) {
    1f94:	2900      	cmp	r1, #0
    1f96:	d007      	beq.n	1fa8 <usbdc_cb_ctl_done+0x18>
    1f98:	2901      	cmp	r1, #1
    1f9a:	d128      	bne.n	1fee <usbdc_cb_ctl_done+0x5e>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    1f9c:	000a      	movs	r2, r1
    1f9e:	4b15      	ldr	r3, [pc, #84]	; (1ff4 <usbdc_cb_ctl_done+0x64>)
    1fa0:	0021      	movs	r1, r4
    1fa2:	2000      	movs	r0, #0
    1fa4:	4798      	blx	r3
	case USB_XFER_DONE:
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
    1fa6:	e022      	b.n	1fee <usbdc_cb_ctl_done+0x5e>
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    1fa8:	7813      	ldrb	r3, [r2, #0]
    1faa:	2b00      	cmp	r3, #0
    1fac:	d11f      	bne.n	1fee <usbdc_cb_ctl_done+0x5e>
	switch (req->bRequest) {
    1fae:	7853      	ldrb	r3, [r2, #1]
    1fb0:	2b05      	cmp	r3, #5
    1fb2:	d00d      	beq.n	1fd0 <usbdc_cb_ctl_done+0x40>
    1fb4:	2b09      	cmp	r3, #9
    1fb6:	d11a      	bne.n	1fee <usbdc_cb_ctl_done+0x5e>
		usbdc.cfg_value = req->wValue;
    1fb8:	78a3      	ldrb	r3, [r4, #2]
    1fba:	4a0f      	ldr	r2, [pc, #60]	; (1ff8 <usbdc_cb_ctl_done+0x68>)
    1fbc:	76d3      	strb	r3, [r2, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    1fbe:	78e1      	ldrb	r1, [r4, #3]
    1fc0:	78a3      	ldrb	r3, [r4, #2]
    1fc2:	0209      	lsls	r1, r1, #8
    1fc4:	4319      	orrs	r1, r3
    1fc6:	1e4b      	subs	r3, r1, #1
    1fc8:	4199      	sbcs	r1, r3
    1fca:	3103      	adds	r1, #3
    1fcc:	7691      	strb	r1, [r2, #26]
    1fce:	e00b      	b.n	1fe8 <usbdc_cb_ctl_done+0x58>
	usb_d_set_address(addr);
    1fd0:	4b0a      	ldr	r3, [pc, #40]	; (1ffc <usbdc_cb_ctl_done+0x6c>)
    1fd2:	7890      	ldrb	r0, [r2, #2]
    1fd4:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    1fd6:	78e1      	ldrb	r1, [r4, #3]
    1fd8:	78a3      	ldrb	r3, [r4, #2]
    1fda:	0209      	lsls	r1, r1, #8
    1fdc:	4319      	orrs	r1, r3
    1fde:	1e4b      	subs	r3, r1, #1
    1fe0:	4199      	sbcs	r1, r3
    1fe2:	4b05      	ldr	r3, [pc, #20]	; (1ff8 <usbdc_cb_ctl_done+0x68>)
    1fe4:	3102      	adds	r1, #2
    1fe6:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    1fe8:	2001      	movs	r0, #1
    1fea:	4b05      	ldr	r3, [pc, #20]	; (2000 <usbdc_cb_ctl_done+0x70>)
    1fec:	4798      	blx	r3
	default:
		break;
	}
	return false;
}
    1fee:	2000      	movs	r0, #0
    1ff0:	bd10      	pop	{r4, pc}
    1ff2:	46c0      	nop			; (mov r8, r8)
    1ff4:	00001f39 	.word	0x00001f39
    1ff8:	200002b8 	.word	0x200002b8
    1ffc:	000017f9 	.word	0x000017f9
    2000:	00001f15 	.word	0x00001f15

00002004 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    2004:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();

	usbdc.state       = USBD_S_DEFAULT;
	usbdc.cfg_value   = 0;
    2006:	2400      	movs	r4, #0
	usbdc.state       = USBD_S_DEFAULT;
    2008:	2602      	movs	r6, #2
	usbdc_unconfig();
    200a:	4b0c      	ldr	r3, [pc, #48]	; (203c <usbdc_reset+0x38>)
    200c:	4798      	blx	r3
	usbdc.state       = USBD_S_DEFAULT;
    200e:	4d0c      	ldr	r5, [pc, #48]	; (2040 <usbdc_reset+0x3c>)
	usbdc.ifc_alt_map = 0;

	// Setup EP0
	usb_d_ep_deinit(0);
    2010:	0020      	movs	r0, r4
    2012:	4b0c      	ldr	r3, [pc, #48]	; (2044 <usbdc_reset+0x40>)
	usbdc.state       = USBD_S_DEFAULT;
    2014:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    2016:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    2018:	776c      	strb	r4, [r5, #29]
	usb_d_ep_deinit(0);
    201a:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    201c:	4b0a      	ldr	r3, [pc, #40]	; (2048 <usbdc_reset+0x44>)
    201e:	7f28      	ldrb	r0, [r5, #28]
    2020:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    2022:	4d0a      	ldr	r5, [pc, #40]	; (204c <usbdc_reset+0x48>)
    2024:	0021      	movs	r1, r4
    2026:	0020      	movs	r0, r4
    2028:	4a09      	ldr	r2, [pc, #36]	; (2050 <usbdc_reset+0x4c>)
    202a:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    202c:	0031      	movs	r1, r6
    202e:	4a09      	ldr	r2, [pc, #36]	; (2054 <usbdc_reset+0x50>)
    2030:	0020      	movs	r0, r4
    2032:	47a8      	blx	r5
	usb_d_ep_enable(0);
    2034:	0020      	movs	r0, r4
    2036:	4b08      	ldr	r3, [pc, #32]	; (2058 <usbdc_reset+0x54>)
    2038:	4798      	blx	r3
}
    203a:	bd70      	pop	{r4, r5, r6, pc}
    203c:	00001ef5 	.word	0x00001ef5
    2040:	200002b8 	.word	0x200002b8
    2044:	00001869 	.word	0x00001869
    2048:	00001855 	.word	0x00001855
    204c:	00001a2d 	.word	0x00001a2d
    2050:	00002099 	.word	0x00002099
    2054:	00001f91 	.word	0x00001f91
    2058:	00001895 	.word	0x00001895

0000205c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    205c:	b510      	push	{r4, lr}
	(void)param;

	switch (ev) {
    205e:	2800      	cmp	r0, #0
    2060:	d004      	beq.n	206c <usbd_event_cb+0x10>
    2062:	2801      	cmp	r0, #1
    2064:	d104      	bne.n	2070 <usbd_event_cb+0x14>
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
		break;

	case USB_EV_RESET:
		usbdc_reset();
    2066:	4b03      	ldr	r3, [pc, #12]	; (2074 <usbd_event_cb+0x18>)
    2068:	4798      	blx	r3
		break;

	default:
		break;
	}
}
    206a:	e001      	b.n	2070 <usbd_event_cb+0x14>
		usbdc_change_notify(USBDC_C_CONN, param);
    206c:	4b02      	ldr	r3, [pc, #8]	; (2078 <usbd_event_cb+0x1c>)
    206e:	4798      	blx	r3
}
    2070:	bd10      	pop	{r4, pc}
    2072:	46c0      	nop			; (mov r8, r8)
    2074:	00002005 	.word	0x00002005
    2078:	00001f15 	.word	0x00001f15

0000207c <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    207c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    207e:	ac01      	add	r4, sp, #4
    2080:	7220      	strb	r0, [r4, #8]
    2082:	7263      	strb	r3, [r4, #9]
	return usb_d_ep_transfer(&xfer);
    2084:	0020      	movs	r0, r4
    2086:	4b03      	ldr	r3, [pc, #12]	; (2094 <usbdc_xfer+0x18>)
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    2088:	9101      	str	r1, [sp, #4]
    208a:	9202      	str	r2, [sp, #8]
	return usb_d_ep_transfer(&xfer);
    208c:	4798      	blx	r3
}
    208e:	b004      	add	sp, #16
    2090:	bd10      	pop	{r4, pc}
    2092:	46c0      	nop			; (mov r8, r8)
    2094:	000018d5 	.word	0x000018d5

00002098 <usbdc_cb_ctl_req>:
{
    2098:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    209a:	4bbd      	ldr	r3, [pc, #756]	; (2390 <usbdc_cb_ctl_req+0x2f8>)
    209c:	2200      	movs	r2, #0
{
    209e:	0004      	movs	r4, r0
    20a0:	000d      	movs	r5, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    20a2:	4798      	blx	r3
		return false;
    20a4:	2200      	movs	r2, #0
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    20a6:	1c43      	adds	r3, r0, #1
    20a8:	d100      	bne.n	20ac <usbdc_cb_ctl_req+0x14>
    20aa:	e190      	b.n	23ce <usbdc_cb_ctl_req+0x336>
		return true;
    20ac:	3201      	adds	r2, #1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    20ae:	4290      	cmp	r0, r2
    20b0:	d100      	bne.n	20b4 <usbdc_cb_ctl_req+0x1c>
    20b2:	e18c      	b.n	23ce <usbdc_cb_ctl_req+0x336>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    20b4:	7829      	ldrb	r1, [r5, #0]
    20b6:	231f      	movs	r3, #31
    20b8:	000a      	movs	r2, r1
    20ba:	439a      	bics	r2, r3
    20bc:	d003      	beq.n	20c6 <usbdc_cb_ctl_req+0x2e>
    20be:	2a80      	cmp	r2, #128	; 0x80
    20c0:	d100      	bne.n	20c4 <usbdc_cb_ctl_req+0x2c>
    20c2:	e0b8      	b.n	2236 <usbdc_cb_ctl_req+0x19e>
    20c4:	e182      	b.n	23cc <usbdc_cb_ctl_req+0x334>
	switch (req->bRequest) {
    20c6:	7868      	ldrb	r0, [r5, #1]
    20c8:	3801      	subs	r0, #1
    20ca:	280a      	cmp	r0, #10
    20cc:	d900      	bls.n	20d0 <usbdc_cb_ctl_req+0x38>
    20ce:	e17d      	b.n	23cc <usbdc_cb_ctl_req+0x334>
    20d0:	f000 fa7a 	bl	25c8 <__gnu_thumb1_case_uhi>
    20d4:	017c0047 	.word	0x017c0047
    20d8:	017c0053 	.word	0x017c0053
    20dc:	017c0043 	.word	0x017c0043
    20e0:	017c017c 	.word	0x017c017c
    20e4:	017c000b 	.word	0x017c000b
    20e8:	0064      	.short	0x0064
		if (!usbdc_set_config(req->wValue)) {
    20ea:	78aa      	ldrb	r2, [r5, #2]
	if (cfg_value == 0) {
    20ec:	2a00      	cmp	r2, #0
    20ee:	d102      	bne.n	20f6 <usbdc_cb_ctl_req+0x5e>
		usbdc_unconfig();
    20f0:	4ba8      	ldr	r3, [pc, #672]	; (2394 <usbdc_cb_ctl_req+0x2fc>)
    20f2:	4798      	blx	r3
    20f4:	e031      	b.n	215a <usbdc_cb_ctl_req+0xc2>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    20f6:	4da8      	ldr	r5, [pc, #672]	; (2398 <usbdc_cb_ctl_req+0x300>)
    20f8:	682b      	ldr	r3, [r5, #0]
    20fa:	cb03      	ldmia	r3!, {r0, r1}
    20fc:	4ba7      	ldr	r3, [pc, #668]	; (239c <usbdc_cb_ctl_req+0x304>)
    20fe:	4798      	blx	r3
	if (NULL == cfg_desc) {
    2100:	2800      	cmp	r0, #0
    2102:	d100      	bne.n	2106 <usbdc_cb_ctl_req+0x6e>
    2104:	e162      	b.n	23cc <usbdc_cb_ctl_req+0x334>
	desc.eod  = cfg_desc + total_len;
    2106:	78c1      	ldrb	r1, [r0, #3]
    2108:	7883      	ldrb	r3, [r0, #2]
    210a:	0209      	lsls	r1, r1, #8
    210c:	1859      	adds	r1, r3, r1
    210e:	b289      	uxth	r1, r1
    2110:	1841      	adds	r1, r0, r1
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    2112:	4ba3      	ldr	r3, [pc, #652]	; (23a0 <usbdc_cb_ctl_req+0x308>)
    2114:	2204      	movs	r2, #4
	desc.eod  = cfg_desc + total_len;
    2116:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    2118:	4798      	blx	r3
	uint8_t                 last_iface = 0xFF;
    211a:	23ff      	movs	r3, #255	; 0xff
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    211c:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    211e:	9a00      	ldr	r2, [sp, #0]
    2120:	2a00      	cmp	r2, #0
    2122:	d01a      	beq.n	215a <usbdc_cb_ctl_req+0xc2>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    2124:	7897      	ldrb	r7, [r2, #2]
    2126:	429f      	cmp	r7, r3
    2128:	d00b      	beq.n	2142 <usbdc_cb_ctl_req+0xaa>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    212a:	692e      	ldr	r6, [r5, #16]
			while (NULL != func) {
    212c:	2e00      	cmp	r6, #0
    212e:	d009      	beq.n	2144 <usbdc_cb_ctl_req+0xac>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    2130:	466a      	mov	r2, sp
    2132:	2100      	movs	r1, #0
    2134:	0030      	movs	r0, r6
    2136:	6873      	ldr	r3, [r6, #4]
    2138:	4798      	blx	r3
    213a:	2800      	cmp	r0, #0
    213c:	d002      	beq.n	2144 <usbdc_cb_ctl_req+0xac>
					func = func->next;
    213e:	6836      	ldr	r6, [r6, #0]
    2140:	e7f4      	b.n	212c <usbdc_cb_ctl_req+0x94>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    2142:	001f      	movs	r7, r3
		desc.sod = usb_desc_next(desc.sod);
    2144:	9b00      	ldr	r3, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2146:	2204      	movs	r2, #4
    2148:	7818      	ldrb	r0, [r3, #0]
    214a:	9901      	ldr	r1, [sp, #4]
    214c:	1818      	adds	r0, r3, r0
    214e:	4b94      	ldr	r3, [pc, #592]	; (23a0 <usbdc_cb_ctl_req+0x308>)
		desc.sod = usb_desc_next(desc.sod);
    2150:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2152:	4798      	blx	r3
    2154:	003b      	movs	r3, r7
    2156:	9000      	str	r0, [sp, #0]
    2158:	e7e1      	b.n	211e <usbdc_cb_ctl_req+0x86>
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    215a:	2200      	movs	r2, #0
    215c:	2301      	movs	r3, #1
    215e:	0011      	movs	r1, r2
    2160:	e0ca      	b.n	22f8 <usbdc_cb_ctl_req+0x260>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2162:	2902      	cmp	r1, #2
    2164:	d000      	beq.n	2168 <usbdc_cb_ctl_req+0xd0>
    2166:	e131      	b.n	23cc <usbdc_cb_ctl_req+0x334>
		if (req->wLength != 0) {
    2168:	79ee      	ldrb	r6, [r5, #7]
    216a:	79ab      	ldrb	r3, [r5, #6]
    216c:	0236      	lsls	r6, r6, #8
    216e:	431e      	orrs	r6, r3
    2170:	d000      	beq.n	2174 <usbdc_cb_ctl_req+0xdc>
    2172:	e12b      	b.n	23cc <usbdc_cb_ctl_req+0x334>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    2174:	7928      	ldrb	r0, [r5, #4]
    2176:	0031      	movs	r1, r6
    2178:	e00a      	b.n	2190 <usbdc_cb_ctl_req+0xf8>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    217a:	2902      	cmp	r1, #2
    217c:	d000      	beq.n	2180 <usbdc_cb_ctl_req+0xe8>
    217e:	e125      	b.n	23cc <usbdc_cb_ctl_req+0x334>
		if (req->wLength != 0) {
    2180:	79ee      	ldrb	r6, [r5, #7]
    2182:	79ab      	ldrb	r3, [r5, #6]
    2184:	0236      	lsls	r6, r6, #8
    2186:	431e      	orrs	r6, r3
    2188:	d000      	beq.n	218c <usbdc_cb_ctl_req+0xf4>
    218a:	e11f      	b.n	23cc <usbdc_cb_ctl_req+0x334>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    218c:	7928      	ldrb	r0, [r5, #4]
    218e:	3901      	subs	r1, #1
    2190:	4b84      	ldr	r3, [pc, #528]	; (23a4 <usbdc_cb_ctl_req+0x30c>)
    2192:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    2194:	2301      	movs	r3, #1
    2196:	0032      	movs	r2, r6
    2198:	0031      	movs	r1, r6
    219a:	e0d8      	b.n	234e <usbdc_cb_ctl_req+0x2b6>
		return usbdc_set_interface(req->wValue, req->wIndex);
    219c:	78ee      	ldrb	r6, [r5, #3]
    219e:	78ab      	ldrb	r3, [r5, #2]
    21a0:	0236      	lsls	r6, r6, #8
    21a2:	431e      	orrs	r6, r3
    21a4:	792b      	ldrb	r3, [r5, #4]
    21a6:	796d      	ldrb	r5, [r5, #5]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    21a8:	4c7b      	ldr	r4, [pc, #492]	; (2398 <usbdc_cb_ctl_req+0x300>)
		return usbdc_set_interface(req->wValue, req->wIndex);
    21aa:	022d      	lsls	r5, r5, #8
    21ac:	431d      	orrs	r5, r3
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    21ae:	6823      	ldr	r3, [r4, #0]
    21b0:	7ee2      	ldrb	r2, [r4, #27]
    21b2:	cb03      	ldmia	r3!, {r0, r1}
    21b4:	4b79      	ldr	r3, [pc, #484]	; (239c <usbdc_cb_ctl_req+0x304>)
    21b6:	4798      	blx	r3
	if (NULL == ifc) {
    21b8:	2800      	cmp	r0, #0
    21ba:	d100      	bne.n	21be <usbdc_cb_ctl_req+0x126>
    21bc:	e106      	b.n	23cc <usbdc_cb_ctl_req+0x334>
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    21be:	2204      	movs	r2, #4
	desc.sod = ifc;
    21c0:	9000      	str	r0, [sp, #0]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    21c2:	78c1      	ldrb	r1, [r0, #3]
    21c4:	7883      	ldrb	r3, [r0, #2]
    21c6:	0209      	lsls	r1, r1, #8
    21c8:	1859      	adds	r1, r3, r1
    21ca:	b289      	uxth	r1, r1
    21cc:	1841      	adds	r1, r0, r1
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    21ce:	4f74      	ldr	r7, [pc, #464]	; (23a0 <usbdc_cb_ctl_req+0x308>)
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    21d0:	9101      	str	r1, [sp, #4]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    21d2:	47b8      	blx	r7
		if (NULL == ifc) {
    21d4:	2800      	cmp	r0, #0
    21d6:	d100      	bne.n	21da <usbdc_cb_ctl_req+0x142>
    21d8:	e0f8      	b.n	23cc <usbdc_cb_ctl_req+0x334>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    21da:	7883      	ldrb	r3, [r0, #2]
    21dc:	42ab      	cmp	r3, r5
    21de:	d006      	beq.n	21ee <usbdc_cb_ctl_req+0x156>
		desc.sod = usb_desc_next(desc.sod);
    21e0:	9b00      	ldr	r3, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    21e2:	2204      	movs	r2, #4
    21e4:	7818      	ldrb	r0, [r3, #0]
    21e6:	9901      	ldr	r1, [sp, #4]
    21e8:	1818      	adds	r0, r3, r0
		desc.sod = usb_desc_next(desc.sod);
    21ea:	9000      	str	r0, [sp, #0]
    21ec:	e7f1      	b.n	21d2 <usbdc_cb_ctl_req+0x13a>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    21ee:	78c3      	ldrb	r3, [r0, #3]
    21f0:	42b3      	cmp	r3, r6
    21f2:	d1f5      	bne.n	21e0 <usbdc_cb_ctl_req+0x148>
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    21f4:	6927      	ldr	r7, [r4, #16]
	desc.sod = ifc;
    21f6:	9000      	str	r0, [sp, #0]
	while (NULL != func) {
    21f8:	2f00      	cmp	r7, #0
    21fa:	d100      	bne.n	21fe <usbdc_cb_ctl_req+0x166>
    21fc:	e0e6      	b.n	23cc <usbdc_cb_ctl_req+0x334>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    21fe:	2101      	movs	r1, #1
    2200:	466a      	mov	r2, sp
    2202:	0038      	movs	r0, r7
    2204:	687b      	ldr	r3, [r7, #4]
    2206:	4798      	blx	r3
    2208:	1e01      	subs	r1, r0, #0
    220a:	d001      	beq.n	2210 <usbdc_cb_ctl_req+0x178>
			func = func->next;
    220c:	683f      	ldr	r7, [r7, #0]
    220e:	e7f3      	b.n	21f8 <usbdc_cb_ctl_req+0x160>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    2210:	687b      	ldr	r3, [r7, #4]
    2212:	466a      	mov	r2, sp
    2214:	0038      	movs	r0, r7
    2216:	4798      	blx	r3
    2218:	2800      	cmp	r0, #0
    221a:	d000      	beq.n	221e <usbdc_cb_ctl_req+0x186>
    221c:	e0d6      	b.n	23cc <usbdc_cb_ctl_req+0x334>
			if (alt_set) {
    221e:	2e00      	cmp	r6, #0
    2220:	d004      	beq.n	222c <usbdc_cb_ctl_req+0x194>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    2222:	2301      	movs	r3, #1
    2224:	40ab      	lsls	r3, r5
    2226:	7f62      	ldrb	r2, [r4, #29]
    2228:	4313      	orrs	r3, r2
    222a:	7763      	strb	r3, [r4, #29]
			usbdc_xfer(0, NULL, 0, 0);
    222c:	2300      	movs	r3, #0
    222e:	001a      	movs	r2, r3
    2230:	0019      	movs	r1, r3
    2232:	0018      	movs	r0, r3
    2234:	e0a7      	b.n	2386 <usbdc_cb_ctl_req+0x2ee>
	switch (req->bRequest) {
    2236:	7868      	ldrb	r0, [r5, #1]
    2238:	280a      	cmp	r0, #10
    223a:	d900      	bls.n	223e <usbdc_cb_ctl_req+0x1a6>
    223c:	e0c6      	b.n	23cc <usbdc_cb_ctl_req+0x334>
    223e:	f000 f9b9 	bl	25b4 <__gnu_thumb1_case_uqi>
    2242:	c56a      	.short	0xc56a
    2244:	c5c5c5c5 	.word	0xc5c5c5c5
    2248:	c562c506 	.word	0xc562c506
    224c:	88          	.byte	0x88
    224d:	00          	.byte	0x00
	uint8_t type = (uint8_t)(req->wValue >> 8);
    224e:	78e9      	ldrb	r1, [r5, #3]
    2250:	78aa      	ldrb	r2, [r5, #2]
    2252:	0209      	lsls	r1, r1, #8
    2254:	4311      	orrs	r1, r2
	switch (type) {
    2256:	0a0b      	lsrs	r3, r1, #8
    2258:	2b02      	cmp	r3, #2
    225a:	d019      	beq.n	2290 <usbdc_cb_ctl_req+0x1f8>
    225c:	2b03      	cmp	r3, #3
    225e:	d033      	beq.n	22c8 <usbdc_cb_ctl_req+0x230>
    2260:	2b01      	cmp	r3, #1
    2262:	d000      	beq.n	2266 <usbdc_cb_ctl_req+0x1ce>
    2264:	e0b2      	b.n	23cc <usbdc_cb_ctl_req+0x334>
	uint16_t length   = req->wLength;
    2266:	79eb      	ldrb	r3, [r5, #7]
    2268:	79aa      	ldrb	r2, [r5, #6]
    226a:	021b      	lsls	r3, r3, #8
    226c:	4313      	orrs	r3, r2
    226e:	1c1a      	adds	r2, r3, #0
    2270:	2b12      	cmp	r3, #18
    2272:	d900      	bls.n	2276 <usbdc_cb_ctl_req+0x1de>
    2274:	2212      	movs	r2, #18
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    2276:	4b48      	ldr	r3, [pc, #288]	; (2398 <usbdc_cb_ctl_req+0x300>)
    2278:	b295      	uxth	r5, r2
    227a:	681b      	ldr	r3, [r3, #0]
    227c:	2201      	movs	r2, #1
    227e:	cb03      	ldmia	r3!, {r0, r1}
    2280:	4b47      	ldr	r3, [pc, #284]	; (23a0 <usbdc_cb_ctl_req+0x308>)
    2282:	4798      	blx	r3
    2284:	1e01      	subs	r1, r0, #0
	if (!dev_desc) {
    2286:	d100      	bne.n	228a <usbdc_cb_ctl_req+0x1f2>
    2288:	e0a0      	b.n	23cc <usbdc_cb_ctl_req+0x334>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    228a:	2300      	movs	r3, #0
    228c:	002a      	movs	r2, r5
    228e:	e033      	b.n	22f8 <usbdc_cb_ctl_req+0x260>
	uint16_t length   = req->wLength;
    2290:	79ee      	ldrb	r6, [r5, #7]
    2292:	79ab      	ldrb	r3, [r5, #6]
    2294:	0236      	lsls	r6, r6, #8
    2296:	431e      	orrs	r6, r3
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    2298:	4b3f      	ldr	r3, [pc, #252]	; (2398 <usbdc_cb_ctl_req+0x300>)
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    229a:	3101      	adds	r1, #1
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    229c:	7f1d      	ldrb	r5, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    229e:	681b      	ldr	r3, [r3, #0]
    22a0:	b2ca      	uxtb	r2, r1
    22a2:	cb03      	ldmia	r3!, {r0, r1}
    22a4:	4b3d      	ldr	r3, [pc, #244]	; (239c <usbdc_cb_ctl_req+0x304>)
    22a6:	4798      	blx	r3
    22a8:	1e01      	subs	r1, r0, #0
	if (NULL == cfg_desc) {
    22aa:	d100      	bne.n	22ae <usbdc_cb_ctl_req+0x216>
    22ac:	e08e      	b.n	23cc <usbdc_cb_ctl_req+0x334>
	return (ptr[0] + (ptr[1] << 8));
    22ae:	78c2      	ldrb	r2, [r0, #3]
    22b0:	7883      	ldrb	r3, [r0, #2]
    22b2:	0212      	lsls	r2, r2, #8
    22b4:	189a      	adds	r2, r3, r2
    22b6:	b292      	uxth	r2, r2
		need_zlp = false;
    22b8:	2300      	movs	r3, #0
	if (length <= total_len) {
    22ba:	4296      	cmp	r6, r2
    22bc:	d91b      	bls.n	22f6 <usbdc_cb_ctl_req+0x25e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    22be:	1e6b      	subs	r3, r5, #1
    22c0:	401e      	ands	r6, r3
    22c2:	4273      	negs	r3, r6
    22c4:	4173      	adcs	r3, r6
    22c6:	e014      	b.n	22f2 <usbdc_cb_ctl_req+0x25a>
	uint16_t length   = req->wLength;
    22c8:	79ae      	ldrb	r6, [r5, #6]
    22ca:	79ed      	ldrb	r5, [r5, #7]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    22cc:	4b32      	ldr	r3, [pc, #200]	; (2398 <usbdc_cb_ctl_req+0x300>)
	uint16_t length   = req->wLength;
    22ce:	022d      	lsls	r5, r5, #8
    22d0:	432e      	orrs	r6, r5
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    22d2:	7f1d      	ldrb	r5, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    22d4:	681b      	ldr	r3, [r3, #0]
    22d6:	b2ca      	uxtb	r2, r1
    22d8:	cb03      	ldmia	r3!, {r0, r1}
    22da:	4b33      	ldr	r3, [pc, #204]	; (23a8 <usbdc_cb_ctl_req+0x310>)
    22dc:	4798      	blx	r3
    22de:	1e01      	subs	r1, r0, #0
	if (NULL == str_desc) {
    22e0:	d074      	beq.n	23cc <usbdc_cb_ctl_req+0x334>
	if (length <= str_desc[0]) {
    22e2:	7802      	ldrb	r2, [r0, #0]
		need_zlp = false;
    22e4:	2300      	movs	r3, #0
	if (length <= str_desc[0]) {
    22e6:	4296      	cmp	r6, r2
    22e8:	d905      	bls.n	22f6 <usbdc_cb_ctl_req+0x25e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    22ea:	3d01      	subs	r5, #1
    22ec:	4035      	ands	r5, r6
    22ee:	426b      	negs	r3, r5
    22f0:	416b      	adcs	r3, r5
    22f2:	0016      	movs	r6, r2
    22f4:	b2db      	uxtb	r3, r3
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    22f6:	0032      	movs	r2, r6
    22f8:	0020      	movs	r0, r4
    22fa:	4c2c      	ldr	r4, [pc, #176]	; (23ac <usbdc_cb_ctl_req+0x314>)
    22fc:	47a0      	blx	r4
    22fe:	4242      	negs	r2, r0
    2300:	4142      	adcs	r2, r0
    2302:	b2d2      	uxtb	r2, r2
    2304:	e063      	b.n	23ce <usbdc_cb_ctl_req+0x336>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    2306:	4924      	ldr	r1, [pc, #144]	; (2398 <usbdc_cb_ctl_req+0x300>)
    2308:	7ecb      	ldrb	r3, [r1, #27]
    230a:	694a      	ldr	r2, [r1, #20]
    230c:	7013      	strb	r3, [r2, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    230e:	6949      	ldr	r1, [r1, #20]
    2310:	2300      	movs	r3, #0
    2312:	2201      	movs	r2, #1
    2314:	e01b      	b.n	234e <usbdc_cb_ctl_req+0x2b6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2316:	231f      	movs	r3, #31
    2318:	4019      	ands	r1, r3
    231a:	2901      	cmp	r1, #1
    231c:	d902      	bls.n	2324 <usbdc_cb_ctl_req+0x28c>
    231e:	2902      	cmp	r1, #2
    2320:	d003      	beq.n	232a <usbdc_cb_ctl_req+0x292>
    2322:	e053      	b.n	23cc <usbdc_cb_ctl_req+0x334>
		st = 0;
    2324:	2300      	movs	r3, #0
    2326:	9300      	str	r3, [sp, #0]
    2328:	e008      	b.n	233c <usbdc_cb_ctl_req+0x2a4>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    232a:	7928      	ldrb	r0, [r5, #4]
    232c:	4b1d      	ldr	r3, [pc, #116]	; (23a4 <usbdc_cb_ctl_req+0x30c>)
    232e:	4798      	blx	r3
			return false;
    2330:	2200      	movs	r2, #0
		if (st < 0) {
    2332:	4290      	cmp	r0, r2
    2334:	db4b      	blt.n	23ce <usbdc_cb_ctl_req+0x336>
		st = st & 0x1;
    2336:	2301      	movs	r3, #1
    2338:	4018      	ands	r0, r3
    233a:	9000      	str	r0, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    233c:	4d16      	ldr	r5, [pc, #88]	; (2398 <usbdc_cb_ctl_req+0x300>)
    233e:	2202      	movs	r2, #2
    2340:	4669      	mov	r1, sp
    2342:	4b1b      	ldr	r3, [pc, #108]	; (23b0 <usbdc_cb_ctl_req+0x318>)
    2344:	6968      	ldr	r0, [r5, #20]
    2346:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    2348:	2300      	movs	r3, #0
    234a:	2202      	movs	r2, #2
    234c:	6969      	ldr	r1, [r5, #20]
    234e:	0020      	movs	r0, r4
    2350:	e019      	b.n	2386 <usbdc_cb_ctl_req+0x2ee>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    2352:	4911      	ldr	r1, [pc, #68]	; (2398 <usbdc_cb_ctl_req+0x300>)
    2354:	796b      	ldrb	r3, [r5, #5]
    2356:	792a      	ldrb	r2, [r5, #4]
    2358:	7f48      	ldrb	r0, [r1, #29]
    235a:	021b      	lsls	r3, r3, #8
    235c:	4313      	orrs	r3, r2
    235e:	4118      	asrs	r0, r3
    2360:	2401      	movs	r4, #1
    2362:	000e      	movs	r6, r1
    2364:	4020      	ands	r0, r4
    2366:	d125      	bne.n	23b4 <usbdc_cb_ctl_req+0x31c>
		usbdc.ctrl_buf[0] = 0;
    2368:	694b      	ldr	r3, [r1, #20]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    236a:	0022      	movs	r2, r4
		usbdc.ctrl_buf[0] = 0;
    236c:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    236e:	6949      	ldr	r1, [r1, #20]
    2370:	0003      	movs	r3, r0
    2372:	4d0e      	ldr	r5, [pc, #56]	; (23ac <usbdc_cb_ctl_req+0x314>)
    2374:	47a8      	blx	r5
		return true;
    2376:	0022      	movs	r2, r4
    2378:	e029      	b.n	23ce <usbdc_cb_ctl_req+0x336>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    237a:	6973      	ldr	r3, [r6, #20]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    237c:	2201      	movs	r2, #1
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    237e:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    2380:	2300      	movs	r3, #0
    2382:	0018      	movs	r0, r3
    2384:	6971      	ldr	r1, [r6, #20]
    2386:	4c09      	ldr	r4, [pc, #36]	; (23ac <usbdc_cb_ctl_req+0x314>)
    2388:	47a0      	blx	r4
			return true;
    238a:	2201      	movs	r2, #1
    238c:	e01f      	b.n	23ce <usbdc_cb_ctl_req+0x336>
    238e:	46c0      	nop			; (mov r8, r8)
    2390:	00001f39 	.word	0x00001f39
    2394:	00001ef5 	.word	0x00001ef5
    2398:	200002b8 	.word	0x200002b8
    239c:	00001531 	.word	0x00001531
    23a0:	000014f9 	.word	0x000014f9
    23a4:	000019cd 	.word	0x000019cd
    23a8:	00001571 	.word	0x00001571
    23ac:	0000207d 	.word	0x0000207d
    23b0:	00002625 	.word	0x00002625
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    23b4:	690c      	ldr	r4, [r1, #16]
	while (NULL != func) {
    23b6:	2c00      	cmp	r4, #0
    23b8:	d008      	beq.n	23cc <usbdc_cb_ctl_req+0x334>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    23ba:	002a      	movs	r2, r5
    23bc:	2102      	movs	r1, #2
    23be:	0020      	movs	r0, r4
    23c0:	6863      	ldr	r3, [r4, #4]
    23c2:	4798      	blx	r3
    23c4:	2800      	cmp	r0, #0
    23c6:	dad8      	bge.n	237a <usbdc_cb_ctl_req+0x2e2>
			func = func->next;
    23c8:	6824      	ldr	r4, [r4, #0]
    23ca:	e7f4      	b.n	23b6 <usbdc_cb_ctl_req+0x31e>
	return false;
    23cc:	2200      	movs	r2, #0
}
    23ce:	0010      	movs	r0, r2
    23d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    23d2:	46c0      	nop			; (mov r8, r8)

000023d4 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    23d4:	b510      	push	{r4, lr}
	switch (type) {
    23d6:	2801      	cmp	r0, #1
    23d8:	d009      	beq.n	23ee <usbdc_register_handler+0x1a>
    23da:	2800      	cmp	r0, #0
    23dc:	d004      	beq.n	23e8 <usbdc_register_handler+0x14>
    23de:	2802      	cmp	r0, #2
    23e0:	d109      	bne.n	23f6 <usbdc_register_handler+0x22>
		break;
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    23e2:	4805      	ldr	r0, [pc, #20]	; (23f8 <usbdc_register_handler+0x24>)
    23e4:	300c      	adds	r0, #12
    23e6:	e004      	b.n	23f2 <usbdc_register_handler+0x1e>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    23e8:	4803      	ldr	r0, [pc, #12]	; (23f8 <usbdc_register_handler+0x24>)
    23ea:	3004      	adds	r0, #4
    23ec:	e001      	b.n	23f2 <usbdc_register_handler+0x1e>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    23ee:	4802      	ldr	r0, [pc, #8]	; (23f8 <usbdc_register_handler+0x24>)
    23f0:	3008      	adds	r0, #8
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    23f2:	4b02      	ldr	r3, [pc, #8]	; (23fc <usbdc_register_handler+0x28>)
    23f4:	4798      	blx	r3
		break;
	default:
		break;
	}
}
    23f6:	bd10      	pop	{r4, pc}
    23f8:	200002b8 	.word	0x200002b8
    23fc:	0000135d 	.word	0x0000135d

00002400 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    2400:	b570      	push	{r4, r5, r6, lr}
    2402:	0004      	movs	r4, r0
	ASSERT(ctrl_buf);
    2404:	1e43      	subs	r3, r0, #1
    2406:	4198      	sbcs	r0, r3
    2408:	4a0c      	ldr	r2, [pc, #48]	; (243c <usbdc_init+0x3c>)
    240a:	b2c0      	uxtb	r0, r0
    240c:	490c      	ldr	r1, [pc, #48]	; (2440 <usbdc_init+0x40>)
    240e:	4b0d      	ldr	r3, [pc, #52]	; (2444 <usbdc_init+0x44>)
    2410:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    2412:	4b0d      	ldr	r3, [pc, #52]	; (2448 <usbdc_init+0x48>)
    2414:	4798      	blx	r3
    2416:	1e03      	subs	r3, r0, #0
	if (rc < 0) {
    2418:	db0e      	blt.n	2438 <usbdc_init+0x38>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    241a:	4d0c      	ldr	r5, [pc, #48]	; (244c <usbdc_init+0x4c>)
    241c:	4b0c      	ldr	r3, [pc, #48]	; (2450 <usbdc_init+0x50>)
    241e:	2220      	movs	r2, #32
    2420:	2100      	movs	r1, #0
    2422:	0028      	movs	r0, r5
    2424:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    2426:	616c      	str	r4, [r5, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    2428:	490a      	ldr	r1, [pc, #40]	; (2454 <usbdc_init+0x54>)
    242a:	2000      	movs	r0, #0
    242c:	4c0a      	ldr	r4, [pc, #40]	; (2458 <usbdc_init+0x58>)
    242e:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    2430:	490a      	ldr	r1, [pc, #40]	; (245c <usbdc_init+0x5c>)
    2432:	2001      	movs	r0, #1
    2434:	47a0      	blx	r4

	return 0;
    2436:	2300      	movs	r3, #0
}
    2438:	0018      	movs	r0, r3
    243a:	bd70      	pop	{r4, r5, r6, pc}
    243c:	0000035f 	.word	0x0000035f
    2440:	000027d4 	.word	0x000027d4
    2444:	0000139d 	.word	0x0000139d
    2448:	00001779 	.word	0x00001779
    244c:	200002b8 	.word	0x200002b8
    2450:	000026a1 	.word	0x000026a1
    2454:	00001f75 	.word	0x00001f75
    2458:	000017d5 	.word	0x000017d5
    245c:	0000205d 	.word	0x0000205d

00002460 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    2460:	b510      	push	{r4, lr}
    2462:	0001      	movs	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
    2464:	4802      	ldr	r0, [pc, #8]	; (2470 <usbdc_register_function+0x10>)
    2466:	4b03      	ldr	r3, [pc, #12]	; (2474 <usbdc_register_function+0x14>)
    2468:	3010      	adds	r0, #16
    246a:	4798      	blx	r3
}
    246c:	bd10      	pop	{r4, pc}
    246e:	46c0      	nop			; (mov r8, r8)
    2470:	200002b8 	.word	0x200002b8
    2474:	0000135d 	.word	0x0000135d

00002478 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    2478:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    247a:	4b0a      	ldr	r3, [pc, #40]	; (24a4 <usbdc_start+0x2c>)
    247c:	7e9c      	ldrb	r4, [r3, #26]
    247e:	2c00      	cmp	r4, #0
    2480:	d10b      	bne.n	249a <usbdc_start+0x22>
		return ERR_BUSY;
	}

	if (desces) {
    2482:	2800      	cmp	r0, #0
    2484:	d00b      	beq.n	249e <usbdc_start+0x26>
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    2486:	6802      	ldr	r2, [r0, #0]
		usbdc.desces.ls_fs = desces;
    2488:	6018      	str	r0, [r3, #0]
	usbdc.ctrl_size = desces->sod[7];
    248a:	79d2      	ldrb	r2, [r2, #7]
    248c:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    248e:	2201      	movs	r2, #1
    2490:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    2492:	4b05      	ldr	r3, [pc, #20]	; (24a8 <usbdc_start+0x30>)
    2494:	4798      	blx	r3
	return ERR_NONE;
    2496:	0020      	movs	r0, r4
    2498:	e003      	b.n	24a2 <usbdc_start+0x2a>
		return ERR_BUSY;
    249a:	2004      	movs	r0, #4
    249c:	e000      	b.n	24a0 <usbdc_start+0x28>
		return ERR_BAD_DATA;
    249e:	2009      	movs	r0, #9
    24a0:	4240      	negs	r0, r0
}
    24a2:	bd10      	pop	{r4, pc}
    24a4:	200002b8 	.word	0x200002b8
    24a8:	000017e1 	.word	0x000017e1

000024ac <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    24ac:	b510      	push	{r4, lr}
	usb_d_attach();
    24ae:	4b01      	ldr	r3, [pc, #4]	; (24b4 <usbdc_attach+0x8>)
    24b0:	4798      	blx	r3
}
    24b2:	bd10      	pop	{r4, pc}
    24b4:	000017ed 	.word	0x000017ed

000024b8 <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    24b8:	4b01      	ldr	r3, [pc, #4]	; (24c0 <usbdc_get_ctrl_buffer+0x8>)
    24ba:	6958      	ldr	r0, [r3, #20]
}
    24bc:	4770      	bx	lr
    24be:	46c0      	nop			; (mov r8, r8)
    24c0:	200002b8 	.word	0x200002b8

000024c4 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    24c4:	4b03      	ldr	r3, [pc, #12]	; (24d4 <usbdc_get_state+0x10>)
    24c6:	7e98      	ldrb	r0, [r3, #26]
    24c8:	2310      	movs	r3, #16
    24ca:	4218      	tst	r0, r3
    24cc:	d000      	beq.n	24d0 <usbdc_get_state+0xc>
		return USBD_S_SUSPEND;
    24ce:	0018      	movs	r0, r3
	}
	return usbdc.state;
}
    24d0:	4770      	bx	lr
    24d2:	46c0      	nop			; (mov r8, r8)
    24d4:	200002b8 	.word	0x200002b8

000024d8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    24d8:	e7fe      	b.n	24d8 <Dummy_Handler>
	...

000024dc <Reset_Handler>:
{
    24dc:	4821      	ldr	r0, [pc, #132]	; (2564 <Reset_Handler+0x88>)
    24de:	4922      	ldr	r1, [pc, #136]	; (2568 <Reset_Handler+0x8c>)
    24e0:	b570      	push	{r4, r5, r6, lr}
	if (pSrc != pDest) {
    24e2:	4288      	cmp	r0, r1
    24e4:	d002      	beq.n	24ec <Reset_Handler+0x10>
    24e6:	2300      	movs	r3, #0
		for (; pDest < &_erelocate;) {
    24e8:	4c20      	ldr	r4, [pc, #128]	; (256c <Reset_Handler+0x90>)
    24ea:	e003      	b.n	24f4 <Reset_Handler+0x18>
    24ec:	4b20      	ldr	r3, [pc, #128]	; (2570 <Reset_Handler+0x94>)
	for (pDest = &_szero; pDest < &_ezero;) {
    24ee:	4a21      	ldr	r2, [pc, #132]	; (2574 <Reset_Handler+0x98>)
		*pDest++ = 0;
    24f0:	2100      	movs	r1, #0
    24f2:	e006      	b.n	2502 <Reset_Handler+0x26>
		for (; pDest < &_erelocate;) {
    24f4:	18ca      	adds	r2, r1, r3
    24f6:	42a2      	cmp	r2, r4
    24f8:	d2f8      	bcs.n	24ec <Reset_Handler+0x10>
			*pDest++ = *pSrc++;
    24fa:	58c5      	ldr	r5, [r0, r3]
    24fc:	3304      	adds	r3, #4
    24fe:	6015      	str	r5, [r2, #0]
    2500:	e7f8      	b.n	24f4 <Reset_Handler+0x18>
	for (pDest = &_szero; pDest < &_ezero;) {
    2502:	4293      	cmp	r3, r2
    2504:	d201      	bcs.n	250a <Reset_Handler+0x2e>
		*pDest++ = 0;
    2506:	c302      	stmia	r3!, {r1}
    2508:	e7fb      	b.n	2502 <Reset_Handler+0x26>
	SCB->VTOR = ((uint32_t)pSrc & SCB_VTOR_TBLOFF_Msk);
    250a:	21ff      	movs	r1, #255	; 0xff
	SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    250c:	2402      	movs	r4, #2
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    250e:	2503      	movs	r5, #3
	SCB->VTOR = ((uint32_t)pSrc & SCB_VTOR_TBLOFF_Msk);
    2510:	4b19      	ldr	r3, [pc, #100]	; (2578 <Reset_Handler+0x9c>)
    2512:	4a1a      	ldr	r2, [pc, #104]	; (257c <Reset_Handler+0xa0>)
    2514:	438b      	bics	r3, r1
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2516:	260c      	movs	r6, #12
	SCB->VTOR = ((uint32_t)pSrc & SCB_VTOR_TBLOFF_Msk);
    2518:	6093      	str	r3, [r2, #8]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    251a:	2208      	movs	r2, #8
	SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    251c:	4b18      	ldr	r3, [pc, #96]	; (2580 <Reset_Handler+0xa4>)
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    251e:	4919      	ldr	r1, [pc, #100]	; (2584 <Reset_Handler+0xa8>)
	SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2520:	625c      	str	r4, [r3, #36]	; 0x24
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2522:	78cb      	ldrb	r3, [r1, #3]
    2524:	43ab      	bics	r3, r5
    2526:	4323      	orrs	r3, r4
    2528:	70cb      	strb	r3, [r1, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    252a:	78cb      	ldrb	r3, [r1, #3]
    252c:	43b3      	bics	r3, r6
    252e:	4313      	orrs	r3, r2
    2530:	70cb      	strb	r3, [r1, #3]
	DMAC->QOSCTRL.bit.DQOS   = 2;
    2532:	2130      	movs	r1, #48	; 0x30
    2534:	4b14      	ldr	r3, [pc, #80]	; (2588 <Reset_Handler+0xac>)
    2536:	7b98      	ldrb	r0, [r3, #14]
    2538:	4388      	bics	r0, r1
    253a:	3910      	subs	r1, #16
    253c:	4308      	orrs	r0, r1
    253e:	7398      	strb	r0, [r3, #14]
	DMAC->QOSCTRL.bit.FQOS   = 2;
    2540:	7b99      	ldrb	r1, [r3, #14]
    2542:	43b1      	bics	r1, r6
    2544:	4311      	orrs	r1, r2
    2546:	7399      	strb	r1, [r3, #14]
	NVMCTRL->CTRLB.bit.MANW = 1;
    2548:	2180      	movs	r1, #128	; 0x80
	DMAC->QOSCTRL.bit.WRBQOS = 2;
    254a:	7b9a      	ldrb	r2, [r3, #14]
    254c:	43aa      	bics	r2, r5
    254e:	4322      	orrs	r2, r4
    2550:	739a      	strb	r2, [r3, #14]
	NVMCTRL->CTRLB.bit.MANW = 1;
    2552:	4a0e      	ldr	r2, [pc, #56]	; (258c <Reset_Handler+0xb0>)
    2554:	6853      	ldr	r3, [r2, #4]
    2556:	430b      	orrs	r3, r1
    2558:	6053      	str	r3, [r2, #4]
	__libc_init_array();
    255a:	4b0d      	ldr	r3, [pc, #52]	; (2590 <Reset_Handler+0xb4>)
    255c:	4798      	blx	r3
	main();
    255e:	4b0d      	ldr	r3, [pc, #52]	; (2594 <Reset_Handler+0xb8>)
    2560:	4798      	blx	r3
    2562:	e7fe      	b.n	2562 <Reset_Handler+0x86>
    2564:	0000280c 	.word	0x0000280c
    2568:	20000000 	.word	0x20000000
    256c:	20000068 	.word	0x20000068
    2570:	20000068 	.word	0x20000068
    2574:	200002ec 	.word	0x200002ec
    2578:	00000000 	.word	0x00000000
    257c:	e000ed00 	.word	0xe000ed00
    2580:	410070fc 	.word	0x410070fc
    2584:	41005000 	.word	0x41005000
    2588:	41004800 	.word	0x41004800
    258c:	41004000 	.word	0x41004000
    2590:	000025dd 	.word	0x000025dd
    2594:	00001a79 	.word	0x00001a79

00002598 <atomic_enter_critical>:
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2598:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    259c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    259e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    25a0:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    25a4:	4770      	bx	lr

000025a6 <atomic_leave_critical>:
    25a6:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    25aa:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    25ac:	f383 8810 	msr	PRIMASK, r3
}
    25b0:	4770      	bx	lr
	...

000025b4 <__gnu_thumb1_case_uqi>:
    25b4:	b402      	push	{r1}
    25b6:	4671      	mov	r1, lr
    25b8:	0849      	lsrs	r1, r1, #1
    25ba:	0049      	lsls	r1, r1, #1
    25bc:	5c09      	ldrb	r1, [r1, r0]
    25be:	0049      	lsls	r1, r1, #1
    25c0:	448e      	add	lr, r1
    25c2:	bc02      	pop	{r1}
    25c4:	4770      	bx	lr
    25c6:	46c0      	nop			; (mov r8, r8)

000025c8 <__gnu_thumb1_case_uhi>:
    25c8:	b403      	push	{r0, r1}
    25ca:	4671      	mov	r1, lr
    25cc:	0849      	lsrs	r1, r1, #1
    25ce:	0040      	lsls	r0, r0, #1
    25d0:	0049      	lsls	r1, r1, #1
    25d2:	5a09      	ldrh	r1, [r1, r0]
    25d4:	0049      	lsls	r1, r1, #1
    25d6:	448e      	add	lr, r1
    25d8:	bc03      	pop	{r0, r1}
    25da:	4770      	bx	lr

000025dc <__libc_init_array>:
    25dc:	b570      	push	{r4, r5, r6, lr}
    25de:	4e0d      	ldr	r6, [pc, #52]	; (2614 <__libc_init_array+0x38>)
    25e0:	4d0d      	ldr	r5, [pc, #52]	; (2618 <__libc_init_array+0x3c>)
    25e2:	2400      	movs	r4, #0
    25e4:	1bad      	subs	r5, r5, r6
    25e6:	10ad      	asrs	r5, r5, #2
    25e8:	d005      	beq.n	25f6 <__libc_init_array+0x1a>
    25ea:	00a3      	lsls	r3, r4, #2
    25ec:	58f3      	ldr	r3, [r6, r3]
    25ee:	3401      	adds	r4, #1
    25f0:	4798      	blx	r3
    25f2:	42a5      	cmp	r5, r4
    25f4:	d1f9      	bne.n	25ea <__libc_init_array+0xe>
    25f6:	f000 f8f9 	bl	27ec <_init>
    25fa:	4e08      	ldr	r6, [pc, #32]	; (261c <__libc_init_array+0x40>)
    25fc:	4d08      	ldr	r5, [pc, #32]	; (2620 <__libc_init_array+0x44>)
    25fe:	2400      	movs	r4, #0
    2600:	1bad      	subs	r5, r5, r6
    2602:	10ad      	asrs	r5, r5, #2
    2604:	d005      	beq.n	2612 <__libc_init_array+0x36>
    2606:	00a3      	lsls	r3, r4, #2
    2608:	58f3      	ldr	r3, [r6, r3]
    260a:	3401      	adds	r4, #1
    260c:	4798      	blx	r3
    260e:	42a5      	cmp	r5, r4
    2610:	d1f9      	bne.n	2606 <__libc_init_array+0x2a>
    2612:	bd70      	pop	{r4, r5, r6, pc}
    2614:	000027f8 	.word	0x000027f8
    2618:	000027f8 	.word	0x000027f8
    261c:	000027f8 	.word	0x000027f8
    2620:	000027fc 	.word	0x000027fc

00002624 <memcpy>:
    2624:	b570      	push	{r4, r5, r6, lr}
    2626:	2a0f      	cmp	r2, #15
    2628:	d932      	bls.n	2690 <memcpy+0x6c>
    262a:	000c      	movs	r4, r1
    262c:	4304      	orrs	r4, r0
    262e:	000b      	movs	r3, r1
    2630:	07a4      	lsls	r4, r4, #30
    2632:	d131      	bne.n	2698 <memcpy+0x74>
    2634:	0015      	movs	r5, r2
    2636:	0004      	movs	r4, r0
    2638:	3d10      	subs	r5, #16
    263a:	092d      	lsrs	r5, r5, #4
    263c:	3501      	adds	r5, #1
    263e:	012d      	lsls	r5, r5, #4
    2640:	1949      	adds	r1, r1, r5
    2642:	681e      	ldr	r6, [r3, #0]
    2644:	6026      	str	r6, [r4, #0]
    2646:	685e      	ldr	r6, [r3, #4]
    2648:	6066      	str	r6, [r4, #4]
    264a:	689e      	ldr	r6, [r3, #8]
    264c:	60a6      	str	r6, [r4, #8]
    264e:	68de      	ldr	r6, [r3, #12]
    2650:	3310      	adds	r3, #16
    2652:	60e6      	str	r6, [r4, #12]
    2654:	3410      	adds	r4, #16
    2656:	4299      	cmp	r1, r3
    2658:	d1f3      	bne.n	2642 <memcpy+0x1e>
    265a:	230f      	movs	r3, #15
    265c:	1945      	adds	r5, r0, r5
    265e:	4013      	ands	r3, r2
    2660:	2b03      	cmp	r3, #3
    2662:	d91b      	bls.n	269c <memcpy+0x78>
    2664:	1f1c      	subs	r4, r3, #4
    2666:	2300      	movs	r3, #0
    2668:	08a4      	lsrs	r4, r4, #2
    266a:	3401      	adds	r4, #1
    266c:	00a4      	lsls	r4, r4, #2
    266e:	58ce      	ldr	r6, [r1, r3]
    2670:	50ee      	str	r6, [r5, r3]
    2672:	3304      	adds	r3, #4
    2674:	429c      	cmp	r4, r3
    2676:	d1fa      	bne.n	266e <memcpy+0x4a>
    2678:	2303      	movs	r3, #3
    267a:	192d      	adds	r5, r5, r4
    267c:	1909      	adds	r1, r1, r4
    267e:	401a      	ands	r2, r3
    2680:	d005      	beq.n	268e <memcpy+0x6a>
    2682:	2300      	movs	r3, #0
    2684:	5ccc      	ldrb	r4, [r1, r3]
    2686:	54ec      	strb	r4, [r5, r3]
    2688:	3301      	adds	r3, #1
    268a:	429a      	cmp	r2, r3
    268c:	d1fa      	bne.n	2684 <memcpy+0x60>
    268e:	bd70      	pop	{r4, r5, r6, pc}
    2690:	0005      	movs	r5, r0
    2692:	2a00      	cmp	r2, #0
    2694:	d1f5      	bne.n	2682 <memcpy+0x5e>
    2696:	e7fa      	b.n	268e <memcpy+0x6a>
    2698:	0005      	movs	r5, r0
    269a:	e7f2      	b.n	2682 <memcpy+0x5e>
    269c:	001a      	movs	r2, r3
    269e:	e7f8      	b.n	2692 <memcpy+0x6e>

000026a0 <memset>:
    26a0:	b570      	push	{r4, r5, r6, lr}
    26a2:	0783      	lsls	r3, r0, #30
    26a4:	d03f      	beq.n	2726 <memset+0x86>
    26a6:	1e54      	subs	r4, r2, #1
    26a8:	2a00      	cmp	r2, #0
    26aa:	d03b      	beq.n	2724 <memset+0x84>
    26ac:	b2ce      	uxtb	r6, r1
    26ae:	0003      	movs	r3, r0
    26b0:	2503      	movs	r5, #3
    26b2:	e003      	b.n	26bc <memset+0x1c>
    26b4:	1e62      	subs	r2, r4, #1
    26b6:	2c00      	cmp	r4, #0
    26b8:	d034      	beq.n	2724 <memset+0x84>
    26ba:	0014      	movs	r4, r2
    26bc:	3301      	adds	r3, #1
    26be:	1e5a      	subs	r2, r3, #1
    26c0:	7016      	strb	r6, [r2, #0]
    26c2:	422b      	tst	r3, r5
    26c4:	d1f6      	bne.n	26b4 <memset+0x14>
    26c6:	2c03      	cmp	r4, #3
    26c8:	d924      	bls.n	2714 <memset+0x74>
    26ca:	25ff      	movs	r5, #255	; 0xff
    26cc:	400d      	ands	r5, r1
    26ce:	022a      	lsls	r2, r5, #8
    26d0:	4315      	orrs	r5, r2
    26d2:	042a      	lsls	r2, r5, #16
    26d4:	4315      	orrs	r5, r2
    26d6:	2c0f      	cmp	r4, #15
    26d8:	d911      	bls.n	26fe <memset+0x5e>
    26da:	0026      	movs	r6, r4
    26dc:	3e10      	subs	r6, #16
    26de:	0936      	lsrs	r6, r6, #4
    26e0:	3601      	adds	r6, #1
    26e2:	0136      	lsls	r6, r6, #4
    26e4:	001a      	movs	r2, r3
    26e6:	199b      	adds	r3, r3, r6
    26e8:	6015      	str	r5, [r2, #0]
    26ea:	6055      	str	r5, [r2, #4]
    26ec:	6095      	str	r5, [r2, #8]
    26ee:	60d5      	str	r5, [r2, #12]
    26f0:	3210      	adds	r2, #16
    26f2:	4293      	cmp	r3, r2
    26f4:	d1f8      	bne.n	26e8 <memset+0x48>
    26f6:	220f      	movs	r2, #15
    26f8:	4014      	ands	r4, r2
    26fa:	2c03      	cmp	r4, #3
    26fc:	d90a      	bls.n	2714 <memset+0x74>
    26fe:	1f26      	subs	r6, r4, #4
    2700:	08b6      	lsrs	r6, r6, #2
    2702:	3601      	adds	r6, #1
    2704:	00b6      	lsls	r6, r6, #2
    2706:	001a      	movs	r2, r3
    2708:	199b      	adds	r3, r3, r6
    270a:	c220      	stmia	r2!, {r5}
    270c:	4293      	cmp	r3, r2
    270e:	d1fc      	bne.n	270a <memset+0x6a>
    2710:	2203      	movs	r2, #3
    2712:	4014      	ands	r4, r2
    2714:	2c00      	cmp	r4, #0
    2716:	d005      	beq.n	2724 <memset+0x84>
    2718:	b2c9      	uxtb	r1, r1
    271a:	191c      	adds	r4, r3, r4
    271c:	7019      	strb	r1, [r3, #0]
    271e:	3301      	adds	r3, #1
    2720:	429c      	cmp	r4, r3
    2722:	d1fb      	bne.n	271c <memset+0x7c>
    2724:	bd70      	pop	{r4, r5, r6, pc}
    2726:	0014      	movs	r4, r2
    2728:	0003      	movs	r3, r0
    272a:	e7cc      	b.n	26c6 <memset+0x26>
    272c:	682f2e2e 	.word	0x682f2e2e
    2730:	732f6c61 	.word	0x732f6c61
    2734:	682f6372 	.word	0x682f6372
    2738:	735f6c61 	.word	0x735f6c61
    273c:	6d5f6970 	.word	0x6d5f6970
    2740:	6e79735f 	.word	0x6e79735f
    2744:	00632e63 	.word	0x00632e63
    2748:	08044a25 	.word	0x08044a25

0000274c <_usb_ep_cfgs>:
    274c:	200001d8 00000000 00000040 20000198     ... ....@...... 
    275c:	00000000 00000040 20000158 00000000     ....@...X.. ....
    276c:	00000040 682f2e2e 752f6c61 736c6974     @...../hal/utils
    277c:	6372732f 6974752f 6c5f736c 2e747369     /src/utils_list.
    278c:	00000063                                c...

00002790 <_i2cms>:
	...

000027a8 <sercomspi_regs>:
    27a8:	0030000c 00020000 00000000 01ff00ff     ..0.............
    27b8:	2f2e2e00 2f6c7068 63726573 682f6d6f     .../hpl/sercom/h
    27c8:	735f6c70 6f637265 00632e6d 752f2e2e     pl_sercom.c.../u
    27d8:	642f6273 63697665 73752f65 2e636462     sb/device/usbdc.
    27e8:	00000063                                c...

000027ec <_init>:
    27ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27ee:	46c0      	nop			; (mov r8, r8)
    27f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    27f2:	bc08      	pop	{r3}
    27f4:	469e      	mov	lr, r3
    27f6:	4770      	bx	lr

000027f8 <__init_array_start>:
    27f8:	00000105 	.word	0x00000105

000027fc <_fini>:
    27fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27fe:	46c0      	nop			; (mov r8, r8)
    2800:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2802:	bc08      	pop	{r3}
    2804:	469e      	mov	lr, r3
    2806:	4770      	bx	lr

00002808 <__do_global_dtors_aux_fini_array_entry>:
    2808:	00d9 0000                                   ....
