
AtmelStart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b54  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20000000  20000000  00010b54  2**0
                  CONTENTS
  2 .bss          00000030  20000000  20000000  00020000  2**2
                  ALLOC
  3 .stack        00000400  20000030  20000030  00020000  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010b54  2**0
                  CONTENTS, READONLY
  5 .comment      0000002b  00000000  00000000  00010b7c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00014ad2  00000000  00000000  00010ba7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000018e7  00000000  00000000  00025679  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000695c  00000000  00000000  00026f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000708  00000000  00000000  0002d8bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001060  00000000  00000000  0002dfc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00003bbc  00000000  00000000  0002f024  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006bb2  00000000  00000000  00032be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000619d2  00000000  00000000  00039792  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001308  00000000  00000000  0009b164  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
   0:	20000430 	.word	0x20000430
   4:	000009d1 	.word	0x000009d1
   8:	000009cd 	.word	0x000009cd
   c:	000009cd 	.word	0x000009cd
	...
  2c:	000009cd 	.word	0x000009cd
	...
  38:	000009cd 	.word	0x000009cd
  3c:	000009cd 	.word	0x000009cd
  40:	000009cd 	.word	0x000009cd
  44:	000009cd 	.word	0x000009cd
  48:	000009cd 	.word	0x000009cd
  4c:	000009cd 	.word	0x000009cd
  50:	000009cd 	.word	0x000009cd
  54:	000009cd 	.word	0x000009cd
  58:	000009cd 	.word	0x000009cd
  5c:	000009cd 	.word	0x000009cd
  60:	000009cd 	.word	0x000009cd
  64:	000009cd 	.word	0x000009cd
  68:	000009cd 	.word	0x000009cd
  6c:	00000000 	.word	0x00000000
  70:	000009cd 	.word	0x000009cd
  74:	000009cd 	.word	0x000009cd
  78:	000009cd 	.word	0x000009cd
  7c:	000009cd 	.word	0x000009cd
  80:	000009cd 	.word	0x000009cd
  84:	000009cd 	.word	0x000009cd
  88:	000009cd 	.word	0x000009cd

0000008c <deregister_tm_clones>:
  8c:	4b05      	ldr	r3, [pc, #20]	; (a4 <deregister_tm_clones+0x18>)
  8e:	4806      	ldr	r0, [pc, #24]	; (a8 <deregister_tm_clones+0x1c>)
  90:	3303      	adds	r3, #3
  92:	b510      	push	{r4, lr}
  94:	1a1b      	subs	r3, r3, r0
  96:	2b06      	cmp	r3, #6
  98:	d903      	bls.n	a2 <deregister_tm_clones+0x16>
  9a:	4b04      	ldr	r3, [pc, #16]	; (ac <deregister_tm_clones+0x20>)
  9c:	2b00      	cmp	r3, #0
  9e:	d000      	beq.n	a2 <deregister_tm_clones+0x16>
  a0:	4798      	blx	r3
  a2:	bd10      	pop	{r4, pc}
  a4:	00000b54 	.word	0x00000b54
  a8:	00000b54 	.word	0x00000b54
  ac:	00000000 	.word	0x00000000

000000b0 <register_tm_clones>:
  b0:	4806      	ldr	r0, [pc, #24]	; (cc <register_tm_clones+0x1c>)
  b2:	4907      	ldr	r1, [pc, #28]	; (d0 <register_tm_clones+0x20>)
  b4:	b510      	push	{r4, lr}
  b6:	1a09      	subs	r1, r1, r0
  b8:	1089      	asrs	r1, r1, #2
  ba:	0fcb      	lsrs	r3, r1, #31
  bc:	1859      	adds	r1, r3, r1
  be:	1049      	asrs	r1, r1, #1
  c0:	d003      	beq.n	ca <register_tm_clones+0x1a>
  c2:	4b04      	ldr	r3, [pc, #16]	; (d4 <register_tm_clones+0x24>)
  c4:	2b00      	cmp	r3, #0
  c6:	d000      	beq.n	ca <register_tm_clones+0x1a>
  c8:	4798      	blx	r3
  ca:	bd10      	pop	{r4, pc}
  cc:	00000b54 	.word	0x00000b54
  d0:	00000b54 	.word	0x00000b54
  d4:	00000000 	.word	0x00000000

000000d8 <__do_global_dtors_aux>:
  d8:	b510      	push	{r4, lr}
  da:	4c07      	ldr	r4, [pc, #28]	; (f8 <__do_global_dtors_aux+0x20>)
  dc:	7823      	ldrb	r3, [r4, #0]
  de:	2b00      	cmp	r3, #0
  e0:	d109      	bne.n	f6 <__do_global_dtors_aux+0x1e>
  e2:	f7ff ffd3 	bl	8c <deregister_tm_clones>
  e6:	4b05      	ldr	r3, [pc, #20]	; (fc <__do_global_dtors_aux+0x24>)
  e8:	2b00      	cmp	r3, #0
  ea:	d002      	beq.n	f2 <__do_global_dtors_aux+0x1a>
  ec:	4804      	ldr	r0, [pc, #16]	; (100 <__do_global_dtors_aux+0x28>)
  ee:	e000      	b.n	f2 <__do_global_dtors_aux+0x1a>
  f0:	bf00      	nop
  f2:	2301      	movs	r3, #1
  f4:	7023      	strb	r3, [r4, #0]
  f6:	bd10      	pop	{r4, pc}
  f8:	20000000 	.word	0x20000000
  fc:	00000000 	.word	0x00000000
 100:	00000b54 	.word	0x00000b54

00000104 <frame_dummy>:
 104:	4b09      	ldr	r3, [pc, #36]	; (12c <frame_dummy+0x28>)
 106:	b510      	push	{r4, lr}
 108:	2b00      	cmp	r3, #0
 10a:	d003      	beq.n	114 <frame_dummy+0x10>
 10c:	4908      	ldr	r1, [pc, #32]	; (130 <frame_dummy+0x2c>)
 10e:	4809      	ldr	r0, [pc, #36]	; (134 <frame_dummy+0x30>)
 110:	e000      	b.n	114 <frame_dummy+0x10>
 112:	bf00      	nop
 114:	4808      	ldr	r0, [pc, #32]	; (138 <frame_dummy+0x34>)
 116:	6803      	ldr	r3, [r0, #0]
 118:	2b00      	cmp	r3, #0
 11a:	d102      	bne.n	122 <frame_dummy+0x1e>
 11c:	f7ff ffc8 	bl	b0 <register_tm_clones>
 120:	bd10      	pop	{r4, pc}
 122:	4b06      	ldr	r3, [pc, #24]	; (13c <frame_dummy+0x38>)
 124:	2b00      	cmp	r3, #0
 126:	d0f9      	beq.n	11c <frame_dummy+0x18>
 128:	4798      	blx	r3
 12a:	e7f7      	b.n	11c <frame_dummy+0x18>
 12c:	00000000 	.word	0x00000000
 130:	20000004 	.word	0x20000004
 134:	00000b54 	.word	0x00000b54
 138:	00000b54 	.word	0x00000b54
 13c:	00000000 	.word	0x00000000

00000140 <spi_m_sync_init>:

static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length);
static int32_t _spi_m_sync_io_read(struct io_descriptor *const io, uint8_t *const buf, const uint16_t length);

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
 140:	b570      	push	{r4, r5, r6, lr}
 142:	0004      	movs	r4, r0
 144:	000d      	movs	r5, r1
	int32_t rc = 0;

	ASSERT(spi && hw);
 146:	2800      	cmp	r0, #0
 148:	d002      	beq.n	150 <spi_m_sync_init+0x10>
 14a:	0008      	movs	r0, r1
 14c:	1e43      	subs	r3, r0, #1
 14e:	4198      	sbcs	r0, r3
 150:	2301      	movs	r3, #1
 152:	2242      	movs	r2, #66	; 0x42
 154:	4018      	ands	r0, r3
 156:	4909      	ldr	r1, [pc, #36]	; (17c <spi_m_sync_init+0x3c>)
 158:	4b09      	ldr	r3, [pc, #36]	; (180 <spi_m_sync_init+0x40>)
 15a:	4798      	blx	r3

	spi->dev.prvt = (void *)hw;

	rc = _spi_m_sync_init(&spi->dev, hw);
 15c:	4b09      	ldr	r3, [pc, #36]	; (184 <spi_m_sync_init+0x44>)
	spi->dev.prvt = (void *)hw;
 15e:	6025      	str	r5, [r4, #0]
	rc = _spi_m_sync_init(&spi->dev, hw);
 160:	0029      	movs	r1, r5
 162:	0020      	movs	r0, r4
 164:	4798      	blx	r3
 166:	1e03      	subs	r3, r0, #0
	if (rc < 0) {
 168:	db06      	blt.n	178 <spi_m_sync_init+0x38>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
 16a:	4b07      	ldr	r3, [pc, #28]	; (188 <spi_m_sync_init+0x48>)
 16c:	8223      	strh	r3, [r4, #16]
	spi->io.read  = _spi_m_sync_io_read;
 16e:	4b07      	ldr	r3, [pc, #28]	; (18c <spi_m_sync_init+0x4c>)
 170:	60e3      	str	r3, [r4, #12]
	spi->io.write = _spi_m_sync_io_write;
 172:	4b07      	ldr	r3, [pc, #28]	; (190 <spi_m_sync_init+0x50>)
 174:	60a3      	str	r3, [r4, #8]

	return ERR_NONE;
 176:	2300      	movs	r3, #0
}
 178:	0018      	movs	r0, r3
 17a:	bd70      	pop	{r4, r5, r6, pc}
 17c:	00000ad4 	.word	0x00000ad4
 180:	000002a5 	.word	0x000002a5
 184:	00000751 	.word	0x00000751
 188:	ffff8000 	.word	0xffff8000
 18c:	00000211 	.word	0x00000211
 190:	000001d9 	.word	0x000001d9

00000194 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
 194:	b530      	push	{r4, r5, lr}
 196:	0005      	movs	r5, r0
 198:	b087      	sub	sp, #28
 19a:	000c      	movs	r4, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
 19c:	2800      	cmp	r0, #0
 19e:	d002      	beq.n	1a6 <spi_m_sync_transfer+0x12>
 1a0:	0008      	movs	r0, r1
 1a2:	1e43      	subs	r3, r0, #1
 1a4:	4198      	sbcs	r0, r3
 1a6:	2301      	movs	r3, #1
 1a8:	22bd      	movs	r2, #189	; 0xbd
 1aa:	4018      	ands	r0, r3
 1ac:	4907      	ldr	r1, [pc, #28]	; (1cc <spi_m_sync_transfer+0x38>)
 1ae:	4b08      	ldr	r3, [pc, #32]	; (1d0 <spi_m_sync_transfer+0x3c>)
 1b0:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
 1b2:	6823      	ldr	r3, [r4, #0]
	msg.rxbuf = p_xfer->rxbuf;
	msg.size  = p_xfer->size;

	return _spi_m_sync_trans(&spi->dev, &msg);
 1b4:	a903      	add	r1, sp, #12
	msg.txbuf = p_xfer->txbuf;
 1b6:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
 1b8:	6863      	ldr	r3, [r4, #4]
	return _spi_m_sync_trans(&spi->dev, &msg);
 1ba:	0028      	movs	r0, r5
	msg.rxbuf = p_xfer->rxbuf;
 1bc:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
 1be:	68a3      	ldr	r3, [r4, #8]
 1c0:	9301      	str	r3, [sp, #4]
 1c2:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
 1c4:	4b03      	ldr	r3, [pc, #12]	; (1d4 <spi_m_sync_transfer+0x40>)
 1c6:	4798      	blx	r3
}
 1c8:	b007      	add	sp, #28
 1ca:	bd30      	pop	{r4, r5, pc}
 1cc:	00000ad4 	.word	0x00000ad4
 1d0:	000002a5 	.word	0x000002a5
 1d4:	000008e5 	.word	0x000008e5

000001d8 <_spi_m_sync_io_write>:
{
 1d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 1da:	0004      	movs	r4, r0
	ASSERT(io);
 1dc:	1e43      	subs	r3, r0, #1
 1de:	4198      	sbcs	r0, r3
{
 1e0:	000e      	movs	r6, r1
 1e2:	0015      	movs	r5, r2
	ASSERT(io);
 1e4:	b2c0      	uxtb	r0, r0
 1e6:	22ad      	movs	r2, #173	; 0xad
 1e8:	4906      	ldr	r1, [pc, #24]	; (204 <_spi_m_sync_io_write+0x2c>)
 1ea:	4b07      	ldr	r3, [pc, #28]	; (208 <_spi_m_sync_io_write+0x30>)
 1ec:	4798      	blx	r3
	xfer.rxbuf = 0;
 1ee:	2300      	movs	r3, #0
	return spi_m_sync_transfer(spi, &xfer);
 1f0:	0020      	movs	r0, r4
	xfer.rxbuf = 0;
 1f2:	9302      	str	r3, [sp, #8]
	return spi_m_sync_transfer(spi, &xfer);
 1f4:	a901      	add	r1, sp, #4
 1f6:	4b05      	ldr	r3, [pc, #20]	; (20c <_spi_m_sync_io_write+0x34>)
 1f8:	3808      	subs	r0, #8
	xfer.txbuf = (uint8_t *)buf;
 1fa:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
 1fc:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
 1fe:	4798      	blx	r3
}
 200:	b004      	add	sp, #16
 202:	bd70      	pop	{r4, r5, r6, pc}
 204:	00000ad4 	.word	0x00000ad4
 208:	000002a5 	.word	0x000002a5
 20c:	00000195 	.word	0x00000195

00000210 <_spi_m_sync_io_read>:
{
 210:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 212:	0004      	movs	r4, r0
	ASSERT(io);
 214:	1e43      	subs	r3, r0, #1
 216:	4198      	sbcs	r0, r3
{
 218:	000e      	movs	r6, r1
 21a:	0015      	movs	r5, r2
	ASSERT(io);
 21c:	b2c0      	uxtb	r0, r0
 21e:	2291      	movs	r2, #145	; 0x91
 220:	4906      	ldr	r1, [pc, #24]	; (23c <_spi_m_sync_io_read+0x2c>)
 222:	4b07      	ldr	r3, [pc, #28]	; (240 <_spi_m_sync_io_read+0x30>)
 224:	4798      	blx	r3
	xfer.txbuf = 0;
 226:	2300      	movs	r3, #0
	return spi_m_sync_transfer(spi, &xfer);
 228:	0020      	movs	r0, r4
	xfer.txbuf = 0;
 22a:	9301      	str	r3, [sp, #4]
	return spi_m_sync_transfer(spi, &xfer);
 22c:	a901      	add	r1, sp, #4
 22e:	4b05      	ldr	r3, [pc, #20]	; (244 <_spi_m_sync_io_read+0x34>)
 230:	3808      	subs	r0, #8
	xfer.rxbuf = buf;
 232:	9602      	str	r6, [sp, #8]
	xfer.size  = length;
 234:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
 236:	4798      	blx	r3
}
 238:	b004      	add	sp, #16
 23a:	bd70      	pop	{r4, r5, r6, pc}
 23c:	00000ad4 	.word	0x00000ad4
 240:	000002a5 	.word	0x000002a5
 244:	00000195 	.word	0x00000195

00000248 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
 248:	4b06      	ldr	r3, [pc, #24]	; (264 <_pm_init+0x1c>)
 24a:	7a1a      	ldrb	r2, [r3, #8]
 24c:	b2d2      	uxtb	r2, r2
 24e:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
 250:	7a5a      	ldrb	r2, [r3, #9]
 252:	b2d2      	uxtb	r2, r2
 254:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
 256:	7a9a      	ldrb	r2, [r3, #10]
 258:	b2d2      	uxtb	r2, r2
 25a:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
 25c:	7ada      	ldrb	r2, [r3, #11]
 25e:	b2d2      	uxtb	r2, r2
 260:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
 262:	4770      	bx	lr
 264:	40000400 	.word	0x40000400

00000268 <_init_chip>:
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
 268:	2102      	movs	r1, #2

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
 26a:	b510      	push	{r4, lr}
 26c:	4a08      	ldr	r2, [pc, #32]	; (290 <_init_chip+0x28>)
 26e:	6853      	ldr	r3, [r2, #4]
 270:	430b      	orrs	r3, r1
 272:	6053      	str	r3, [r2, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
 274:	4b07      	ldr	r3, [pc, #28]	; (294 <_init_chip+0x2c>)
 276:	4798      	blx	r3
	_sysctrl_init_sources();
 278:	4b07      	ldr	r3, [pc, #28]	; (298 <_init_chip+0x30>)
 27a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
 27c:	2004      	movs	r0, #4
 27e:	4c07      	ldr	r4, [pc, #28]	; (29c <_init_chip+0x34>)
 280:	47a0      	blx	r4
#endif
	_sysctrl_init_referenced_generators();
 282:	4b07      	ldr	r3, [pc, #28]	; (2a0 <_init_chip+0x38>)
 284:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
 286:	2005      	movs	r0, #5
 288:	4240      	negs	r0, r0
 28a:	47a0      	blx	r4
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
 28c:	bd10      	pop	{r4, pc}
 28e:	46c0      	nop			; (mov r8, r8)
 290:	41004000 	.word	0x41004000
 294:	00000249 	.word	0x00000249
 298:	000002ad 	.word	0x000002ad
 29c:	00000339 	.word	0x00000339
 2a0:	000002c1 	.word	0x000002c1

000002a4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
 2a4:	2800      	cmp	r0, #0
 2a6:	d100      	bne.n	2aa <assert+0x6>
		__asm("BKPT #0");
 2a8:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
 2aa:	4770      	bx	lr

000002ac <_sysctrl_init_sources>:
}

static inline void hri_sysctrl_set_OSC32K_ENABLE_bit(const void *const hw)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
 2ac:	2102      	movs	r1, #2
 2ae:	4b03      	ldr	r3, [pc, #12]	; (2bc <_sysctrl_init_sources+0x10>)
 2b0:	699a      	ldr	r2, [r3, #24]
 2b2:	430a      	orrs	r2, r1
 2b4:	619a      	str	r2, [r3, #24]
	/* Enable OSC32K anyway since GCLK configuration may need it to sync */
	hri_sysctrl_set_OSC32K_ENABLE_bit(hw);
#endif

#if CONF_OSCULP32K_CONFIG == 1
	hri_sysctrl_write_OSCULP32K_reg(hw,
 2b6:	2200      	movs	r2, #0
}

static inline void hri_sysctrl_write_OSCULP32K_reg(const void *const hw, hri_sysctrl_osculp32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSCULP32K.reg = data;
 2b8:	771a      	strb	r2, [r3, #28]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
 2ba:	4770      	bx	lr
 2bc:	40000800 	.word	0x40000800

000002c0 <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
 2c0:	2202      	movs	r2, #2
 2c2:	4b18      	ldr	r3, [pc, #96]	; (324 <_sysctrl_init_referenced_generators+0x64>)
 2c4:	849a      	strh	r2, [r3, #36]	; 0x24
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
 2c6:	320e      	adds	r2, #14
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
}

static inline bool hri_sysctrl_get_PCLKSR_DFLLRDY_bit(const void *const hw)
{
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
 2c8:	68d9      	ldr	r1, [r3, #12]
 2ca:	4211      	tst	r1, r2
 2cc:	d0fc      	beq.n	2c8 <_sysctrl_init_referenced_generators+0x8>
	((Sysctrl *)hw)->DFLLMUL.reg = data;
 2ce:	4a15      	ldr	r2, [pc, #84]	; (324 <_sysctrl_init_referenced_generators+0x64>)
 2d0:	4915      	ldr	r1, [pc, #84]	; (328 <_sysctrl_init_referenced_generators+0x68>)
 2d2:	62d1      	str	r1, [r2, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
 2d4:	4a15      	ldr	r2, [pc, #84]	; (32c <_sysctrl_init_referenced_generators+0x6c>)
 2d6:	6812      	ldr	r2, [r2, #0]
 2d8:	0e92      	lsrs	r2, r2, #26
 2da:	2a3f      	cmp	r2, #63	; 0x3f
 2dc:	d004      	beq.n	2e8 <_sysctrl_init_referenced_generators+0x28>
 2de:	2180      	movs	r1, #128	; 0x80
 2e0:	0292      	lsls	r2, r2, #10
 2e2:	0089      	lsls	r1, r1, #2
 2e4:	430a      	orrs	r2, r1
 2e6:	e001      	b.n	2ec <_sysctrl_init_referenced_generators+0x2c>
 2e8:	22fc      	movs	r2, #252	; 0xfc
 2ea:	01d2      	lsls	r2, r2, #7
	((Sysctrl *)hw)->DFLLVAL.reg = data;
 2ec:	629a      	str	r2, [r3, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
 2ee:	4a10      	ldr	r2, [pc, #64]	; (330 <_sysctrl_init_referenced_generators+0x70>)
 2f0:	849a      	strh	r2, [r3, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
 2f2:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	                                    | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
 2f4:	0752      	lsls	r2, r2, #29
 2f6:	d401      	bmi.n	2fc <_sysctrl_init_referenced_generators+0x3c>
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
			;
	} else {
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
 2f8:	2210      	movs	r2, #16
 2fa:	e005      	b.n	308 <_sysctrl_init_referenced_generators+0x48>
		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
 2fc:	21d0      	movs	r1, #208	; 0xd0
}

static inline hri_sysctrl_pclksr_reg_t hri_sysctrl_get_PCLKSR_reg(const void *const hw, hri_sysctrl_pclksr_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
 2fe:	68da      	ldr	r2, [r3, #12]
 300:	400a      	ands	r2, r1
 302:	2ad0      	cmp	r2, #208	; 0xd0
 304:	d1fb      	bne.n	2fe <_sysctrl_init_referenced_generators+0x3e>
 306:	e002      	b.n	30e <_sysctrl_init_referenced_generators+0x4e>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
 308:	68d9      	ldr	r1, [r3, #12]
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
 30a:	4211      	tst	r1, r2
 30c:	d0fc      	beq.n	308 <_sysctrl_init_referenced_generators+0x48>
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
 30e:	217f      	movs	r1, #127	; 0x7f
	return ((Gclk *)hw)->GENDIV.reg;
}

static inline bool hri_gclk_get_STATUS_SYNCBUSY_bit(const void *const hw)
{
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
 310:	4808      	ldr	r0, [pc, #32]	; (334 <_sysctrl_init_referenced_generators+0x74>)
 312:	7842      	ldrb	r2, [r0, #1]
 314:	438a      	bics	r2, r1
 316:	09d2      	lsrs	r2, r2, #7
 318:	d1fb      	bne.n	312 <_sysctrl_init_referenced_generators+0x52>
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
 31a:	2102      	movs	r1, #2
 31c:	699a      	ldr	r2, [r3, #24]
 31e:	438a      	bics	r2, r1
 320:	619a      	str	r2, [r3, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
 322:	4770      	bx	lr
 324:	40000800 	.word	0x40000800
 328:	04010000 	.word	0x04010000
 32c:	00806024 	.word	0x00806024
 330:	00000542 	.word	0x00000542
 334:	40000c00 	.word	0x40000c00

00000338 <_gclk_init_generators_by_fref>:
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
#if CONF_GCLK_GEN_0_GENEN == 1
	if (bm & (1ul << 0)) {
 338:	07c3      	lsls	r3, r0, #31
 33a:	d505      	bpl.n	348 <_gclk_init_generators_by_fref+0x10>
	((Gclk *)hw)->GENDIV.reg = data;
 33c:	2280      	movs	r2, #128	; 0x80
 33e:	4b0a      	ldr	r3, [pc, #40]	; (368 <_gclk_init_generators_by_fref+0x30>)
 340:	0092      	lsls	r2, r2, #2
 342:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
 344:	4a09      	ldr	r2, [pc, #36]	; (36c <_gclk_init_generators_by_fref+0x34>)
 346:	605a      	str	r2, [r3, #4]
		                               | CONF_GCLK_GEN_0_SRC
		                               | GCLK_GENCTRL_ID(0));
	}
#endif
#if CONF_GCLK_GEN_1_GENEN == 1
	if (bm & (1ul << 1)) {
 348:	0783      	lsls	r3, r0, #30
 34a:	d504      	bpl.n	356 <_gclk_init_generators_by_fref+0x1e>
	((Gclk *)hw)->GENDIV.reg = data;
 34c:	4b06      	ldr	r3, [pc, #24]	; (368 <_gclk_init_generators_by_fref+0x30>)
 34e:	4a08      	ldr	r2, [pc, #32]	; (370 <_gclk_init_generators_by_fref+0x38>)
 350:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
 352:	4a08      	ldr	r2, [pc, #32]	; (374 <_gclk_init_generators_by_fref+0x3c>)
 354:	605a      	str	r2, [r3, #4]
		                               | CONF_GCLK_GEN_1_SRC
		                               | GCLK_GENCTRL_ID(1));
	}
#endif
#if CONF_GCLK_GEN_2_GENEN == 1
	if (bm & (1ul << 2)) {
 356:	0743      	lsls	r3, r0, #29
 358:	d505      	bpl.n	366 <_gclk_init_generators_by_fref+0x2e>
	((Gclk *)hw)->GENDIV.reg = data;
 35a:	2281      	movs	r2, #129	; 0x81
 35c:	4b02      	ldr	r3, [pc, #8]	; (368 <_gclk_init_generators_by_fref+0x30>)
 35e:	0052      	lsls	r2, r2, #1
 360:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
 362:	4a05      	ldr	r2, [pc, #20]	; (378 <_gclk_init_generators_by_fref+0x40>)
 364:	605a      	str	r2, [r3, #4]
		                               | (CONF_GCLK_GEN_5_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_5_SRC
		                               | GCLK_GENCTRL_ID(5));
	}
#endif
}
 366:	4770      	bx	lr
 368:	40000c00 	.word	0x40000c00
 36c:	00210700 	.word	0x00210700
 370:	00000401 	.word	0x00000401
 374:	00010701 	.word	0x00010701
 378:	00210302 	.word	0x00210302

0000037c <gpio_set_pin_direction.constprop.0>:
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
 37c:	231f      	movs	r3, #31
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 37e:	22c0      	movs	r2, #192	; 0xc0
 380:	4018      	ands	r0, r3
 382:	3b1e      	subs	r3, #30
 384:	4083      	lsls	r3, r0
		                                | ((mask & 0xffff0000) >> 16));
		break;

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT_IOBUS, port, mask);
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
 386:	2180      	movs	r1, #128	; 0x80
 388:	05d2      	lsls	r2, r2, #23
 38a:	6093      	str	r3, [r2, #8]
 38c:	05c9      	lsls	r1, r1, #23
 38e:	b29a      	uxth	r2, r3
 390:	430a      	orrs	r2, r1

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 392:	4904      	ldr	r1, [pc, #16]	; (3a4 <gpio_set_pin_direction.constprop.0+0x28>)
		hri_port_write_WRCONFIG_reg(
 394:	0c1b      	lsrs	r3, r3, #16
 396:	628a      	str	r2, [r1, #40]	; 0x28
 398:	22c0      	movs	r2, #192	; 0xc0
 39a:	0612      	lsls	r2, r2, #24
 39c:	4313      	orrs	r3, r2
 39e:	628b      	str	r3, [r1, #40]	; 0x28
}
 3a0:	4770      	bx	lr
 3a2:	46c0      	nop			; (mov r8, r8)
 3a4:	41004400 	.word	0x41004400

000003a8 <delay>:
#define PA04 GPIO(GPIO_PORTA, 4)
#define PA08 GPIO(GPIO_PORTA, 8)
#define PA28 GPIO(GPIO_PORTA, 28)

void delay(uint32_t cycles) {
  for (uint32_t i = 0; i < cycles; i++) {
 3a8:	2300      	movs	r3, #0
 3aa:	4283      	cmp	r3, r0
 3ac:	d002      	beq.n	3b4 <delay+0xc>
    asm volatile("nop\n\t");
 3ae:	46c0      	nop			; (mov r8, r8)
  for (uint32_t i = 0; i < cycles; i++) {
 3b0:	3301      	adds	r3, #1
 3b2:	e7fa      	b.n	3aa <delay+0x2>
  }
}
 3b4:	4770      	bx	lr
	...

000003b8 <delayMs>:

// TODO: tune this
void delayMs(uint32_t ms) {
 3b8:	b570      	push	{r4, r5, r6, lr}
 3ba:	0005      	movs	r5, r0
  for (uint32_t i = 0; i < ms; i++) {
 3bc:	2400      	movs	r4, #0
 3be:	42ac      	cmp	r4, r5
 3c0:	d005      	beq.n	3ce <delayMs+0x16>
    delay(1000 * 4);
 3c2:	20fa      	movs	r0, #250	; 0xfa
 3c4:	4b02      	ldr	r3, [pc, #8]	; (3d0 <delayMs+0x18>)
 3c6:	0100      	lsls	r0, r0, #4
 3c8:	4798      	blx	r3
  for (uint32_t i = 0; i < ms; i++) {
 3ca:	3401      	adds	r4, #1
 3cc:	e7f7      	b.n	3be <delayMs+0x6>
  }
}
 3ce:	bd70      	pop	{r4, r5, r6, pc}
 3d0:	000003a9 	.word	0x000003a9

000003d4 <main>:
    }
  }
}

int main(void)
{
 3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 3d6:	4b7f      	ldr	r3, [pc, #508]	; (5d4 <STACK_SIZE+0x1d4>)
 3d8:	4798      	blx	r3
  PM->EXTCTRL.bit.SETDIS=true; 
 3da:	2101      	movs	r1, #1
 3dc:	4a7e      	ldr	r2, [pc, #504]	; (5d8 <STACK_SIZE+0x1d8>)

  PORT->Group[0].PINCFG[PIN_PA28].bit.PMUXEN=0;
  gpio_set_pin_direction(PA04, GPIO_DIRECTION_OUT);
 3de:	4c7f      	ldr	r4, [pc, #508]	; (5dc <STACK_SIZE+0x1dc>)
  PM->EXTCTRL.bit.SETDIS=true; 
 3e0:	7893      	ldrb	r3, [r2, #2]
  gpio_set_pin_direction(PA04, GPIO_DIRECTION_OUT);
 3e2:	2004      	movs	r0, #4
  PM->EXTCTRL.bit.SETDIS=true; 
 3e4:	430b      	orrs	r3, r1
 3e6:	7093      	strb	r3, [r2, #2]
  PORT->Group[0].PINCFG[PIN_PA28].bit.PMUXEN=0;
 3e8:	4a7d      	ldr	r2, [pc, #500]	; (5e0 <STACK_SIZE+0x1e0>)
 3ea:	2580      	movs	r5, #128	; 0x80
 3ec:	7813      	ldrb	r3, [r2, #0]
 3ee:	056d      	lsls	r5, r5, #21
 3f0:	438b      	bics	r3, r1
 3f2:	7013      	strb	r3, [r2, #0]
  gpio_set_pin_direction(PA04, GPIO_DIRECTION_OUT);
 3f4:	47a0      	blx	r4
  gpio_set_pin_direction(PA08, GPIO_DIRECTION_OUT);
 3f6:	2008      	movs	r0, #8
 3f8:	47a0      	blx	r4
  gpio_set_pin_direction(PA28, GPIO_DIRECTION_OUT);
 3fa:	201c      	movs	r0, #28
 3fc:	47a0      	blx	r4
 3fe:	24c0      	movs	r4, #192	; 0xc0
 400:	05e4      	lsls	r4, r4, #23

	while (1) {
    // Ramps the LEDs up and down.
    for (int i = 0; i < 256; i++) {
 402:	2600      	movs	r6, #0
  for (uint32_t mask = 0x800000; mask >= 1; mask >>= 1) {
 404:	2280      	movs	r2, #128	; 0x80
      writeLed(i);
 406:	2318      	movs	r3, #24
  for (uint32_t mask = 0x800000; mask >= 1; mask >>= 1) {
 408:	0412      	lsls	r2, r2, #16
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
 40a:	61a5      	str	r5, [r4, #24]
    if (data & mask) {
 40c:	4232      	tst	r2, r6
 40e:	d00b      	beq.n	428 <STACK_SIZE+0x28>
    asm volatile(
 410:	46c0      	nop			; (mov r8, r8)
 412:	e7ff      	b.n	414 <STACK_SIZE+0x14>
 414:	e7ff      	b.n	416 <STACK_SIZE+0x16>
 416:	e7ff      	b.n	418 <STACK_SIZE+0x18>
 418:	e7ff      	b.n	41a <STACK_SIZE+0x1a>
 41a:	e7ff      	b.n	41c <STACK_SIZE+0x1c>
 41c:	e7ff      	b.n	41e <STACK_SIZE+0x1e>
 41e:	e7ff      	b.n	420 <STACK_SIZE+0x20>
 420:	e7ff      	b.n	422 <STACK_SIZE+0x22>
 422:	e7ff      	b.n	424 <STACK_SIZE+0x24>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 424:	6165      	str	r5, [r4, #20]
 426:	e00a      	b.n	43e <STACK_SIZE+0x3e>
    asm volatile(
 428:	46c0      	nop			; (mov r8, r8)
 42a:	46c0      	nop			; (mov r8, r8)
 42c:	6165      	str	r5, [r4, #20]
    asm volatile(
 42e:	46c0      	nop			; (mov r8, r8)
 430:	e7ff      	b.n	432 <STACK_SIZE+0x32>
 432:	e7ff      	b.n	434 <STACK_SIZE+0x34>
 434:	e7ff      	b.n	436 <STACK_SIZE+0x36>
 436:	e7ff      	b.n	438 <STACK_SIZE+0x38>
 438:	e7ff      	b.n	43a <STACK_SIZE+0x3a>
 43a:	e7ff      	b.n	43c <STACK_SIZE+0x3c>
 43c:	e7ff      	b.n	43e <STACK_SIZE+0x3e>
 43e:	3b01      	subs	r3, #1
  for (uint32_t mask = 0x800000; mask >= 1; mask >>= 1) {
 440:	0852      	lsrs	r2, r2, #1
 442:	2b00      	cmp	r3, #0
 444:	d1e1      	bne.n	40a <STACK_SIZE+0xa>
 446:	2180      	movs	r1, #128	; 0x80
      writeLed(i << 8);
 448:	2218      	movs	r2, #24
 44a:	0230      	lsls	r0, r6, #8
  for (uint32_t mask = 0x800000; mask >= 1; mask >>= 1) {
 44c:	0409      	lsls	r1, r1, #16
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
 44e:	61a5      	str	r5, [r4, #24]
    if (data & mask) {
 450:	4201      	tst	r1, r0
 452:	d00b      	beq.n	46c <STACK_SIZE+0x6c>
    asm volatile(
 454:	46c0      	nop			; (mov r8, r8)
 456:	e7ff      	b.n	458 <STACK_SIZE+0x58>
 458:	e7ff      	b.n	45a <STACK_SIZE+0x5a>
 45a:	e7ff      	b.n	45c <STACK_SIZE+0x5c>
 45c:	e7ff      	b.n	45e <STACK_SIZE+0x5e>
 45e:	e7ff      	b.n	460 <STACK_SIZE+0x60>
 460:	e7ff      	b.n	462 <STACK_SIZE+0x62>
 462:	e7ff      	b.n	464 <STACK_SIZE+0x64>
 464:	e7ff      	b.n	466 <STACK_SIZE+0x66>
 466:	e7ff      	b.n	468 <STACK_SIZE+0x68>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 468:	6165      	str	r5, [r4, #20]
 46a:	e00a      	b.n	482 <STACK_SIZE+0x82>
    asm volatile(
 46c:	46c0      	nop			; (mov r8, r8)
 46e:	46c0      	nop			; (mov r8, r8)
 470:	6165      	str	r5, [r4, #20]
    asm volatile(
 472:	46c0      	nop			; (mov r8, r8)
 474:	e7ff      	b.n	476 <STACK_SIZE+0x76>
 476:	e7ff      	b.n	478 <STACK_SIZE+0x78>
 478:	e7ff      	b.n	47a <STACK_SIZE+0x7a>
 47a:	e7ff      	b.n	47c <STACK_SIZE+0x7c>
 47c:	e7ff      	b.n	47e <STACK_SIZE+0x7e>
 47e:	e7ff      	b.n	480 <STACK_SIZE+0x80>
 480:	e7ff      	b.n	482 <STACK_SIZE+0x82>
 482:	3a01      	subs	r2, #1
  for (uint32_t mask = 0x800000; mask >= 1; mask >>= 1) {
 484:	0849      	lsrs	r1, r1, #1
 486:	2a00      	cmp	r2, #0
 488:	d1e1      	bne.n	44e <STACK_SIZE+0x4e>
 48a:	2180      	movs	r1, #128	; 0x80
      writeLed(i << 16);
 48c:	0433      	lsls	r3, r6, #16
 48e:	3218      	adds	r2, #24
  for (uint32_t mask = 0x800000; mask >= 1; mask >>= 1) {
 490:	0409      	lsls	r1, r1, #16
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
 492:	61a5      	str	r5, [r4, #24]
    if (data & mask) {
 494:	4219      	tst	r1, r3
 496:	d00b      	beq.n	4b0 <STACK_SIZE+0xb0>
    asm volatile(
 498:	46c0      	nop			; (mov r8, r8)
 49a:	e7ff      	b.n	49c <STACK_SIZE+0x9c>
 49c:	e7ff      	b.n	49e <STACK_SIZE+0x9e>
 49e:	e7ff      	b.n	4a0 <STACK_SIZE+0xa0>
 4a0:	e7ff      	b.n	4a2 <STACK_SIZE+0xa2>
 4a2:	e7ff      	b.n	4a4 <STACK_SIZE+0xa4>
 4a4:	e7ff      	b.n	4a6 <STACK_SIZE+0xa6>
 4a6:	e7ff      	b.n	4a8 <STACK_SIZE+0xa8>
 4a8:	e7ff      	b.n	4aa <STACK_SIZE+0xaa>
 4aa:	e7ff      	b.n	4ac <STACK_SIZE+0xac>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 4ac:	6165      	str	r5, [r4, #20]
 4ae:	e00a      	b.n	4c6 <STACK_SIZE+0xc6>
    asm volatile(
 4b0:	46c0      	nop			; (mov r8, r8)
 4b2:	46c0      	nop			; (mov r8, r8)
 4b4:	6165      	str	r5, [r4, #20]
    asm volatile(
 4b6:	46c0      	nop			; (mov r8, r8)
 4b8:	e7ff      	b.n	4ba <STACK_SIZE+0xba>
 4ba:	e7ff      	b.n	4bc <STACK_SIZE+0xbc>
 4bc:	e7ff      	b.n	4be <STACK_SIZE+0xbe>
 4be:	e7ff      	b.n	4c0 <STACK_SIZE+0xc0>
 4c0:	e7ff      	b.n	4c2 <STACK_SIZE+0xc2>
 4c2:	e7ff      	b.n	4c4 <STACK_SIZE+0xc4>
 4c4:	e7ff      	b.n	4c6 <STACK_SIZE+0xc6>
 4c6:	3a01      	subs	r2, #1
  for (uint32_t mask = 0x800000; mask >= 1; mask >>= 1) {
 4c8:	0849      	lsrs	r1, r1, #1
 4ca:	2a00      	cmp	r2, #0
 4cc:	d1e1      	bne.n	492 <STACK_SIZE+0x92>
 4ce:	2180      	movs	r1, #128	; 0x80
      writeLed(i | (i << 8) | (i << 16));
 4d0:	4303      	orrs	r3, r0
 4d2:	4333      	orrs	r3, r6
 4d4:	3218      	adds	r2, #24
  for (uint32_t mask = 0x800000; mask >= 1; mask >>= 1) {
 4d6:	0409      	lsls	r1, r1, #16
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
 4d8:	61a5      	str	r5, [r4, #24]
    if (data & mask) {
 4da:	4219      	tst	r1, r3
 4dc:	d00b      	beq.n	4f6 <STACK_SIZE+0xf6>
    asm volatile(
 4de:	46c0      	nop			; (mov r8, r8)
 4e0:	e7ff      	b.n	4e2 <STACK_SIZE+0xe2>
 4e2:	e7ff      	b.n	4e4 <STACK_SIZE+0xe4>
 4e4:	e7ff      	b.n	4e6 <STACK_SIZE+0xe6>
 4e6:	e7ff      	b.n	4e8 <STACK_SIZE+0xe8>
 4e8:	e7ff      	b.n	4ea <STACK_SIZE+0xea>
 4ea:	e7ff      	b.n	4ec <STACK_SIZE+0xec>
 4ec:	e7ff      	b.n	4ee <STACK_SIZE+0xee>
 4ee:	e7ff      	b.n	4f0 <STACK_SIZE+0xf0>
 4f0:	e7ff      	b.n	4f2 <STACK_SIZE+0xf2>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 4f2:	6165      	str	r5, [r4, #20]
 4f4:	e00a      	b.n	50c <STACK_SIZE+0x10c>
    asm volatile(
 4f6:	46c0      	nop			; (mov r8, r8)
 4f8:	46c0      	nop			; (mov r8, r8)
 4fa:	6165      	str	r5, [r4, #20]
    asm volatile(
 4fc:	46c0      	nop			; (mov r8, r8)
 4fe:	e7ff      	b.n	500 <STACK_SIZE+0x100>
 500:	e7ff      	b.n	502 <STACK_SIZE+0x102>
 502:	e7ff      	b.n	504 <STACK_SIZE+0x104>
 504:	e7ff      	b.n	506 <STACK_SIZE+0x106>
 506:	e7ff      	b.n	508 <STACK_SIZE+0x108>
 508:	e7ff      	b.n	50a <STACK_SIZE+0x10a>
 50a:	e7ff      	b.n	50c <STACK_SIZE+0x10c>
 50c:	3a01      	subs	r2, #1
  for (uint32_t mask = 0x800000; mask >= 1; mask >>= 1) {
 50e:	0849      	lsrs	r1, r1, #1
 510:	2a00      	cmp	r2, #0
 512:	d1e1      	bne.n	4d8 <STACK_SIZE+0xd8>
      delayMs(10);
 514:	200a      	movs	r0, #10
 516:	4f33      	ldr	r7, [pc, #204]	; (5e4 <STACK_SIZE+0x1e4>)
 518:	47b8      	blx	r7
    for (int i = 0; i < 256; i++) {
 51a:	2380      	movs	r3, #128	; 0x80
 51c:	3601      	adds	r6, #1
 51e:	005b      	lsls	r3, r3, #1
 520:	429e      	cmp	r6, r3
 522:	d000      	beq.n	526 <STACK_SIZE+0x126>
 524:	e76e      	b.n	404 <STACK_SIZE+0x4>
 526:	26ff      	movs	r6, #255	; 0xff
  for (uint32_t mask = 0x800000; mask >= 1; mask >>= 1) {
 528:	2280      	movs	r2, #128	; 0x80
    }
    for (int i = 255; i >= 0; i--) {
      writeLed(i);
 52a:	2318      	movs	r3, #24
  for (uint32_t mask = 0x800000; mask >= 1; mask >>= 1) {
 52c:	0412      	lsls	r2, r2, #16
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
 52e:	61a5      	str	r5, [r4, #24]
    if (data & mask) {
 530:	4232      	tst	r2, r6
 532:	d00b      	beq.n	54c <STACK_SIZE+0x14c>
    asm volatile(
 534:	46c0      	nop			; (mov r8, r8)
 536:	e7ff      	b.n	538 <STACK_SIZE+0x138>
 538:	e7ff      	b.n	53a <STACK_SIZE+0x13a>
 53a:	e7ff      	b.n	53c <STACK_SIZE+0x13c>
 53c:	e7ff      	b.n	53e <STACK_SIZE+0x13e>
 53e:	e7ff      	b.n	540 <STACK_SIZE+0x140>
 540:	e7ff      	b.n	542 <STACK_SIZE+0x142>
 542:	e7ff      	b.n	544 <STACK_SIZE+0x144>
 544:	e7ff      	b.n	546 <STACK_SIZE+0x146>
 546:	e7ff      	b.n	548 <STACK_SIZE+0x148>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 548:	6165      	str	r5, [r4, #20]
 54a:	e00a      	b.n	562 <STACK_SIZE+0x162>
    asm volatile(
 54c:	46c0      	nop			; (mov r8, r8)
 54e:	46c0      	nop			; (mov r8, r8)
 550:	6165      	str	r5, [r4, #20]
    asm volatile(
 552:	46c0      	nop			; (mov r8, r8)
 554:	e7ff      	b.n	556 <STACK_SIZE+0x156>
 556:	e7ff      	b.n	558 <STACK_SIZE+0x158>
 558:	e7ff      	b.n	55a <STACK_SIZE+0x15a>
 55a:	e7ff      	b.n	55c <STACK_SIZE+0x15c>
 55c:	e7ff      	b.n	55e <STACK_SIZE+0x15e>
 55e:	e7ff      	b.n	560 <STACK_SIZE+0x160>
 560:	e7ff      	b.n	562 <STACK_SIZE+0x162>
 562:	3b01      	subs	r3, #1
  for (uint32_t mask = 0x800000; mask >= 1; mask >>= 1) {
 564:	0852      	lsrs	r2, r2, #1
 566:	2b00      	cmp	r3, #0
 568:	d1e1      	bne.n	52e <STACK_SIZE+0x12e>
 56a:	2380      	movs	r3, #128	; 0x80
      writeLed(i << 8);
 56c:	2218      	movs	r2, #24
 56e:	0230      	lsls	r0, r6, #8
  for (uint32_t mask = 0x800000; mask >= 1; mask >>= 1) {
 570:	041b      	lsls	r3, r3, #16
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
 572:	61a5      	str	r5, [r4, #24]
    if (data & mask) {
 574:	4203      	tst	r3, r0
 576:	d00b      	beq.n	590 <STACK_SIZE+0x190>
    asm volatile(
 578:	46c0      	nop			; (mov r8, r8)
 57a:	e7ff      	b.n	57c <STACK_SIZE+0x17c>
 57c:	e7ff      	b.n	57e <STACK_SIZE+0x17e>
 57e:	e7ff      	b.n	580 <STACK_SIZE+0x180>
 580:	e7ff      	b.n	582 <STACK_SIZE+0x182>
 582:	e7ff      	b.n	584 <STACK_SIZE+0x184>
 584:	e7ff      	b.n	586 <STACK_SIZE+0x186>
 586:	e7ff      	b.n	588 <STACK_SIZE+0x188>
 588:	e7ff      	b.n	58a <STACK_SIZE+0x18a>
 58a:	e7ff      	b.n	58c <STACK_SIZE+0x18c>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 58c:	6165      	str	r5, [r4, #20]
 58e:	e00a      	b.n	5a6 <STACK_SIZE+0x1a6>
    asm volatile(
 590:	46c0      	nop			; (mov r8, r8)
 592:	46c0      	nop			; (mov r8, r8)
 594:	6165      	str	r5, [r4, #20]
    asm volatile(
 596:	46c0      	nop			; (mov r8, r8)
 598:	e7ff      	b.n	59a <STACK_SIZE+0x19a>
 59a:	e7ff      	b.n	59c <STACK_SIZE+0x19c>
 59c:	e7ff      	b.n	59e <STACK_SIZE+0x19e>
 59e:	e7ff      	b.n	5a0 <STACK_SIZE+0x1a0>
 5a0:	e7ff      	b.n	5a2 <STACK_SIZE+0x1a2>
 5a2:	e7ff      	b.n	5a4 <STACK_SIZE+0x1a4>
 5a4:	e7ff      	b.n	5a6 <STACK_SIZE+0x1a6>
 5a6:	3a01      	subs	r2, #1
  for (uint32_t mask = 0x800000; mask >= 1; mask >>= 1) {
 5a8:	085b      	lsrs	r3, r3, #1
 5aa:	2a00      	cmp	r2, #0
 5ac:	d1e1      	bne.n	572 <STACK_SIZE+0x172>
 5ae:	2180      	movs	r1, #128	; 0x80
      writeLed(i << 16);
 5b0:	0433      	lsls	r3, r6, #16
 5b2:	3218      	adds	r2, #24
  for (uint32_t mask = 0x800000; mask >= 1; mask >>= 1) {
 5b4:	0409      	lsls	r1, r1, #16
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
 5b6:	61a5      	str	r5, [r4, #24]
    if (data & mask) {
 5b8:	4219      	tst	r1, r3
 5ba:	d015      	beq.n	5e8 <STACK_SIZE+0x1e8>
    asm volatile(
 5bc:	46c0      	nop			; (mov r8, r8)
 5be:	e7ff      	b.n	5c0 <STACK_SIZE+0x1c0>
 5c0:	e7ff      	b.n	5c2 <STACK_SIZE+0x1c2>
 5c2:	e7ff      	b.n	5c4 <STACK_SIZE+0x1c4>
 5c4:	e7ff      	b.n	5c6 <STACK_SIZE+0x1c6>
 5c6:	e7ff      	b.n	5c8 <STACK_SIZE+0x1c8>
 5c8:	e7ff      	b.n	5ca <STACK_SIZE+0x1ca>
 5ca:	e7ff      	b.n	5cc <STACK_SIZE+0x1cc>
 5cc:	e7ff      	b.n	5ce <STACK_SIZE+0x1ce>
 5ce:	e7ff      	b.n	5d0 <STACK_SIZE+0x1d0>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 5d0:	6165      	str	r5, [r4, #20]
 5d2:	e014      	b.n	5fe <STACK_SIZE+0x1fe>
 5d4:	000009c1 	.word	0x000009c1
 5d8:	40000400 	.word	0x40000400
 5dc:	0000037d 	.word	0x0000037d
 5e0:	4100445c 	.word	0x4100445c
 5e4:	000003b9 	.word	0x000003b9
    asm volatile(
 5e8:	46c0      	nop			; (mov r8, r8)
 5ea:	46c0      	nop			; (mov r8, r8)
 5ec:	6165      	str	r5, [r4, #20]
    asm volatile(
 5ee:	46c0      	nop			; (mov r8, r8)
 5f0:	e7ff      	b.n	5f2 <STACK_SIZE+0x1f2>
 5f2:	e7ff      	b.n	5f4 <STACK_SIZE+0x1f4>
 5f4:	e7ff      	b.n	5f6 <STACK_SIZE+0x1f6>
 5f6:	e7ff      	b.n	5f8 <STACK_SIZE+0x1f8>
 5f8:	e7ff      	b.n	5fa <STACK_SIZE+0x1fa>
 5fa:	e7ff      	b.n	5fc <STACK_SIZE+0x1fc>
 5fc:	e7ff      	b.n	5fe <STACK_SIZE+0x1fe>
 5fe:	3a01      	subs	r2, #1
  for (uint32_t mask = 0x800000; mask >= 1; mask >>= 1) {
 600:	0849      	lsrs	r1, r1, #1
 602:	2a00      	cmp	r2, #0
 604:	d1d7      	bne.n	5b6 <STACK_SIZE+0x1b6>
 606:	2180      	movs	r1, #128	; 0x80
      writeLed(i | (i << 8) | (i << 16));
 608:	4303      	orrs	r3, r0
 60a:	4333      	orrs	r3, r6
 60c:	3218      	adds	r2, #24
  for (uint32_t mask = 0x800000; mask >= 1; mask >>= 1) {
 60e:	0409      	lsls	r1, r1, #16
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
 610:	61a5      	str	r5, [r4, #24]
    if (data & mask) {
 612:	4219      	tst	r1, r3
 614:	d00b      	beq.n	62e <STACK_SIZE+0x22e>
    asm volatile(
 616:	46c0      	nop			; (mov r8, r8)
 618:	e7ff      	b.n	61a <STACK_SIZE+0x21a>
 61a:	e7ff      	b.n	61c <STACK_SIZE+0x21c>
 61c:	e7ff      	b.n	61e <STACK_SIZE+0x21e>
 61e:	e7ff      	b.n	620 <STACK_SIZE+0x220>
 620:	e7ff      	b.n	622 <STACK_SIZE+0x222>
 622:	e7ff      	b.n	624 <STACK_SIZE+0x224>
 624:	e7ff      	b.n	626 <STACK_SIZE+0x226>
 626:	e7ff      	b.n	628 <STACK_SIZE+0x228>
 628:	e7ff      	b.n	62a <STACK_SIZE+0x22a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 62a:	6165      	str	r5, [r4, #20]
 62c:	e00a      	b.n	644 <STACK_SIZE+0x244>
    asm volatile(
 62e:	46c0      	nop			; (mov r8, r8)
 630:	46c0      	nop			; (mov r8, r8)
 632:	6165      	str	r5, [r4, #20]
    asm volatile(
 634:	46c0      	nop			; (mov r8, r8)
 636:	e7ff      	b.n	638 <STACK_SIZE+0x238>
 638:	e7ff      	b.n	63a <STACK_SIZE+0x23a>
 63a:	e7ff      	b.n	63c <STACK_SIZE+0x23c>
 63c:	e7ff      	b.n	63e <STACK_SIZE+0x23e>
 63e:	e7ff      	b.n	640 <STACK_SIZE+0x240>
 640:	e7ff      	b.n	642 <STACK_SIZE+0x242>
 642:	e7ff      	b.n	644 <STACK_SIZE+0x244>
 644:	3a01      	subs	r2, #1
  for (uint32_t mask = 0x800000; mask >= 1; mask >>= 1) {
 646:	0849      	lsrs	r1, r1, #1
 648:	2a00      	cmp	r2, #0
 64a:	d1e1      	bne.n	610 <STACK_SIZE+0x210>
      delayMs(10);
 64c:	200a      	movs	r0, #10
 64e:	47b8      	blx	r7
    for (int i = 255; i >= 0; i--) {
 650:	3e01      	subs	r6, #1
 652:	d300      	bcc.n	656 <STACK_SIZE+0x256>
 654:	e768      	b.n	528 <STACK_SIZE+0x128>
 656:	e6d4      	b.n	402 <STACK_SIZE+0x2>

00000658 <SPI_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 658:	20c0      	movs	r0, #192	; 0xc0
 65a:	2280      	movs	r2, #128	; 0x80
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 65c:	4b20      	ldr	r3, [pc, #128]	; (6e0 <SPI_0_PORT_init+0x88>)
#include <hpl_pm_base.h>

struct spi_m_sync_descriptor SPI_0;

void SPI_0_PORT_init(void)
{
 65e:	b5f0      	push	{r4, r5, r6, r7, lr}
 660:	25c0      	movs	r5, #192	; 0xc0
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 662:	001c      	movs	r4, r3
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 664:	491f      	ldr	r1, [pc, #124]	; (6e4 <SPI_0_PORT_init+0x8c>)
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 666:	05c0      	lsls	r0, r0, #23
 668:	01d2      	lsls	r2, r2, #7
 66a:	6082      	str	r2, [r0, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 66c:	6299      	str	r1, [r3, #40]	; 0x28
	tmp &= ~PORT_PINCFG_PMUXEN;
 66e:	2101      	movs	r1, #1
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 670:	062d      	lsls	r5, r5, #24
 672:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 674:	344e      	adds	r4, #78	; 0x4e
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 676:	6142      	str	r2, [r0, #20]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 678:	7822      	ldrb	r2, [r4, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
 67a:	001e      	movs	r6, r3
	tmp &= ~PORT_PINCFG_PMUXEN;
 67c:	438a      	bics	r2, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
 67e:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 680:	7022      	strb	r2, [r4, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
 682:	220f      	movs	r2, #15
	tmp |= PORT_PMUX_PMUXE(data);
 684:	2702      	movs	r7, #2
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
 686:	3637      	adds	r6, #55	; 0x37
 688:	7834      	ldrb	r4, [r6, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
 68a:	4394      	bics	r4, r2
	tmp |= PORT_PMUX_PMUXE(data);
 68c:	433c      	orrs	r4, r7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
 68e:	7034      	strb	r4, [r6, #0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 690:	2480      	movs	r4, #128	; 0x80
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 692:	4f15      	ldr	r7, [pc, #84]	; (6e8 <SPI_0_PORT_init+0x90>)
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 694:	0224      	lsls	r4, r4, #8
 696:	6084      	str	r4, [r0, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 698:	629f      	str	r7, [r3, #40]	; 0x28
 69a:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 69c:	001d      	movs	r5, r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 69e:	6144      	str	r4, [r0, #20]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 6a0:	354f      	adds	r5, #79	; 0x4f
 6a2:	782c      	ldrb	r4, [r5, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
 6a4:	438c      	bics	r4, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
 6a6:	430c      	orrs	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 6a8:	702c      	strb	r4, [r5, #0]
	tmp |= PORT_PMUX_PMUXO(data);
 6aa:	2420      	movs	r4, #32
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
 6ac:	7835      	ldrb	r5, [r6, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
 6ae:	4015      	ands	r5, r2
	tmp |= PORT_PMUX_PMUXO(data);
 6b0:	4325      	orrs	r5, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
 6b2:	7035      	strb	r5, [r6, #0]
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
 6b4:	001d      	movs	r5, r3
 6b6:	2604      	movs	r6, #4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
 6b8:	6044      	str	r4, [r0, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 6ba:	480c      	ldr	r0, [pc, #48]	; (6ec <SPI_0_PORT_init+0x94>)
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
 6bc:	3545      	adds	r5, #69	; 0x45
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 6be:	6298      	str	r0, [r3, #40]	; 0x28
 6c0:	480b      	ldr	r0, [pc, #44]	; (6f0 <SPI_0_PORT_init+0x98>)
 6c2:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
 6c4:	7828      	ldrb	r0, [r5, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
 6c6:	3332      	adds	r3, #50	; 0x32
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
 6c8:	43b0      	bics	r0, r6
 6ca:	7028      	strb	r0, [r5, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 6cc:	7828      	ldrb	r0, [r5, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
 6ce:	4388      	bics	r0, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
 6d0:	4301      	orrs	r1, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 6d2:	7029      	strb	r1, [r5, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
 6d4:	7819      	ldrb	r1, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
 6d6:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
 6d8:	4322      	orrs	r2, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
 6da:	701a      	strb	r2, [r3, #0]
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA05, PINMUX_PA05C_SERCOM0_PAD3);
}
 6dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 6de:	46c0      	nop			; (mov r8, r8)
 6e0:	41004400 	.word	0x41004400
 6e4:	40004000 	.word	0x40004000
 6e8:	40008000 	.word	0x40008000
 6ec:	40020020 	.word	0x40020020
 6f0:	c0020000 	.word	0xc0020000

000006f4 <SPI_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
 6f4:	2104      	movs	r1, #4
 6f6:	4a04      	ldr	r2, [pc, #16]	; (708 <SPI_0_CLOCK_init+0x14>)
 6f8:	6a13      	ldr	r3, [r2, #32]
 6fa:	430b      	orrs	r3, r1
 6fc:	6213      	str	r3, [r2, #32]
	((Gclk *)hw)->CLKCTRL.reg = data;
 6fe:	4a03      	ldr	r2, [pc, #12]	; (70c <SPI_0_CLOCK_init+0x18>)
 700:	4b03      	ldr	r3, [pc, #12]	; (710 <SPI_0_CLOCK_init+0x1c>)
 702:	805a      	strh	r2, [r3, #2]

void SPI_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
}
 704:	4770      	bx	lr
 706:	46c0      	nop			; (mov r8, r8)
 708:	40000400 	.word	0x40000400
 70c:	0000410e 	.word	0x0000410e
 710:	40000c00 	.word	0x40000c00

00000714 <SPI_0_init>:

void SPI_0_init(void)
{
 714:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
 716:	4b04      	ldr	r3, [pc, #16]	; (728 <SPI_0_init+0x14>)
 718:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM0);
 71a:	4904      	ldr	r1, [pc, #16]	; (72c <SPI_0_init+0x18>)
 71c:	4b04      	ldr	r3, [pc, #16]	; (730 <SPI_0_init+0x1c>)
 71e:	4805      	ldr	r0, [pc, #20]	; (734 <SPI_0_init+0x20>)
 720:	4798      	blx	r3
	SPI_0_PORT_init();
 722:	4b05      	ldr	r3, [pc, #20]	; (738 <SPI_0_init+0x24>)
 724:	4798      	blx	r3
}
 726:	bd10      	pop	{r4, pc}
 728:	000006f5 	.word	0x000006f5
 72c:	42000800 	.word	0x42000800
 730:	00000141 	.word	0x00000141
 734:	2000001c 	.word	0x2000001c
 738:	00000659 	.word	0x00000659

0000073c <system_init>:

void system_init(void)
{
 73c:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
 73e:	4b02      	ldr	r3, [pc, #8]	; (748 <system_init+0xc>)
 740:	4798      	blx	r3
	init_mcu();

	SPI_0_init();
 742:	4b02      	ldr	r3, [pc, #8]	; (74c <system_init+0x10>)
 744:	4798      	blx	r3
}
 746:	bd10      	pop	{r4, pc}
 748:	00000269 	.word	0x00000269
 74c:	00000715 	.word	0x00000715

00000750 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
 750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (sercomspi_regs[i].n == n) {
 752:	4b59      	ldr	r3, [pc, #356]	; (8b8 <_spi_m_sync_init+0x168>)
{
 754:	0006      	movs	r6, r0
		if (sercomspi_regs[i].n == n) {
 756:	18c8      	adds	r0, r1, r3
 758:	0a80      	lsrs	r0, r0, #10
 75a:	b2c0      	uxtb	r0, r0
{
 75c:	000d      	movs	r5, r1
 75e:	4f57      	ldr	r7, [pc, #348]	; (8bc <_spi_m_sync_init+0x16c>)
		if (sercomspi_regs[i].n == n) {
 760:	2800      	cmp	r0, #0
 762:	d000      	beq.n	766 <_spi_m_sync_init+0x16>
 764:	e09c      	b.n	8a0 <_spi_m_sync_init+0x150>
 766:	4c56      	ldr	r4, [pc, #344]	; (8c0 <_spi_m_sync_init+0x170>)
			return &sercomspi_regs[i];
 768:	3418      	adds	r4, #24
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
 76a:	2e00      	cmp	r6, #0
 76c:	d002      	beq.n	774 <_spi_m_sync_init+0x24>
 76e:	0028      	movs	r0, r5
 770:	1e43      	subs	r3, r0, #1
 772:	4198      	sbcs	r0, r3
 774:	2301      	movs	r3, #1
 776:	4a53      	ldr	r2, [pc, #332]	; (8c4 <_spi_m_sync_init+0x174>)
 778:	4018      	ands	r0, r3
 77a:	0039      	movs	r1, r7
 77c:	4b52      	ldr	r3, [pc, #328]	; (8c8 <_spi_m_sync_init+0x178>)
 77e:	4798      	blx	r3

	if (regs == NULL) {
 780:	2c00      	cmp	r4, #0
 782:	d100      	bne.n	786 <_spi_m_sync_init+0x36>
 784:	e095      	b.n	8b2 <_spi_m_sync_init+0x162>
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
 786:	2301      	movs	r3, #1
 788:	69ea      	ldr	r2, [r5, #28]
 78a:	421a      	tst	r2, r3
 78c:	d1fc      	bne.n	788 <_spi_m_sync_init+0x38>
 78e:	2303      	movs	r3, #3
 790:	69ea      	ldr	r2, [r5, #28]
 792:	421a      	tst	r2, r3
 794:	d1fc      	bne.n	790 <_spi_m_sync_init+0x40>

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
 796:	682b      	ldr	r3, [r5, #0]
		return ERR_INVALID_ARG;
	}

	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
	if (hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
 798:	079b      	lsls	r3, r3, #30
 79a:	d47f      	bmi.n	89c <_spi_m_sync_init+0x14c>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
 79c:	2201      	movs	r2, #1
 79e:	69e9      	ldr	r1, [r5, #28]
 7a0:	2301      	movs	r3, #1
 7a2:	4211      	tst	r1, r2
 7a4:	d1fb      	bne.n	79e <_spi_m_sync_init+0x4e>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
 7a6:	682a      	ldr	r2, [r5, #0]
 7a8:	431a      	orrs	r2, r3
 7aa:	602a      	str	r2, [r5, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
 7ac:	69ea      	ldr	r2, [r5, #28]
 7ae:	421a      	tst	r2, r3
 7b0:	d1fc      	bne.n	7ac <_spi_m_sync_init+0x5c>
	}
	hri_sercomspi_set_CTRLA_SWRST_bit(hw);
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
	dev->prvt = hw;

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
 7b2:	231c      	movs	r3, #28
	dev->prvt = hw;
 7b4:	6035      	str	r5, [r6, #0]
	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
 7b6:	7822      	ldrb	r2, [r4, #0]
 7b8:	4013      	ands	r3, r2
 7ba:	2b08      	cmp	r3, #8
 7bc:	d136      	bne.n	82c <_spi_m_sync_init+0xdc>
	ASSERT(hw && regs);
 7be:	4a43      	ldr	r2, [pc, #268]	; (8cc <_spi_m_sync_init+0x17c>)
 7c0:	2001      	movs	r0, #1
 7c2:	4b41      	ldr	r3, [pc, #260]	; (8c8 <_spi_m_sync_init+0x178>)
 7c4:	0039      	movs	r1, r7
 7c6:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
 7c8:	7862      	ldrb	r2, [r4, #1]
 7ca:	7820      	ldrb	r0, [r4, #0]
 7cc:	78a3      	ldrb	r3, [r4, #2]
 7ce:	0212      	lsls	r2, r2, #8
 7d0:	4302      	orrs	r2, r0
 7d2:	041b      	lsls	r3, r3, #16
 7d4:	4313      	orrs	r3, r2
 7d6:	001a      	movs	r2, r3
 7d8:	78e3      	ldrb	r3, [r4, #3]
 7da:	061b      	lsls	r3, r3, #24
 7dc:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
 7de:	4a3c      	ldr	r2, [pc, #240]	; (8d0 <_spi_m_sync_init+0x180>)
 7e0:	4013      	ands	r3, r2
}

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
 7e2:	602b      	str	r3, [r5, #0]
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
 7e4:	7962      	ldrb	r2, [r4, #5]
 7e6:	7920      	ldrb	r0, [r4, #4]
 7e8:	79a3      	ldrb	r3, [r4, #6]
 7ea:	0212      	lsls	r2, r2, #8
 7ec:	4302      	orrs	r2, r0
 7ee:	041b      	lsls	r3, r3, #16
 7f0:	4313      	orrs	r3, r2
 7f2:	001a      	movs	r2, r3
 7f4:	79e3      	ldrb	r3, [r4, #7]
 7f6:	061b      	lsls	r3, r3, #24
 7f8:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLB_reg(hw,
 7fa:	4a36      	ldr	r2, [pc, #216]	; (8d4 <_spi_m_sync_init+0x184>)
 7fc:	4013      	ands	r3, r2
 7fe:	4a36      	ldr	r2, [pc, #216]	; (8d8 <_spi_m_sync_init+0x188>)
 800:	4313      	orrs	r3, r2
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
 802:	606b      	str	r3, [r5, #4]
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
 804:	7a62      	ldrb	r2, [r4, #9]
 806:	7a20      	ldrb	r0, [r4, #8]
 808:	7aa3      	ldrb	r3, [r4, #10]
 80a:	0212      	lsls	r2, r2, #8
 80c:	4302      	orrs	r2, r0
 80e:	041b      	lsls	r3, r3, #16
 810:	4313      	orrs	r3, r2
 812:	001a      	movs	r2, r3
 814:	7ae3      	ldrb	r3, [r4, #11]
 816:	061b      	lsls	r3, r3, #24
 818:	4313      	orrs	r3, r2
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
 81a:	626b      	str	r3, [r5, #36]	; 0x24
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
 81c:	002b      	movs	r3, r5
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
 81e:	7b62      	ldrb	r2, [r4, #13]
 820:	3330      	adds	r3, #48	; 0x30
 822:	701a      	strb	r2, [r3, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
 824:	69eb      	ldr	r3, [r5, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
 826:	2b00      	cmp	r3, #0
 828:	d1fc      	bne.n	824 <_spi_m_sync_init+0xd4>
 82a:	e028      	b.n	87e <_spi_m_sync_init+0x12e>
	ASSERT(hw && regs);
 82c:	4a2b      	ldr	r2, [pc, #172]	; (8dc <_spi_m_sync_init+0x18c>)
 82e:	2001      	movs	r0, #1
 830:	4b25      	ldr	r3, [pc, #148]	; (8c8 <_spi_m_sync_init+0x178>)
 832:	0039      	movs	r1, r7
 834:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
 836:	7862      	ldrb	r2, [r4, #1]
 838:	7820      	ldrb	r0, [r4, #0]
 83a:	78a3      	ldrb	r3, [r4, #2]
 83c:	0212      	lsls	r2, r2, #8
 83e:	4302      	orrs	r2, r0
 840:	041b      	lsls	r3, r3, #16
 842:	4313      	orrs	r3, r2
 844:	001a      	movs	r2, r3
 846:	78e3      	ldrb	r3, [r4, #3]
 848:	061b      	lsls	r3, r3, #24
 84a:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
 84c:	4a20      	ldr	r2, [pc, #128]	; (8d0 <_spi_m_sync_init+0x180>)
 84e:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
 850:	602b      	str	r3, [r5, #0]
	    (regs->ctrlb
 852:	7962      	ldrb	r2, [r4, #5]
 854:	7920      	ldrb	r0, [r4, #4]
 856:	79a3      	ldrb	r3, [r4, #6]
 858:	0212      	lsls	r2, r2, #8
 85a:	4302      	orrs	r2, r0
 85c:	041b      	lsls	r3, r3, #16
 85e:	4313      	orrs	r3, r2
 860:	001a      	movs	r2, r3
 862:	79e3      	ldrb	r3, [r4, #7]
 864:	061b      	lsls	r3, r3, #24
 866:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLB_reg(
 868:	4a1d      	ldr	r2, [pc, #116]	; (8e0 <_spi_m_sync_init+0x190>)
 86a:	4013      	ands	r3, r2
 86c:	2280      	movs	r2, #128	; 0x80
 86e:	0292      	lsls	r2, r2, #10
 870:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
 872:	606b      	str	r3, [r5, #4]
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
 874:	7b23      	ldrb	r3, [r4, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
 876:	732b      	strb	r3, [r5, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
 878:	7b63      	ldrb	r3, [r4, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
 87a:	3530      	adds	r5, #48	; 0x30
 87c:	702b      	strb	r3, [r5, #0]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
 87e:	2307      	movs	r3, #7
 880:	7922      	ldrb	r2, [r4, #4]

	dev->dummy_byte = regs->dummy_byte;

	return ERR_NONE;
 882:	2000      	movs	r0, #0
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
 884:	4013      	ands	r3, r2
 886:	425a      	negs	r2, r3
 888:	4153      	adcs	r3, r2
 88a:	2202      	movs	r2, #2
 88c:	1ad3      	subs	r3, r2, r3
 88e:	7133      	strb	r3, [r6, #4]
	dev->dummy_byte = regs->dummy_byte;
 890:	7be3      	ldrb	r3, [r4, #15]
 892:	7ba2      	ldrb	r2, [r4, #14]
 894:	021b      	lsls	r3, r3, #8
 896:	4313      	orrs	r3, r2
 898:	80f3      	strh	r3, [r6, #6]
	return ERR_NONE;
 89a:	e00c      	b.n	8b6 <_spi_m_sync_init+0x166>
		return ERR_DENIED;
 89c:	2011      	movs	r0, #17
 89e:	e009      	b.n	8b4 <_spi_m_sync_init+0x164>
	return NULL;
 8a0:	2400      	movs	r4, #0
	ASSERT(dev && hw);
 8a2:	42a6      	cmp	r6, r4
 8a4:	d000      	beq.n	8a8 <_spi_m_sync_init+0x158>
 8a6:	e762      	b.n	76e <_spi_m_sync_init+0x1e>
 8a8:	4a06      	ldr	r2, [pc, #24]	; (8c4 <_spi_m_sync_init+0x174>)
 8aa:	0039      	movs	r1, r7
 8ac:	0030      	movs	r0, r6
 8ae:	4b06      	ldr	r3, [pc, #24]	; (8c8 <_spi_m_sync_init+0x178>)
 8b0:	4798      	blx	r3
		return ERR_INVALID_ARG;
 8b2:	200d      	movs	r0, #13
 8b4:	4240      	negs	r0, r0
}
 8b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8b8:	bdfff800 	.word	0xbdfff800
 8bc:	00000b19 	.word	0x00000b19
 8c0:	00000af0 	.word	0x00000af0
 8c4:	00000915 	.word	0x00000915
 8c8:	000002a5 	.word	0x000002a5
 8cc:	000008f3 	.word	0x000008f3
 8d0:	fffffefc 	.word	0xfffffefc
 8d4:	fffdddbf 	.word	0xfffdddbf
 8d8:	00020240 	.word	0x00020240
 8dc:	000008df 	.word	0x000008df
 8e0:	fffd1dbf 	.word	0xfffd1dbf

000008e4 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
 8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	void *                 hw   = dev->prvt;
 8e6:	6804      	ldr	r4, [r0, #0]
{
 8e8:	b085      	sub	sp, #20
 8ea:	9002      	str	r0, [sp, #8]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
 8ec:	7903      	ldrb	r3, [r0, #4]

	ASSERT(dev && hw);
 8ee:	0020      	movs	r0, r4
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
 8f0:	9303      	str	r3, [sp, #12]
	ASSERT(dev && hw);
 8f2:	1e43      	subs	r3, r0, #1
 8f4:	4198      	sbcs	r0, r3
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
 8f6:	680e      	ldr	r6, [r1, #0]
 8f8:	684d      	ldr	r5, [r1, #4]
	ASSERT(dev && hw);
 8fa:	4b2e      	ldr	r3, [pc, #184]	; (9b4 <_spi_m_sync_trans+0xd0>)
{
 8fc:	000f      	movs	r7, r1
	ASSERT(dev && hw);
 8fe:	b2c0      	uxtb	r0, r0
 900:	4a2d      	ldr	r2, [pc, #180]	; (9b8 <_spi_m_sync_trans+0xd4>)
 902:	492e      	ldr	r1, [pc, #184]	; (9bc <_spi_m_sync_trans+0xd8>)
 904:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
 906:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
 908:	075b      	lsls	r3, r3, #29
 90a:	d13a      	bne.n	982 <_spi_m_sync_trans+0x9e>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
 90c:	2203      	movs	r2, #3
 90e:	69e3      	ldr	r3, [r4, #28]
 910:	4013      	ands	r3, r2
 912:	d1fc      	bne.n	90e <_spi_m_sync_trans+0x2a>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
 914:	6822      	ldr	r2, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
 916:	0792      	lsls	r2, r2, #30
 918:	d535      	bpl.n	986 <_spi_m_sync_trans+0xa2>
 91a:	0018      	movs	r0, r3
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
 91c:	7e21      	ldrb	r1, [r4, #24]
 91e:	b2ca      	uxtb	r2, r1
 920:	9201      	str	r2, [sp, #4]
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
 922:	2204      	movs	r2, #4
 924:	9901      	ldr	r1, [sp, #4]
 926:	4211      	tst	r1, r2
 928:	d00d      	beq.n	946 <_spi_m_sync_trans+0x62>
	return ((Sercom *)hw)->SPI.DATA.reg;
 92a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
 92c:	2d00      	cmp	r5, #0
 92e:	d008      	beq.n	942 <_spi_m_sync_trans+0x5e>
		if (ctrl->char_size > 1) {
 930:	9903      	ldr	r1, [sp, #12]
		*ctrl->rxbuf++ = (uint8_t)data;
 932:	702a      	strb	r2, [r5, #0]
		if (ctrl->char_size > 1) {
 934:	2901      	cmp	r1, #1
 936:	d801      	bhi.n	93c <_spi_m_sync_trans+0x58>
		*ctrl->rxbuf++ = (uint8_t)data;
 938:	3501      	adds	r5, #1
 93a:	e002      	b.n	942 <_spi_m_sync_trans+0x5e>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
 93c:	0a12      	lsrs	r2, r2, #8
 93e:	706a      	strb	r2, [r5, #1]
 940:	3502      	adds	r5, #2
	ctrl->rxcnt++;
 942:	3301      	adds	r3, #1
 944:	e005      	b.n	952 <_spi_m_sync_trans+0x6e>
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
 946:	4283      	cmp	r3, r0
 948:	d303      	bcc.n	952 <_spi_m_sync_trans+0x6e>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
 94a:	2201      	movs	r2, #1
 94c:	9901      	ldr	r1, [sp, #4]
 94e:	4211      	tst	r1, r2
 950:	d11c      	bne.n	98c <_spi_m_sync_trans+0xa8>
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
 952:	227f      	movs	r2, #127	; 0x7f
 954:	9901      	ldr	r1, [sp, #4]
 956:	4391      	bics	r1, r2
 958:	d007      	beq.n	96a <_spi_m_sync_trans+0x86>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
 95a:	2301      	movs	r3, #1
		return ERR_OVERFLOW;
 95c:	2013      	movs	r0, #19
 95e:	425b      	negs	r3, r3
 960:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
 962:	3381      	adds	r3, #129	; 0x81
 964:	7623      	strb	r3, [r4, #24]
 966:	4240      	negs	r0, r0
 968:	e004      	b.n	974 <_spi_m_sync_trans+0x90>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
 96a:	68ba      	ldr	r2, [r7, #8]
 96c:	4290      	cmp	r0, r2
 96e:	d3d5      	bcc.n	91c <_spi_m_sync_trans+0x38>
 970:	4293      	cmp	r3, r2
 972:	d3d3      	bcc.n	91c <_spi_m_sync_trans+0x38>
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
 974:	2303      	movs	r3, #3
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
 976:	7e22      	ldrb	r2, [r4, #24]
 978:	421a      	tst	r2, r3
 97a:	d0fc      	beq.n	976 <_spi_m_sync_trans+0x92>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
 97c:	2303      	movs	r3, #3
 97e:	7623      	strb	r3, [r4, #24]
 980:	e015      	b.n	9ae <_spi_m_sync_trans+0xca>
		return ERR_BUSY;
 982:	2004      	movs	r0, #4
 984:	e000      	b.n	988 <_spi_m_sync_trans+0xa4>
		return ERR_NOT_INITIALIZED;
 986:	2014      	movs	r0, #20
 988:	4240      	negs	r0, r0
 98a:	e010      	b.n	9ae <_spi_m_sync_trans+0xca>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
 98c:	9a02      	ldr	r2, [sp, #8]
 98e:	88d2      	ldrh	r2, [r2, #6]
	if (ctrl->txbuf) {
 990:	2e00      	cmp	r6, #0
 992:	d009      	beq.n	9a8 <_spi_m_sync_trans+0xc4>
		if (ctrl->char_size > 1) {
 994:	9903      	ldr	r1, [sp, #12]
		data = *ctrl->txbuf++;
 996:	7832      	ldrb	r2, [r6, #0]
		if (ctrl->char_size > 1) {
 998:	2901      	cmp	r1, #1
 99a:	d801      	bhi.n	9a0 <_spi_m_sync_trans+0xbc>
		data = *ctrl->txbuf++;
 99c:	3601      	adds	r6, #1
 99e:	e003      	b.n	9a8 <_spi_m_sync_trans+0xc4>
 9a0:	7871      	ldrb	r1, [r6, #1]
			ctrl->txbuf++;
 9a2:	3602      	adds	r6, #2
 9a4:	0209      	lsls	r1, r1, #8
			data |= (*ctrl->txbuf) << 8;
 9a6:	430a      	orrs	r2, r1
	ctrl->txcnt++;
 9a8:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
 9aa:	62a2      	str	r2, [r4, #40]	; 0x28
 9ac:	e7d1      	b.n	952 <_spi_m_sync_trans+0x6e>
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
 9ae:	b005      	add	sp, #20
 9b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 9b2:	46c0      	nop			; (mov r8, r8)
 9b4:	000002a5 	.word	0x000002a5
 9b8:	00000a71 	.word	0x00000a71
 9bc:	00000b19 	.word	0x00000b19

000009c0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
 9c0:	b510      	push	{r4, lr}
	system_init();
 9c2:	4b01      	ldr	r3, [pc, #4]	; (9c8 <atmel_start_init+0x8>)
 9c4:	4798      	blx	r3
}
 9c6:	bd10      	pop	{r4, pc}
 9c8:	0000073d 	.word	0x0000073d

000009cc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 9cc:	e7fe      	b.n	9cc <Dummy_Handler>
	...

000009d0 <Reset_Handler>:
{
 9d0:	4821      	ldr	r0, [pc, #132]	; (a58 <Reset_Handler+0x88>)
 9d2:	4922      	ldr	r1, [pc, #136]	; (a5c <Reset_Handler+0x8c>)
 9d4:	b570      	push	{r4, r5, r6, lr}
	if (pSrc != pDest) {
 9d6:	4288      	cmp	r0, r1
 9d8:	d002      	beq.n	9e0 <Reset_Handler+0x10>
 9da:	2300      	movs	r3, #0
		for (; pDest < &_erelocate;) {
 9dc:	4c20      	ldr	r4, [pc, #128]	; (a60 <Reset_Handler+0x90>)
 9de:	e003      	b.n	9e8 <Reset_Handler+0x18>
 9e0:	4b20      	ldr	r3, [pc, #128]	; (a64 <Reset_Handler+0x94>)
	for (pDest = &_szero; pDest < &_ezero;) {
 9e2:	4a21      	ldr	r2, [pc, #132]	; (a68 <Reset_Handler+0x98>)
		*pDest++ = 0;
 9e4:	2100      	movs	r1, #0
 9e6:	e006      	b.n	9f6 <Reset_Handler+0x26>
		for (; pDest < &_erelocate;) {
 9e8:	18ca      	adds	r2, r1, r3
 9ea:	42a2      	cmp	r2, r4
 9ec:	d2f8      	bcs.n	9e0 <Reset_Handler+0x10>
			*pDest++ = *pSrc++;
 9ee:	58c5      	ldr	r5, [r0, r3]
 9f0:	3304      	adds	r3, #4
 9f2:	6015      	str	r5, [r2, #0]
 9f4:	e7f8      	b.n	9e8 <Reset_Handler+0x18>
	for (pDest = &_szero; pDest < &_ezero;) {
 9f6:	4293      	cmp	r3, r2
 9f8:	d201      	bcs.n	9fe <Reset_Handler+0x2e>
		*pDest++ = 0;
 9fa:	c302      	stmia	r3!, {r1}
 9fc:	e7fb      	b.n	9f6 <Reset_Handler+0x26>
	SCB->VTOR = ((uint32_t)pSrc & SCB_VTOR_TBLOFF_Msk);
 9fe:	21ff      	movs	r1, #255	; 0xff
	SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 a00:	2402      	movs	r4, #2
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 a02:	2503      	movs	r5, #3
	SCB->VTOR = ((uint32_t)pSrc & SCB_VTOR_TBLOFF_Msk);
 a04:	4b19      	ldr	r3, [pc, #100]	; (a6c <Reset_Handler+0x9c>)
 a06:	4a1a      	ldr	r2, [pc, #104]	; (a70 <Reset_Handler+0xa0>)
 a08:	438b      	bics	r3, r1
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 a0a:	260c      	movs	r6, #12
	SCB->VTOR = ((uint32_t)pSrc & SCB_VTOR_TBLOFF_Msk);
 a0c:	6093      	str	r3, [r2, #8]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 a0e:	2208      	movs	r2, #8
	SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 a10:	4b18      	ldr	r3, [pc, #96]	; (a74 <Reset_Handler+0xa4>)
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 a12:	4919      	ldr	r1, [pc, #100]	; (a78 <Reset_Handler+0xa8>)
	SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 a14:	625c      	str	r4, [r3, #36]	; 0x24
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 a16:	78cb      	ldrb	r3, [r1, #3]
 a18:	43ab      	bics	r3, r5
 a1a:	4323      	orrs	r3, r4
 a1c:	70cb      	strb	r3, [r1, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 a1e:	78cb      	ldrb	r3, [r1, #3]
 a20:	43b3      	bics	r3, r6
 a22:	4313      	orrs	r3, r2
 a24:	70cb      	strb	r3, [r1, #3]
	DMAC->QOSCTRL.bit.DQOS   = 2;
 a26:	2130      	movs	r1, #48	; 0x30
 a28:	4b14      	ldr	r3, [pc, #80]	; (a7c <Reset_Handler+0xac>)
 a2a:	7b98      	ldrb	r0, [r3, #14]
 a2c:	4388      	bics	r0, r1
 a2e:	3910      	subs	r1, #16
 a30:	4308      	orrs	r0, r1
 a32:	7398      	strb	r0, [r3, #14]
	DMAC->QOSCTRL.bit.FQOS   = 2;
 a34:	7b99      	ldrb	r1, [r3, #14]
 a36:	43b1      	bics	r1, r6
 a38:	4311      	orrs	r1, r2
 a3a:	7399      	strb	r1, [r3, #14]
	NVMCTRL->CTRLB.bit.MANW = 1;
 a3c:	2180      	movs	r1, #128	; 0x80
	DMAC->QOSCTRL.bit.WRBQOS = 2;
 a3e:	7b9a      	ldrb	r2, [r3, #14]
 a40:	43aa      	bics	r2, r5
 a42:	4322      	orrs	r2, r4
 a44:	739a      	strb	r2, [r3, #14]
	NVMCTRL->CTRLB.bit.MANW = 1;
 a46:	4a0e      	ldr	r2, [pc, #56]	; (a80 <Reset_Handler+0xb0>)
 a48:	6853      	ldr	r3, [r2, #4]
 a4a:	430b      	orrs	r3, r1
 a4c:	6053      	str	r3, [r2, #4]
	__libc_init_array();
 a4e:	4b0d      	ldr	r3, [pc, #52]	; (a84 <Reset_Handler+0xb4>)
 a50:	4798      	blx	r3
	main();
 a52:	4b0d      	ldr	r3, [pc, #52]	; (a88 <Reset_Handler+0xb8>)
 a54:	4798      	blx	r3
 a56:	e7fe      	b.n	a56 <Reset_Handler+0x86>
 a58:	00000b54 	.word	0x00000b54
 a5c:	20000000 	.word	0x20000000
 a60:	20000000 	.word	0x20000000
 a64:	20000000 	.word	0x20000000
 a68:	20000030 	.word	0x20000030
 a6c:	00000000 	.word	0x00000000
 a70:	e000ed00 	.word	0xe000ed00
 a74:	410070fc 	.word	0x410070fc
 a78:	41005000 	.word	0x41005000
 a7c:	41004800 	.word	0x41004800
 a80:	41004000 	.word	0x41004000
 a84:	00000a8d 	.word	0x00000a8d
 a88:	000003d5 	.word	0x000003d5

00000a8c <__libc_init_array>:
 a8c:	b570      	push	{r4, r5, r6, lr}
 a8e:	4e0d      	ldr	r6, [pc, #52]	; (ac4 <__libc_init_array+0x38>)
 a90:	4d0d      	ldr	r5, [pc, #52]	; (ac8 <__libc_init_array+0x3c>)
 a92:	2400      	movs	r4, #0
 a94:	1bad      	subs	r5, r5, r6
 a96:	10ad      	asrs	r5, r5, #2
 a98:	d005      	beq.n	aa6 <__libc_init_array+0x1a>
 a9a:	00a3      	lsls	r3, r4, #2
 a9c:	58f3      	ldr	r3, [r6, r3]
 a9e:	3401      	adds	r4, #1
 aa0:	4798      	blx	r3
 aa2:	42a5      	cmp	r5, r4
 aa4:	d1f9      	bne.n	a9a <__libc_init_array+0xe>
 aa6:	f000 f845 	bl	b34 <_init>
 aaa:	4e08      	ldr	r6, [pc, #32]	; (acc <__libc_init_array+0x40>)
 aac:	4d08      	ldr	r5, [pc, #32]	; (ad0 <__libc_init_array+0x44>)
 aae:	2400      	movs	r4, #0
 ab0:	1bad      	subs	r5, r5, r6
 ab2:	10ad      	asrs	r5, r5, #2
 ab4:	d005      	beq.n	ac2 <__libc_init_array+0x36>
 ab6:	00a3      	lsls	r3, r4, #2
 ab8:	58f3      	ldr	r3, [r6, r3]
 aba:	3401      	adds	r4, #1
 abc:	4798      	blx	r3
 abe:	42a5      	cmp	r5, r4
 ac0:	d1f9      	bne.n	ab6 <__libc_init_array+0x2a>
 ac2:	bd70      	pop	{r4, r5, r6, pc}
 ac4:	00000b40 	.word	0x00000b40
 ac8:	00000b40 	.word	0x00000b40
 acc:	00000b40 	.word	0x00000b40
 ad0:	00000b44 	.word	0x00000b44
 ad4:	682f2e2e 	.word	0x682f2e2e
 ad8:	732f6c61 	.word	0x732f6c61
 adc:	682f6372 	.word	0x682f6372
 ae0:	735f6c61 	.word	0x735f6c61
 ae4:	6d5f6970 	.word	0x6d5f6970
 ae8:	6e79735f 	.word	0x6e79735f
 aec:	00632e63 	.word	0x00632e63

00000af0 <_i2cms>:
	...

00000b08 <sercomspi_regs>:
 b08:	0030000c 00020000 00000000 01ff0005     ..0.............
 b18:	2f2e2e00 2f6c7068 63726573 682f6d6f     .../hpl/sercom/h
 b28:	735f6c70 6f637265 00632e6d              pl_sercom.c.

00000b34 <_init>:
 b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 b36:	46c0      	nop			; (mov r8, r8)
 b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 b3a:	bc08      	pop	{r3}
 b3c:	469e      	mov	lr, r3
 b3e:	4770      	bx	lr

00000b40 <__init_array_start>:
 b40:	00000105 	.word	0x00000105

00000b44 <_fini>:
 b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 b46:	46c0      	nop			; (mov r8, r8)
 b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 b4a:	bc08      	pop	{r3}
 b4c:	469e      	mov	lr, r3
 b4e:	4770      	bx	lr

00000b50 <__do_global_dtors_aux_fini_array_entry>:
 b50:	00d9 0000                                   ....
